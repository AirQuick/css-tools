<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Wed May 17, 2017 11:38 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -tree -main -xslt -ll 3 -backtrack -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 9, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
    31, 31, 31, 31, 32, 33, 34, 35, 31, 9, 36, 37, 38, 39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 49, 31, 50, 51, 52, 53, 54, 31, 55, 56, 57, 58, 59, 60,
    61, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 196, 208, 180, 224, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 62, 1, 0, 2, 3, 0, 0, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 9, 36, 37, 38,
    39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35,
    31, 49, 31, 50, 51, 52, 53, 54, 31, 55, 56, 57, 58, 59, 60, 61, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 31, 31
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 541, 30, 31, 32, 33
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043,
    2043, 2043, 2043, 2043, 2043, 2043, 2043, 2016, 2023, 2028, 2042, 2036, 2043, 2043, 2648, 3665, 2043, 2043, 3044, 3631, 2043, 2648, 2052, 2043, 2651, 2055,
    2986, 3585, 3725, 3738, 3476, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2648, 2043, 2043, 2043, 3455, 2458,
    2043, 2648, 2157, 2043, 2651, 3100, 2986, 3585, 2218, 2652, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 2016, 2023, 2028, 2042, 2036, 2043, 2043,
    2708, 3665, 2043, 2043, 3057, 2077, 2043, 2708, 2093, 2043, 2101, 3524, 2706, 2110, 4006, 2102, 2133, 2125, 2130, 2043, 2043, 2043, 2043, 2043, 2043, 3666,
    2043, 3030, 2141, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043,
    2043, 2043, 2043, 2043, 3165, 2583, 3163, 3416, 3422, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 4010, 2146, 2043, 2081, 2043, 2043, 2084, 2494, 2147, 2146,
    2043, 2085, 2147, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 3388, 2165, 2173, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294,
    2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2600, 2043, 2722, 3662, 2043, 2043, 2294, 2155,
    2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2043, 2043,
    2722, 3662, 2043, 3189, 2294, 2155, 3190, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043,
    2043, 2043, 2043, 3666, 2043, 2043, 2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514,
    2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2886, 2186, 2884, 2192, 2361, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2585, 2366, 2043, 2947, 2201, 2043,
    3481, 2069, 2044, 2200, 2043, 3482, 2496, 2209, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2921, 2227, 3571, 3662, 2043, 2043, 3834, 2155, 2043, 3830,
    2498, 3450, 2235, 2862, 2043, 3826, 3837, 2494, 2044, 3336, 3826, 3838, 3410, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2254, 2267, 2043, 2259, 2279, 3662,
    2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2983, 2044, 2178, 2043, 2977, 2292, 2284, 2289, 2043, 2043, 2043, 2043, 2043,
    3289, 2302, 2675, 3711, 2722, 2317, 2043, 2043, 2294, 2337, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146,
    2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2963, 2349, 2356, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494,
    2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2605, 2375, 2382, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146,
    2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2422, 2401, 2407, 2415, 2453, 3662, 2341, 3453,
    3788, 2155, 2043, 3784, 3044, 3631, 2470, 2648, 2491, 2043, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 3666,
    3262, 2506, 2796, 3662, 2043, 2791, 3510, 2155, 3507, 2043, 2498, 2146, 2043, 2294, 2201, 2043, 3513, 2069, 2044, 3427, 2043, 2775, 2496, 2727, 2068, 2043,
    2043, 2043, 2043, 2043, 2043, 2514, 2521, 2526, 2534, 3806, 2043, 2043, 2294, 2553, 2043, 2043, 2498, 2146, 2043, 2294, 2201, 2043, 3513, 2069, 2044, 3427,
    2043, 2775, 2496, 2727, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2852, 2565, 2571, 2579, 2341, 2593, 2613, 2621, 2633, 3539, 2483, 2660, 2668, 3070,
    2683, 2703, 2716, 2735, 2761, 2743, 2758, 3690, 2769, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2852, 2565, 2571, 2579, 2341, 2593, 2613, 2621,
    2633, 3784, 2483, 2660, 2812, 3070, 2836, 2043, 2716, 2849, 2761, 2743, 2043, 3690, 2860, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2852, 2565,
    2571, 2579, 2341, 2593, 2613, 2621, 2633, 3565, 2483, 2660, 2870, 3070, 2894, 2920, 2716, 2915, 2929, 2937, 2920, 3690, 2945, 2804, 3205, 2043, 2043, 2043,
    2043, 2043, 2043, 3666, 2852, 2565, 2571, 2579, 2341, 2593, 2613, 2621, 2633, 3784, 2483, 2660, 2812, 3070, 2836, 2960, 2716, 2955, 2761, 2743, 2960, 3690,
    2971, 2996, 3205, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2852, 2565, 2571, 2579, 2341, 2593, 2613, 2621, 2633, 3565, 2483, 2660, 2870, 3070, 2894, 2920,
    2716, 2915, 2761, 2937, 2920, 3690, 2945, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2852, 2565, 2571, 2579, 2341, 2593, 2613, 2621, 2633, 3784,
    2483, 2660, 2812, 3070, 2836, 2043, 2716, 2849, 2761, 2743, 2043, 3004, 2860, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2043, 3012, 2441, 2445, 3017, 3662,
    2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043,
    2043, 3025, 3028, 3635, 3038, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146,
    2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 3052, 2043, 2722, 3662, 3065, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494,
    2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2043, 3494, 2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146,
    2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 3338, 3765, 2722, 3662, 2043, 2043,
    2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2329, 3078,
    3870, 3082, 3626, 2579, 2341, 3780, 3090, 2621, 3098, 3784, 2483, 2660, 2470, 3070, 2836, 2043, 2716, 2849, 2761, 2743, 2043, 3690, 2860, 2804, 3205, 2043,
    2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824, 3108, 2155, 2043, 3784, 3044, 3631, 2470, 2648, 3119, 2043, 2651, 2069, 2986, 3585,
    2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2242, 2246, 2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294,
    2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 3149, 3130, 3142, 3134, 3180, 3662, 3729, 3302, 3173, 2155,
    2043, 2477, 2695, 3185, 3198, 2271, 3217, 2043, 3225, 3234, 2269, 3249, 3239, 3226, 3278, 3270, 3275, 2043, 2043, 2043, 2043, 2043, 3286, 3666, 3297, 2043,
    2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043,
    2043, 2043, 2043, 3666, 2690, 2043, 2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514,
    2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3864, 3310, 3626, 2579, 2341, 3780, 3090, 2621, 3098, 3784, 3329, 2660, 3346, 3070, 2836, 2043,
    2716, 2849, 2117, 2743, 2043, 3690, 3354, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3626, 2579, 2341, 3780, 3090, 2621, 3098, 3784,
    2483, 2660, 2470, 3070, 2836, 2043, 2716, 2849, 2761, 2743, 2043, 3891, 2860, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3626, 2579,
    2341, 3362, 3375, 2621, 3383, 3820, 2483, 2660, 3367, 3070, 2836, 2043, 2716, 2849, 2761, 2743, 2043, 3690, 2860, 3396, 3205, 2043, 2043, 2043, 2043, 2043,
    2329, 3078, 3870, 3082, 3626, 2579, 2341, 3780, 3090, 3404, 3098, 3784, 2483, 2660, 2470, 3435, 2836, 2043, 2716, 2849, 2761, 2743, 2043, 3690, 2860, 2804,
    3205, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3626, 2579, 2341, 3914, 3090, 2621, 3383, 3784, 3443, 3463, 3919, 3070, 3471, 3667, 2716, 2849,
    2761, 2743, 2643, 3690, 2860, 2804, 3490, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3626, 2579, 2341, 3934, 3090, 2621, 3502, 3784, 2483, 2660,
    3939, 3070, 2836, 3522, 2716, 2849, 2761, 3532, 2043, 3690, 2860, 2804, 3205, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824,
    3108, 2155, 2043, 3558, 3044, 3631, 2470, 2648, 3119, 2043, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078,
    3870, 3082, 3316, 3662, 2341, 2388, 3579, 2155, 2786, 3784, 3044, 3631, 2393, 2648, 3119, 3241, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 3593, 2068, 2043,
    2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824, 3108, 2155, 2043, 3784, 3044, 3631, 2470, 2648, 3119, 2043, 3111, 2069, 2986, 3585,
    2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824, 3108, 3601, 2043, 3705, 3044, 3631, 2470, 2648,
    3119, 2043, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2625, 2323, 3609, 2155,
    3983, 2828, 2877, 3631, 3367, 2901, 3119, 2043, 3612, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3858, 3620,
    3316, 3662, 3209, 3643, 3655, 2155, 2367, 3647, 3044, 3978, 2470, 2648, 3119, 2043, 3791, 2069, 2986, 3585, 2043, 3738, 2496, 3675, 2068, 2043, 2043, 2043,
    2043, 2043, 2329, 3078, 3852, 3683, 3316, 3662, 2557, 2824, 3108, 2155, 2043, 3256, 3044, 3631, 3698, 2648, 3719, 2462, 3737, 2781, 2986, 2907, 2043, 3738,
    2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2540, 3108, 2155, 3996, 3784, 3044, 3631, 2545, 3746, 3119, 2043,
    2651, 2069, 2986, 3585, 4039, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 3773, 3799, 2155, 3814, 3784,
    3044, 3631, 2470, 2648, 3119, 2638, 2651, 2069, 3156, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3846, 3884, 3316, 3662,
    2341, 2824, 3108, 2155, 2043, 3784, 3044, 3631, 2470, 2648, 3119, 2043, 2651, 2069, 3899, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043,
    2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824, 3108, 3907, 2043, 3820, 3044, 3631, 3927, 2648, 3119, 2219, 2651, 2215, 2986, 3585, 3947, 3738, 2841, 2063,
    3955, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3876, 3967, 3973, 3662, 2341, 2824, 3108, 2155, 2043, 3784, 3044, 3631, 2470, 2648, 3119, 2043, 2651, 2069,
    2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 3545, 3108, 2155, 4001, 3784, 3044, 3631,
    3550, 2648, 3119, 2043, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824,
    3108, 2155, 2043, 3820, 3044, 3631, 2470, 2648, 3119, 2043, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2329, 3078,
    3870, 3082, 3316, 3662, 2341, 2824, 3108, 2155, 2043, 3784, 3044, 3321, 2470, 2648, 3119, 2043, 2651, 2069, 2986, 3585, 2043, 3738, 2496, 2063, 2068, 2043,
    2043, 2043, 2043, 2043, 2329, 3078, 3870, 3082, 3316, 3662, 2341, 2824, 3108, 3991, 2043, 3784, 3044, 3631, 2470, 2648, 3119, 2043, 2651, 2069, 2986, 3585,
    2043, 3738, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 2043, 4018, 2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294,
    2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 4029, 4026, 2750, 2309, 2722, 3662, 2043, 2043, 2294, 2155,
    2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 3666, 4037, 2429,
    2435, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514, 2044, 2146, 2043, 2043, 2043, 2043,
    2043, 2043, 2043, 3666, 2819, 3959, 2722, 3662, 2043, 2043, 2294, 2155, 2043, 2043, 2498, 2146, 2043, 2294, 2043, 2043, 3513, 2494, 2044, 2146, 2043, 3514,
    2044, 2146, 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2016, 2023, 2028, 3759, 3753, 2043, 2043, 2648, 2155, 2043, 2043, 2988, 2458, 2043, 2648, 2157, 2043,
    2651, 3122, 2986, 3585, 2218, 2652, 2496, 2063, 2068, 2043, 2043, 2043, 2043, 2043, 1325, 1327, 1327, 1327, 1327, 0, 0, 1327, 1327, 0, 0, 0, 1327, 1327,
    1327, 1327, 1327, 1327, 1327, 1327, 0, 42, 42, 42, 1325, 0, 1327, 0, 0, 0, 0, 0, 0, 0, 0, 37, 3894, 3894, 0, 0, 0, 0, 0, 93, 0, 118, 0, 38, 3894, 0, 154, 0,
    0, 0, 154, 154, 0, 0, 0, 0, 0, 104, 0, 2922, 3969, 0, 0, 0, 0, 0, 3072, 38, 0, 0, 0, 0, 0, 0, 3969, 0, 0, 0, 0, 0, 157, 0, 2916, 102, 104, 2922, 3969, 0, 0,
    0, 104, 2922, 3969, 0, 0, 0, 192, 0, 0, 0, 10240, 0, 0, 3001, 186, 104, 3969, 0, 192, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 102, 68, 0, 0, 2851, 37, 38, 0,
    0, 0, 0, 0, 0, 0, 3072, 42, 42, 0, 3894, 0, 0, 0, 0, 0, 93, 0, 59, 59, 54, 54, 54, 59, 54, 59, 0, 0, 2851, 37, 38, 0, 0, 0, 0, 0, 768, 0, 42, 0, 0, 0, 0, 0,
    0, 38, 38, 0, 0, 0, 38, 0, 3072, 0, 0, 0, 0, 0, 154, 0, 0, 3072, 0, 0, 154, 0, 0, 0, 154, 154, 0, 0, 0, 140, 0, 0, 0, 0, 0, 6400, 0, 0, 6400, 6400, 6400, 0,
    6400, 0, 134, 0, 0, 0, 0, 3462, 0, 0, 0, 10752, 0, 0, 0, 10752, 10752, 10752, 0, 10752, 0, 6656, 0, 0, 0, 0, 0, 6656, 0, 0, 0, 6656, 6656, 42, 6656, 0, 0,
    0, 0, 0, 0, 36, 70, 71, 41, 6656, 0, 0, 2851, 37, 38, 0, 0, 768, 0, 0, 0, 768, 768, 0, 0, 0, 0, 0, 0, 37, 38, 0, 43, 0, 48, 0, 0, 0, 6912, 0, 0, 0, 13312,
    13312, 13312, 0, 13312, 2856, 22601, 22601, 8523, 22601, 8448, 0, 0, 0, 2851, 0, 86, 2851, 0, 0, 0, 2851, 2856, 2851, 0, 22601, 75, 0, 3894, 0, 0, 0, 0, 0,
    3894, 0, 0, 0, 4608, 4608, 0, 0, 4608, 4608, 4608, 0, 0, 2851, 37, 38, 0, 0, 2851, 37, 3072, 0, 0, 0, 0, 0, 0, 0, 5888, 7424, 5120, 5120, 0, 0, 5120, 5120,
    5120, 0, 0, 2851, 37, 38, 0, 0, 0, 2851, 0, 88, 2851, 0, 0, 0, 0, 2856, 0, 42, 0, 0, 0, 0, 39, 34, 34, 0, 34, 0, 0, 7740, 34, 0, 7745, 7740, 34, 34, 34,
    7745, 34, 0, 0, 0, 34, 39, 34, 0, 0, 0, 13568, 0, 0, 13568, 0, 0, 2851, 37, 38, 0, 0, 0, 8704, 0, 0, 0, 8768, 8768, 8768, 0, 8768, 7745, 0, 2851, 2851, 37,
    38, 0, 2856, 3894, 0, 0, 0, 0, 0, 163, 0, 0, 0, 2851, 0, 0, 0, 0, 2856, 0, 0, 36, 0, 117, 41, 0, 0, 0, 2851, 2941, 37, 126, 38, 3894, 3894, 151, 0, 0, 154,
    0, 0, 0, 0, 0, 0, 37, 37, 38, 0, 61, 61, 7936, 7936, 7936, 61, 7936, 44, 46, 46, 46, 46, 0, 0, 46, 46, 0, 0, 0, 46, 46, 46, 46, 46, 46, 8238, 46, 8238, 0,
    0, 2851, 37, 38, 0, 0, 0, 2851, 0, 89, 2851, 0, 0, 0, 0, 2856, 0, 38912, 74, 38912, 3894, 0, 0, 0, 0, 0, 3894, 0, 79, 0, 3646, 3646, 0, 0, 0, 3646, 0, 2851,
    2885, 37, 38, 0, 2856, 2888, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 37, 37, 3072, 0, 0, 4178, 3668, 3669, 3646, 2851, 0, 0, 49, 0, 49, 0, 0, 0, 0, 0, 7424, 5120,
    0, 3668, 2856, 0, 0, 2917, 103, 105, 2923, 42, 42, 0, 3948, 0, 0, 0, 0, 0, 3894, 77, 0, 0, 4208, 3697, 3668, 3669, 0, 0, 0, 0, 162, 0, 0, 0, 0, 197, 0, 0,
    0, 0, 2851, 37, 38, 2856, 3894, 0, 0, 0, 127, 2856, 2944, 3970, 0, 0, 0, 4229, 3697, 2851, 135, 0, 137, 0, 2856, 0, 0, 50, 6912, 50, 0, 0, 6912, 3894, 3990,
    0, 0, 4249, 154, 156, 0, 0, 51, 0, 51, 0, 0, 0, 36, 36, 70, 70, 71, 158, 0, 160, 0, 0, 0, 0, 0, 0, 2916, 102, 104, 2922, 0, 2983, 168, 169, 2986, 4011, 0,
    0, 0, 2851, 37, 38, 0, 0, 154, 0, 0, 0, 154, 4270, 154, 175, 176, 0, 177, 0, 179, 187, 3004, 4029, 0, 0, 4096, 193, 0, 0, 52, 13312, 13364, 0, 0, 13312,
    194, 0, 195, 0, 0, 0, 0, 0, 0, 3001, 186, 204, 0, 205, 0, 0, 0, 0, 37, 38, 0, 0, 0, 0, 154, 154, 0, 118, 0, 0, 0, 88, 88, 0, 0, 0, 83, 0, 61, 0, 0, 2851,
    37, 38, 0, 0, 38, 3894, 0, 208, 0, 0, 0, 211, 3697, 2851, 0, 0, 0, 0, 2856, 0, 0, 53, 0, 53, 0, 0, 0, 2851, 0, 0, 2851, 0, 0, 2856, 0, 121, 3894, 3990, 0,
    0, 4249, 154, 0, 0, 0, 9728, 0, 0, 37, 4270, 154, 175, 0, 0, 0, 0, 0, 0, 3646, 0, 204, 0, 0, 0, 0, 0, 0, 37, 38, 3328, 3697, 2851, 116, 0, 138, 0, 2856, 0,
    0, 124, 2851, 2851, 37, 37, 38, 38, 0, 0, 0, 0, 38, 0, 0, 0, 3894, 3990, 0, 0, 4249, 154, 116, 0, 0, 144, 0, 2851, 37, 38, 2856, 3894, 0, 191, 0, 154, 0,
    4270, 154, 175, 116, 0, 138, 0, 0, 0, 0, 0, 0, 0, 6400, 180, 0, 0, 0, 0, 0, 3001, 186, 187, 3004, 4029, 0, 0, 4096, 193, 116, 204, 138, 0, 0, 0, 0, 0, 37,
    3072, 0, 4270, 154, 175, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 4608, 0, 204, 0, 161, 0, 0, 0, 0, 37, 38, 0, 0, 0, 0, 768, 154, 0, 0, 0, 0, 0, 0, 2851, 37, 37,
    38, 38, 3894, 0, 208, 161, 0, 0, 211, 2851, 200, 201, 2856, 4042, 11264, 0, 154, 42, 0, 0, 8704, 0, 8704, 0, 0, 2851, 37, 38, 0, 0, 42, 0, 0, 0, 8960, 0, 0,
    0, 0, 0, 0, 68, 0, 8960, 0, 0, 2851, 37, 38, 0, 0, 0, 2851, 2851, 37, 37, 38, 0, 0, 9216, 0, 9216, 0, 0, 0, 0, 2916, 0, 102, 0, 2304, 2560, 2048, 1792,
    1536, 0, 0, 0, 0, 2962, 147, 148, 2965, 42, 0, 0, 0, 0, 2856, 2851, 2851, 2851, 2851, 2856, 2851, 2856, 2856, 0, 0, 2917, 103, 105, 2923, 0, 4208, 0, 0, 0,
    0, 0, 0, 118, 0, 2856, 2856, 0, 0, 2851, 37, 38, 2856, 3894, 172, 0, 3894, 3894, 0, 0, 0, 154, 0, 0, 0, 118, 0, 42, 0, 0, 0, 0, 41, 36, 36, 36, 36, 41, 36,
    36, 36, 0, 36, 0, 0, 36, 36, 0, 0, 0, 36, 41, 36, 0, 0, 182, 0, 0, 184, 2851, 37, 37, 0, 0, 0, 0, 37, 0, 0, 0, 41, 41, 0, 0, 36, 37, 38, 41, 36, 36, 2851,
    70, 71, 41, 41, 76, 0, 0, 0, 0, 0, 4352, 0, 0, 0, 0, 36, 0, 0, 0, 139, 41, 0, 0, 212, 154, 0, 0, 0, 0, 0, 3894, 78, 0, 76, 76, 0, 0, 0, 155, 0, 117, 0, 36,
    70, 71, 41, 76, 0, 0, 155, 0, 155, 154, 0, 117, 0, 139, 0, 0, 0, 0, 0, 0, 164, 0, 71, 41, 76, 0, 0, 0, 155, 0, 0, 2851, 0, 118, 2856, 0, 0, 0, 7936, 0, 0,
    61, 7936, 71, 76, 0, 155, 0, 0, 0, 155, 155, 0, 0, 0, 0, 0, 0, 70, 0, 0, 11008, 0, 0, 0, 0, 0, 0, 6912, 0, 0, 0, 11008, 0, 11008, 0, 0, 0, 36, 0, 0, 36, 92,
    55, 2856, 2851, 2851, 2851, 2851, 2856, 2851, 2851, 2851, 37, 38, 2856, 2856, 3894, 0, 12288, 0, 0, 0, 123, 0, 2851, 2941, 37, 126, 38, 3328, 0, 0, 0, 0, 0,
    0, 0, 9472, 0, 2851, 0, 0, 0, 0, 2856, 141, 204, 0, 0, 0, 0, 206, 207, 37, 0, 81, 4178, 2851, 0, 86, 2851, 0, 0, 0, 0, 2856, 0, 2856, 2856, 95, 0, 2917,
    103, 105, 2923, 0, 4208, 0, 86, 86, 0, 0, 0, 54, 0, 0, 59, 54, 38, 3894, 0, 208, 0, 209, 0, 211, 42, 42, 0, 3948, 0, 11776, 0, 0, 0, 5632, 0, 0, 0, 37, 37,
    0, 0, 0, 37, 0, 0, 2851, 3072, 38, 0, 0, 0, 0, 0, 154, 0, 0, 143, 0, 0, 2962, 147, 148, 2965, 122, 0, 0, 2851, 2941, 37, 126, 38, 3328, 3328, 0, 0, 0, 0, 0,
    0, 2851, 0, 37, 0, 127, 2856, 2944, 3970, 0, 0, 132, 4229, 3894, 3990, 0, 152, 4249, 154, 0, 0, 140, 0, 0, 0, 37, 3072, 0, 0, 0, 0, 154, 10496, 0, 212, 154,
    0, 0, 0, 0, 0, 4864, 0, 4864, 0, 4208, 0, 87, 87, 0, 0, 0, 83, 0, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 178, 0, 187, 3004, 4029, 190, 0,
    4096, 193, 0, 0, 2851, 115, 0, 2856, 0, 0, 0, 2851, 0, 90, 2851, 0, 0, 0, 0, 2856, 0, 0, 5888, 2851, 0, 0, 2856, 120, 0, 0, 2851, 116, 0, 2856, 0, 0, 0,
    2851, 37, 38, 0, 3328, 2856, 2856, 96, 99, 2851, 37, 38, 2856, 3894, 0, 0, 0, 154, 0, 38, 3894, 11520, 154, 0, 0, 0, 154, 42, 42, 0, 3894, 0, 0, 0, 110,
    2856, 2856, 97, 0, 2851, 37, 38, 2856, 3894, 173, 0, 56, 2856, 2851, 2851, 2851, 2851, 2856, 2851, 2851, 2885, 37, 38, 2856, 2856, 3894, 0, 0, 0, 0, 0, 0,
    8960, 0, 80, 0, 0, 2851, 0, 0, 2851, 93, 0, 2856, 0, 0, 2856, 2856, 98, 0, 2851, 37, 38, 2856, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 165, 38, 3894, 0, 154,
    0, 0, 210, 154, 57, 2856, 2851, 2851, 2851, 2851, 2856, 2851, 200, 201, 2856, 4042, 0, 0, 154, 0, 2851, 0, 0, 118, 0, 2856, 0, 0, 2930, 0, 0, 2935, 0, 0, 0,
    6912, 6912, 6912, 0, 6912, 3894, 3894, 0, 0, 0, 154, 0, 118, 0, 140, 0, 0, 0, 0, 0, 76, 0, 0, 166, 2851, 37, 38, 2856, 3894, 0, 0, 154, 142, 0, 0, 145,
    2851, 37, 38, 2856, 42, 42, 42, 1325, 0, 1327, 0, 0, 2851, 37, 38, 0, 0, 0, 9472, 9539, 9472, 0, 9472, 12544, 0, 0, 2851, 0, 0, 2907, 0, 0, 4178, 2851, 0,
    0, 2851, 0, 0, 2856, 0, 0, 2851, 37, 38, 2856, 3894, 0, 12800, 2856, 2910, 0, 0, 2851, 37, 38, 2856, 74, 0, 74, 74, 0, 0, 7168, 111, 0, 0, 0, 0, 0, 5888, 0,
    2851, 0, 0, 2856, 0, 0, 0, 5632, 0, 0, 0, 0, 0, 3328, 0, 0, 0, 37, 38, 3328, 0, 0, 0, 0, 2851, 2851, 0, 2851, 0, 58, 2851, 2851, 0, 2851, 0, 57, 2851, 2851,
    0, 2851, 0, 56, 2851, 2851, 0, 2851, 0, 55, 2851, 2851, 0, 2851, 0, 0, 2851, 2851, 0, 2851, 0, 0, 2879, 2851, 58, 2856, 2851, 2851, 2851, 2851, 2856, 2851,
    200, 201, 2856, 4042, 0, 203, 154, 0, 181, 0, 0, 183, 0, 2851, 37, 42, 42, 0, 3894, 0, 0, 12032, 0, 0, 4178, 2851, 0, 86, 2851, 0, 136, 0, 0, 2856, 0, 0,
    2851, 0, 0, 0, 140, 2856, 0, 0, 4178, 2851, 0, 87, 2851, 0, 0, 0, 0, 2856, 0, 0, 140, 0, 0, 0, 9984, 0, 199, 0, 1024, 154, 154, 0, 0, 0, 0, 0, 5376, 0,
    5376, 0, 2882, 2879, 2851, 2851, 2851, 2882, 2851, 2851, 2851, 37, 38, 2856, 2856, 3894, 131, 0, 0, 0, 86, 86, 5888, 0, 0, 42, 42, 0, 3894, 109, 0, 0, 0,
    89, 89, 0, 0, 0, 90, 90, 0, 0, 0, 196, 0, 0, 0, 0, 0, 3072, 3072, 38, 13056, 0, 0, 0, 0, 13056, 0, 13056, 42, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 13312, 13568,
    13568, 0, 0, 0, 0, 0, 0, 198, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    106, 112, 116, 119, 122, 126, 133, 129, 137, 141, 146, 151, 155, 159, 294, 164, 173, 140, 147, 168, 177, 187, 189, 183, 234, 237, 142, 293, 180, 182, 233,
    140, 284, 199, 201, 168, 236, 194, 263, 201, 167, 235, 193, 198, 201, 233, 140, 160, 200, 286, 205, 266, 267, 300, 108, 212, 209, 216, 220, 224, 228, 232,
    168, 169, 241, 168, 281, 247, 168, 243, 168, 168, 260, 248, 168, 168, 250, 254, 168, 168, 271, 168, 249, 253, 168, 274, 168, 168, 252, 168, 274, 168, 168,
    251, 255, 256, 292, 168, 278, 168, 290, 168, 298, 306, 304, 255, 1024, 33554432, 0, 0, 0, 524288, 3072, 5120, 67109888, 33554432, 8388624, 33554448,
    134217744, 16, 5120, 67109888, 3088, 3088, 992, 1140868096, 992, 268435472, 541830164, 1159742480, 1161708560, -1572094948, 1195262992, 285212688,
    541834260, 575384596, 1159742480, -1572094948, 1024, 1024, 1024, 2048, 2048, 5120, 5120, 16384, 5120, 8388608, 8388608, 8388608, 16384, 8388624, 0, 16,
    134217728, 256, 512, 128, 64, 32, 16384, 0, 0, 4, 4268032, 4268032, 1028, 2097152, 0, 0, 0, 0, 1, 4207616, 5124, 0, 8, 0, 32768, 4202496, 4202496, 1028,
    2097152, 2097152, 5124, 0, 0, 4268032, 4194304, 4194304, 4194304, 1028, 2097152, 2048, 5120, 16384, 0, 0, 0, 32768, 4, 2097152, 2097152, 2097152, 2097152,
    2048, 16384, 0, 4, 5, 2, 524288, 1, 1, 1, 3, 1048577, 1048581, 1032, 524802, 525320, 260097, 1, 524819, 522241, 1, 1, 1573395, 525299, 786963, 1048581,
    786963, 1048583, 0, 0, 0, 8, 1024, 2048, 2048, 2048, 0, 1, 0, 0, 480, 0, 98304, 131072, 0, 0, 0, 32, 64, 128, 256, 0, 0, 0, 2048, 6144, 8192, 16384, 32768,
    4, 4, 2097152, 0, 8, 4, 4, 6144, 32768, 131072, 0, 0, 6144, 131072, 32, 64, 256, 0, 0, 14336, 16384, 16384, 0, 0, 8, 2048, 0, 2048, 4096, 0, 0, 0, 32768,
    4203520, 32, 256, 0, 0, 1024, 524288, 0, 256, 0, 0, 4096, 0
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    &quot;'!important'&quot;,
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'STRING',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    &quot;'+'&quot;,
    &quot;'&gt;'&quot;,
    &quot;','&quot;,
    &quot;'~'&quot;,
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'and'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="$end - $result idiv 64"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 64 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 212 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>            <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1W(8, $input, $state)"/>          <!-- S^WS | CommentContents | '/*' -->
    <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>            <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>         <!-- S^WS | '*/' | '/*' -->
    <xsl:variable name="state" select="p:consumeT(27, $input, $state)"/>            <!-- '*/' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Try parsing Ignore.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Ignore" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S^WS -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- S^WS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-COMMENT($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(24, $input, $state)"/>     <!-- S^WS | '(' | ',' | '/*' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' |
                                                                                         'only' | 'or' | 'screen' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 50">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 24">                                <!-- '(' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1W(21, $input, $state)"/>         <!-- S^WS | ',' | '/*' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' |
                                                                                         'or' | 'screen' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>     <!-- S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 52">                                      <!-- '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-query_declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(50, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>         <!-- S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(38, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>         <!-- S^WS | IDENT | STRING | '/*' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- S^WS | '/*' | ';' -->
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- GREATER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- TILDE -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(29, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>       <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>      <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consumeT(15, $input, $state)"/>      <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>      <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consumeT(29, $input, $state)"/>      <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consumeT(22, $input, $state)"/>      <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>      <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/>      <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consumeT(19, $input, $state)"/>      <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                         PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2W(32, $input, $state)"/> <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                           PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' |
                                                                                           ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 34                                          (: ';' :)
                       or $state[$p:lk] = 52                                          (: '}' :)
                       or $state[$p:lk] = 2122                                        (: IDENT ':' :)
                       or $state[$p:lk] = 2123">                                    <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 31">                                <!-- '/' -->
                  <xsl:variable name="state" select="p:consume(31, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                               PERCENTAGE | PLUS | COMMA | DIMENSION | '-' | '/*' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                         PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2W(32, $input, $state)"/> <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                           PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' |
                                                                                           ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 34                                          (: ';' :)
                       or $state[$p:lk] = 52                                          (: '}' :)
                       or $state[$p:lk] = 2122                                        (: IDENT ':' :)
                       or $state[$p:lk] = 2123">                                    <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 31">                                <!-- '/' -->
                  <xsl:variable name="state" select="p:consumeT(31, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                               PERCENTAGE | PLUS | COMMA | DIMENSION | '-' | '/*' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consumeT(3, $input, $state)"/>       <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/>      <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2W(32, $input, $state)"/> <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                           PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' |
                                                                                           ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 2122                                       (: IDENT ':' :)
                      and $state[$p:lk] != 2123">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/> <!-- S^WS | '/*' | ':' -->
            <xsl:variable name="state" select="p:consume(33, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2W(32, $input, $state)"/> <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                           PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' |
                                                                                           ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 2122                                       (: IDENT ':' :)
                      and $state[$p:lk] != 2123">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/> <!-- S^WS | '/*' | ':' -->
            <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/>    <!-- ':' -->
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>         <!-- S^WS | '/*' | ':' -->
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>         <!-- S^WS | '/*' | ':' -->
    <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:try-declaration-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-values($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>         <!-- S^WS | IDENT | STRING | '/*' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/>          <!-- S^WS | ')' | '/*' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(24, $input, $state)"/>            <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/>         <!-- S^WS | IDENT | STRING | '/*' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/>          <!-- S^WS | ')' | '/*' -->
    <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>            <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>            <!-- IDENT -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 41">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 41">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(21, $input, $state)"/>            <!-- NOT -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consume(17, $input, $state)"/>   <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consume(16, $input, $state)"/>   <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 2">                                     <!-- URL -->
              <xsl:variable name="state" select="p:consume(2, $input, $state)"/>    <!-- URL -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 29">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consume(29, $input, $state)"/>   <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consume(22, $input, $state)"/>   <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 13">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consume(13, $input, $state)"/>   <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 11">                                    <!-- STRING -->
              <xsl:variable name="state" select="p:consume(11, $input, $state)"/>   <!-- STRING -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 10">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consume(10, $input, $state)"/>   <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="p:consume(19, $input, $state)"/>   <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | ')' | '-' | '/*' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 25">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>  <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>  <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 2">                                     <!-- URL -->
              <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>   <!-- URL -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consumeT(15, $input, $state)"/>  <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 29">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consumeT(29, $input, $state)"/>  <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consumeT(22, $input, $state)"/>  <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 13">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>  <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 11">                                    <!-- STRING -->
              <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/>  <!-- STRING -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 10">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>  <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="p:consumeT(19, $input, $state)"/>  <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | ')' | '-' | '/*' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 25">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-expression-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- FUNCTION -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/>      <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- IDENT | '*' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/>    <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3274">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>          <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 42">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(35, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- IDENT | STRING -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- ']' -->
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(41, $input, $state)"/>            <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- IDENT | '*' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/>    <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3274">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>            <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>          <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 42">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consumeT(7, $input, $state)"/> <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consumeT(8, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consumeT(9, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/> <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- IDENT | STRING -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- ']' -->
    <xsl:variable name="state" select="p:consumeT(42, $input, $state)"/>            <!-- ']' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/>            <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>            <!-- IDENT -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>            <!-- IDENT -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 51">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 51">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consumeT(51, $input, $state)"/>            <!-- '|' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2W(31, $input, $state)"/>   <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' |
                                                                                         ')' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3274,                                  (: IDENT '|' :)
                                               3290)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 44234                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 44250                                         (: '*' '|' IDENT :)
                     or $state[$p:lk] = 109770                                        (: IDENT '|' '*' :)
                     or $state[$p:lk] = 109786">                                    <!-- '*' '|' '*' -->
          <xsl:variable name="state" select="p:memoized($state, 2)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-namespace_prefix($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 51">                                        <!-- '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>           <!-- IDENT | '*' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-element_name($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2W(31, $input, $state)"/>   <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' |
                                                                                         ')' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3274,                                  (: IDENT '|' :)
                                               3290)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 44234                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 44250                                         (: '*' '|' IDENT :)
                     or $state[$p:lk] = 109770                                        (: IDENT '|' '*' :)
                     or $state[$p:lk] = 109786">                                    <!-- '*' '|' '*' -->
          <xsl:variable name="state" select="p:memoized($state, 2)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-namespace_prefix($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 51">                                        <!-- '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>           <!-- IDENT | '*' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-element_name($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>     <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' |
                                                                                         '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 14">                                   <!-- HASH -->
              <xsl:variable name="state" select="p:lookahead2W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' |
                                                                                           '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1358">                           <!-- HASH NOT -->
                    <xsl:variable name="state" select="p:lookahead3(19, $input, $state)"/> <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1550">                           <!-- HASH '(' -->
                    <xsl:variable name="state" select="p:lookahead3W(15, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2126">                           <!-- HASH ':' -->
                    <xsl:variable name="state" select="p:lookahead3(13, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2638">                           <!-- HASH '[' -->
                    <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3214">                           <!-- HASH '{' -->
                    <xsl:variable name="state" select="p:lookahead3W(16, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3278">                           <!-- HASH '|' -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1934,                              (: HASH '.' :)
                                                   2318)">                          <!-- HASH '@' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (654,                               (: HASH IDENT :)
                                                   910,                               (: HASH HASH :)
                                                   1678)">                          <!-- HASH '*' -->
                    <xsl:variable name="state" select="p:lookahead3W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT |
                                                                                                 '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1102,                              (: HASH PLUS :)
                                                   1166,                              (: HASH GREATER :)
                                                   1230,                              (: HASH COMMA :)
                                                   1294)">                          <!-- HASH TILDE -->
                    <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                 '@' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 21">                                   <!-- NOT -->
              <xsl:variable name="state" select="p:lookahead2(19, $input, $state)"/> <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 917">                            <!-- NOT HASH -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- ')' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1941">                           <!-- NOT '.' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2133">                           <!-- NOT ':' -->
                    <xsl:variable name="state" select="p:lookahead3(13, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2645">                           <!-- NOT '[' -->
                    <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3285">                           <!-- NOT '|' -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (661,                               (: NOT IDENT :)
                                                   1685)">                          <!-- NOT '*' -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- ')' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 24">                                   <!-- '(' -->
              <xsl:variable name="state" select="p:lookahead2W(15, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] = (664,                               (: '(' IDENT :)
                                                   728)">                           <!-- '(' STRING -->
                    <xsl:variable name="state" select="p:lookahead3W(11, $input, $state)"/> <!-- S^WS | '/*' | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 33">                                   <!-- ':' -->
              <xsl:variable name="state" select="p:lookahead2(13, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 673">                            <!-- ':' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT |
                                                                                                 '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 801">                            <!-- ':' FUNCTION -->
                    <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE |
                                                                                                 PLUS | COMMA | DIMENSION | '-' | '/*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2145">                           <!-- ':' ':' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- IDENT | FUNCTION -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 41">                                   <!-- '[' -->
              <xsl:variable name="state" select="p:lookahead2(14, $input, $state)"/> <!-- IDENT | '*' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 681">                            <!-- '[' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH |
                                                                                                SUBSTRINGMATCH | '=' | ']' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1705">                           <!-- '[' '*' -->
                    <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3305">                           <!-- '[' '|' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = (30,                                      (: '.' :)
                                             36)">                                  <!-- '@' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- IDENT -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] = (670,                               (: '.' IDENT :)
                                                   676)">                           <!-- '@' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT |
                                                                                                 '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 10                                       (: IDENT :)
                        and $state[$p:lk] != 17                                       (: PLUS :)
                        and $state[$p:lk] != 18                                       (: GREATER :)
                        and $state[$p:lk] != 19                                       (: COMMA :)
                        and $state[$p:lk] != 20                                       (: TILDE :)
                        and $state[$p:lk] != 26                                       (: '*' :)
                        and $state[$p:lk] != 50                                       (: '{' :)
                        and $state[$p:lk] != 51">                                   <!-- '|' -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 14">                          <!-- HASH -->
                        <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/> <!-- HASH -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 30">                          <!-- '.' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-class($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 41">                          <!-- '[' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-attrib($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 33">                          <!-- ':' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-pseudo($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 21">                          <!-- NOT -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-negation($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 36">                          <!-- '@' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-atrule($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-mediaquery_selector($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 30">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 41">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 36">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(14, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 30">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 41">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 21">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 36">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>     <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' |
                                                                                         '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 14">                                   <!-- HASH -->
              <xsl:variable name="state" select="p:lookahead2W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' |
                                                                                           '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1358">                           <!-- HASH NOT -->
                    <xsl:variable name="state" select="p:lookahead3(19, $input, $state)"/> <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1550">                           <!-- HASH '(' -->
                    <xsl:variable name="state" select="p:lookahead3W(15, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2126">                           <!-- HASH ':' -->
                    <xsl:variable name="state" select="p:lookahead3(13, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2638">                           <!-- HASH '[' -->
                    <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3214">                           <!-- HASH '{' -->
                    <xsl:variable name="state" select="p:lookahead3W(16, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3278">                           <!-- HASH '|' -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1934,                              (: HASH '.' :)
                                                   2318)">                          <!-- HASH '@' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (654,                               (: HASH IDENT :)
                                                   910,                               (: HASH HASH :)
                                                   1678)">                          <!-- HASH '*' -->
                    <xsl:variable name="state" select="p:lookahead3W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT |
                                                                                                 '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1102,                              (: HASH PLUS :)
                                                   1166,                              (: HASH GREATER :)
                                                   1230,                              (: HASH COMMA :)
                                                   1294)">                          <!-- HASH TILDE -->
                    <xsl:variable name="state" select="p:lookahead3W(23, $input, $state)"/> <!-- S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                 '@' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 21">                                   <!-- NOT -->
              <xsl:variable name="state" select="p:lookahead2(19, $input, $state)"/> <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 917">                            <!-- NOT HASH -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- ')' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1941">                           <!-- NOT '.' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2133">                           <!-- NOT ':' -->
                    <xsl:variable name="state" select="p:lookahead3(13, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2645">                           <!-- NOT '[' -->
                    <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3285">                           <!-- NOT '|' -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (661,                               (: NOT IDENT :)
                                                   1685)">                          <!-- NOT '*' -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- ')' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 24">                                   <!-- '(' -->
              <xsl:variable name="state" select="p:lookahead2W(15, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] = (664,                               (: '(' IDENT :)
                                                   728)">                           <!-- '(' STRING -->
                    <xsl:variable name="state" select="p:lookahead3W(11, $input, $state)"/> <!-- S^WS | '/*' | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 33">                                   <!-- ':' -->
              <xsl:variable name="state" select="p:lookahead2(13, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 673">                            <!-- ':' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT |
                                                                                                 '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 801">                            <!-- ':' FUNCTION -->
                    <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE |
                                                                                                 PLUS | COMMA | DIMENSION | '-' | '/*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2145">                           <!-- ':' ':' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- IDENT | FUNCTION -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 41">                                   <!-- '[' -->
              <xsl:variable name="state" select="p:lookahead2(14, $input, $state)"/> <!-- IDENT | '*' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 681">                            <!-- '[' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH |
                                                                                                SUBSTRINGMATCH | '=' | ']' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1705">                           <!-- '[' '*' -->
                    <xsl:variable name="state" select="p:lookahead3(3, $input, $state)"/> <!-- '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3305">                           <!-- '[' '|' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = (30,                                      (: '.' :)
                                             36)">                                  <!-- '@' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- IDENT -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] = (670,                               (: '.' IDENT :)
                                                   676)">                           <!-- '@' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(29, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | NOT |
                                                                                                 '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 10                                       (: IDENT :)
                        and $state[$p:lk] != 17                                       (: PLUS :)
                        and $state[$p:lk] != 18                                       (: GREATER :)
                        and $state[$p:lk] != 19                                       (: COMMA :)
                        and $state[$p:lk] != 20                                       (: TILDE :)
                        and $state[$p:lk] != 26                                       (: '*' :)
                        and $state[$p:lk] != 50                                       (: '{' :)
                        and $state[$p:lk] != 51">                                   <!-- '|' -->
              <xsl:variable name="state" select="p:memoized($state, 1)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 14">                          <!-- HASH -->
                        <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/> <!-- HASH -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 30">                          <!-- '.' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-class($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 41">                          <!-- '[' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-attrib($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 33">                          <!-- ':' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-pseudo($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 21">                          <!-- NOT -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-negation($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 36">                          <!-- '@' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-atrule($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-mediaquery_selector($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10                                            (: IDENT :)
                     or $state[$p:l1] = 26                                            (: '*' :)
                     or $state[$p:l1] = 51">                                        <!-- '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 50">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 17                                    (: PLUS :)
                             or $state[$p:l1] = 18                                    (: GREATER :)
                             or $state[$p:l1] = 20">                                <!-- TILDE -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-combinator($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/> <!-- S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 19">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(19, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/> <!-- S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-selector($input, $state)
            "/>
            <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>     <!-- S^WS | IDENT | STRING | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 34">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2W(16, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 674                                        (: ';' IDENT :)
                      and $state[$p:lk] != 738">                                    <!-- ';' STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(34, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1W(15, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>       <!-- S^WS | IDENT | STRING | '/*' | '}' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(50, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>     <!-- END | S^WS | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 1">                                       <!-- END -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 37                                    (: '@charset' :)
                             or $state[$p:l1] = 38                                    (: '@import' :)
                             or $state[$p:l1] = 40">                                <!-- '@namespace' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-simple_atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 39">                                <!-- '@media' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-rule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 4">                                               <!-- S^WS -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:when test="$match[1] = 32">                                              <!-- '/*' -->
        <xsl:variable name="memo">
          <xsl:element name="memo"/>
        </xsl:variable>
        <xsl:variable name="state" select="p:try-Ignore($input, (0, $begin, $begin, $match, 0, 0, 0, 0, 0, 0, false(), $memo/node()))"/>
        <xsl:sequence select="p:matchW($input, $state[$p:e0], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:matchW($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:matchW($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   : Memoize the backtracking result that was computed at decision point
   : $dpi for input position $e0. Reconstruct state from the parameters.
   :
   : @param $state the lexer state to be restored.
   : @param $update the lexer state containing updates.
   : @param $dpi the decision point id.
   : @param $e0 the input position.
   : @param $v the id of the successful alternative.
   : @param $lk the new lookahead code.
   : @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 4 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 4 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>