<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Mon May 15, 2017 12:48 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> 
     see http://bottlecaps.de/rex/-->
<!-- REx command line: CSS3.ebnf -tree -main -xslt -ll 3 -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="14"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    59, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 21, 21, 22, 23, 24, 23, 21, 21, 25, 26, 27, 28, 29, 10, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 33, 34, 35, 36, 32, 27, 37, 31, 38, 39, 40, 41, 32, 42, 43, 32, 32, 44, 45, 46, 47, 48, 32, 49, 50, 51, 52, 32, 32, 53, 54, 32, 55, 56, 57,
    58, 27
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 126, 140, 156, 172, 188, 200, 231, 216, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
    195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
    195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 59, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 3, 4, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 23, 24, 23, 21, 21, 25, 26, 27,
    28, 29, 10, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 35, 36, 32, 48, 32, 49, 50, 51, 52, 32, 32,
    53, 54, 32, 55, 56, 57, 58, 27, 37, 31, 38, 39, 40, 41, 32, 42, 43, 32, 32, 44, 45, 46, 47
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 32, 32
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 1073, 50, 1075
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 3840, 4628, 3851, 3856, 3864, 3871, 3879, 4795, 3983, 3891, 4258, 3899, 6182, 6373,
    4877, 3937, 5765, 4404, 5098, 3945, 6372, 4615, 5244, 3957, 6030, 4324, 4569, 4686, 4406, 5209, 3962, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 3840, 4628,
    3851, 3856, 3864, 3871, 3981, 4241, 3983, 3891, 4258, 3991, 6182, 6373, 5666, 5945, 5765, 4404, 5679, 4273, 6372, 4439, 4003, 4021, 4032, 6605, 4569, 4295,
    4406, 5209, 6388, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 3840, 4628, 3851, 3856, 3864, 3871, 3981, 4241, 3983, 3891, 4258, 3991, 6182, 6373, 5282, 5945,
    5765, 4404, 5679, 5105, 6372, 4439, 4042, 4021, 6030, 6605, 4060, 4686, 4406, 5181, 3962, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 3840, 4628, 3851, 3856,
    3864, 3871, 3981, 4241, 3983, 3891, 6646, 4068, 6182, 6373, 4847, 4079, 5765, 5398, 4087, 4101, 4113, 6651, 4122, 4140, 4049, 5402, 4151, 5188, 5400, 4159,
    4177, 4185, 4193, 4208, 4200, 4216, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4404, 4166, 4114, 4227, 6374, 4725, 6373, 6373, 5315, 4236, 6373, 6375,
    6548, 5253, 6373, 6393, 5010, 4682, 6373, 4556, 4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4367, 6471, 6476, 6493, 6478,
    4597, 4166, 6373, 6373, 6374, 4788, 6373, 6373, 6149, 4253, 6373, 5255, 6333, 5253, 6373, 4465, 4266, 4291, 6373, 6168, 4285, 6373, 6166, 4303, 5254, 5616,
    4799, 5621, 4306, 5251, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6034, 4825, 4314, 4320, 4166, 6373, 6373, 6374, 4725, 6373, 6373, 5315, 4236, 6373, 6375, 6548, 5253,
    6373, 6393, 5010, 4682, 6373, 4556, 4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4024, 4332, 6373, 4404, 4166,
    6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580,
    6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4404, 4166, 6373, 5021, 6374, 4725, 5023, 6373, 5315, 4236, 6373, 6375, 6548, 5253, 6373, 6393,
    5010, 4682, 6373, 4556, 4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4404, 4166, 6373, 6373,
    6374, 4725, 6373, 6373, 5315, 4236, 6373, 6375, 6548, 5253, 6373, 6393, 5010, 4682, 6373, 4556, 4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 3973, 6527, 6532, 6521, 6534, 4450, 4166, 6373, 6373, 6374, 4840, 6373, 6373, 6192, 4341, 6373, 5601, 6424, 4682, 6373, 4093, 4393, 4360,
    6373, 5511, 4354, 3961, 5509, 4677, 4365, 4375, 4672, 4387, 4379, 4401, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6162, 6373, 6373, 4416, 5413, 4429, 4435, 4447, 6373, 6373, 4981, 4458,
    6373, 4980, 5534, 4491, 4496, 6375, 4509, 5253, 5166, 6498, 5010, 4682, 6373, 5426, 4895, 4333, 5424, 4583, 5229, 5644, 3949, 4516, 4586, 4010, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    5438, 5439, 5440, 4483, 4530, 4541, 4533, 4166, 6373, 6373, 6374, 4725, 6373, 6373, 5315, 4236, 6373, 6375, 6548, 5253, 6373, 6393, 5010, 4472, 6373, 4556,
    4895, 4129, 4554, 4583, 4551, 5644, 4564, 5140, 4577, 4594, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5690, 5584, 5691, 4071, 4605, 4623, 4611, 4732, 6373, 6373, 6374, 3913, 6373, 6373,
    5315, 4648, 6373, 6375, 6715, 5253, 6373, 6393, 5146, 4667, 6373, 4556, 4661, 6373, 4554, 4699, 6374, 6748, 4277, 6753, 4702, 4010, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 4757, 4710, 4718, 4166, 6373, 4752, 4761, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373,
    4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5395, 6373, 6373, 6373, 4773, 4769, 4781, 4166, 6373, 4807, 4811, 4725, 6373, 6373, 5315, 4236,
    6373, 6375, 6548, 5253, 6373, 6393, 5010, 4682, 6373, 4556, 4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6057, 3843, 6082, 6087,
    6102, 4819, 4833, 4862, 4640, 4744, 4873, 3899, 6373, 6000, 5666, 3937, 5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209,
    4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6669, 5059, 4916, 4922, 4166, 6373, 4346, 5600, 4725, 5598, 6373, 5315, 4236, 6373, 6375,
    6548, 4682, 6373, 6393, 5010, 4360, 6373, 4556, 4895, 3961, 4554, 4583, 4365, 5644, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4930, 4942, 4948, 4934,
    4966, 4479, 4954, 4482, 4958, 4725, 6373, 6373, 5315, 4236, 6373, 6375, 4989, 4682, 6373, 6393, 4997, 4360, 6373, 4556, 4895, 3961, 4554, 4583, 4365, 5644,
    4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5046, 5053, 4105, 5018, 4640, 5374, 5031, 5039, 5067, 5079, 5091, 5117, 5125, 4865, 5133, 5154,
    5162, 5174, 5196, 5217, 5225, 5237, 5263, 5271, 5575, 5290, 5311, 6798, 5323, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5046, 5053, 4105, 5018,
    4640, 5374, 5031, 5039, 5067, 6000, 5091, 5117, 5347, 4865, 5133, 5360, 6373, 5174, 5196, 5388, 6373, 5237, 5263, 5410, 5575, 5290, 5421, 6798, 5323, 5331,
    5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5046, 5053, 4105, 5018, 4640, 5374, 5031, 5039, 5067, 5434, 5091, 5117, 5448, 4865, 5133, 5464, 5454, 5174,
    5196, 5472, 5480, 5237, 5263, 5493, 5575, 5290, 5506, 6798, 5323, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5046, 5053, 4105, 5018, 4640, 5374,
    5031, 5039, 5067, 6000, 5091, 5117, 5347, 4865, 5133, 5360, 5522, 5174, 5196, 5388, 5522, 5237, 5263, 5519, 5575, 5290, 5530, 6798, 5542, 5331, 5339, 3970,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 5046, 5053, 4105, 5018, 4640, 5374, 5031, 5039, 5067, 5434, 5091, 5117, 5448, 4865, 5133, 5464, 5454, 5174, 5196, 5472,
    5454, 5237, 5263, 5493, 5575, 5290, 5506, 6798, 5323, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6733, 6373, 3925, 6733, 3929, 5550, 5556, 4166, 6373, 6373, 6374, 4725,
    6373, 6373, 5315, 4236, 6373, 6375, 6548, 5253, 6373, 6393, 5010, 4682, 6373, 4556, 4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    5708, 6373, 6373, 5564, 5570, 5729, 4404, 4166, 6373, 6373, 6374, 4725, 6373, 6373, 5315, 4236, 6373, 6375, 6548, 5253, 6373, 6393, 5010, 4682, 6373, 4556,
    4895, 6373, 4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4404, 4166, 6373, 6373, 6374, 3913, 6373, 6373,
    5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 5794, 5583, 6373, 4404, 4166, 5592, 6373, 6374, 4725, 6373, 6373, 5315, 4236, 6373, 6375, 6548, 5253, 6373, 6393, 5010, 4682, 6373, 4556, 4895, 6373,
    4554, 4583, 6374, 5644, 3949, 4516, 4586, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 5902, 5609, 4166, 6373, 6373, 5071, 3913, 6373, 6373, 5315, 6641,
    6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    5863, 5629, 5637, 4166, 6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117,
    6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5303, 5687, 4640, 5278, 5699, 5039, 5707, 6000, 5091, 5117, 5716, 4865,
    5133, 5360, 6373, 5174, 5196, 5388, 6373, 5237, 5263, 5410, 5575, 5290, 5421, 6798, 5323, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674,
    5380, 5726, 4640, 4737, 5737, 3899, 6373, 6000, 5666, 3937, 5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209, 4365, 6595,
    4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6783, 6456, 5745, 5751, 4166, 6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253,
    6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4638, 5768, 6223, 6228, 6233, 5759, 5776, 5791,
    3995, 4633, 5802, 4973, 6373, 6348, 6287, 5810, 6187, 5818, 6294, 5830, 6352, 6439, 6446, 5842, 5860, 5822, 5884, 5834, 5820, 6307, 5871, 5783, 5879, 6301,
    5892, 6453, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6012, 6373, 6011, 5900, 6373, 4404, 4166, 6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393,
    4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4143, 5910, 6373, 4404, 4166, 6373, 6373,
    6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 4742, 4132, 5920, 5925, 5930, 5674, 5303, 5687, 4640, 5278, 5699, 5039, 5707, 6000, 5938, 5117, 5716, 5953, 5133, 5360, 6373, 5174, 5196, 5388,
    6353, 5237, 5263, 5410, 5575, 5290, 5961, 6798, 5969, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5303, 5977, 4640, 5297, 5985, 5039,
    5993, 6008, 5091, 5117, 6020, 4865, 5133, 5360, 6373, 5174, 5196, 5388, 6373, 5237, 5263, 5410, 5575, 5290, 5421, 6798, 6042, 5331, 5339, 3970, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    4742, 4132, 5656, 5661, 5930, 5674, 5303, 5687, 4640, 5278, 5699, 6050, 5707, 6000, 5091, 5117, 5716, 4501, 5133, 5360, 6373, 5174, 5196, 5388, 6373, 5237,
    5263, 5410, 5575, 5290, 5421, 6798, 5323, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5303, 5687, 4640, 5297, 5699, 5039, 5993, 5718,
    5091, 6067, 6075, 4865, 5133, 6095, 6373, 6110, 5196, 5388, 6373, 5237, 5263, 5410, 6128, 5290, 5421, 6798, 5323, 6136, 5339, 3970, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132,
    5656, 5661, 5930, 5674, 5303, 5687, 4640, 5367, 5699, 5039, 6144, 6000, 5091, 5117, 6157, 4865, 5133, 5360, 3920, 5174, 5196, 5388, 6373, 5237, 5263, 5410,
    5575, 5290, 5421, 6798, 5323, 5331, 5339, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 5726, 4640, 4737, 5737, 3899, 6373, 6176, 5666, 3937,
    5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661,
    5930, 5674, 5380, 5726, 4640, 5485, 6200, 6208, 6259, 6000, 5666, 3937, 6247, 4404, 5098, 4885, 4228, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209,
    4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 5726, 4640, 4737, 5737, 6216, 6373, 6241, 5666, 3937, 5998, 4404,
    5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674,
    5380, 5726, 4640, 5352, 6272, 3899, 6253, 6280, 5666, 3937, 6315, 5109, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209, 4365, 6595,
    4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 6341, 4640, 4737, 6361, 3899, 4542, 6369, 5666, 3937, 5998, 4404, 5098, 4885,
    6373, 3883, 5010, 6383, 6373, 4408, 4569, 3961, 4406, 5209, 4365, 6595, 4890, 5203, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 6405, 6410, 5930, 5674, 5380, 5726,
    4640, 4737, 5737, 3899, 6373, 6418, 5666, 3937, 6025, 4404, 5098, 4885, 4034, 3883, 5010, 6432, 6032, 4408, 4569, 3961, 4406, 5209, 4365, 6595, 4890, 5004,
    5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 5726, 4640, 5498, 5737, 3899, 6321, 6000, 5666, 3937, 6327, 3906, 5098, 6464, 6373, 3883,
    5010, 4903, 6373, 4408, 4569, 3961, 4854, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 6486, 4640, 4653,
    6506, 6514, 4543, 6000, 5666, 3937, 5998, 4404, 5098, 4885, 4169, 3883, 5010, 4903, 5456, 4408, 4569, 6542, 4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 4742, 4132, 6556, 6561, 5930, 5674, 5380, 5726, 4640, 4737, 5737, 3899, 6373, 6000, 5666, 3937, 5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903,
    4013, 6569, 4569, 3961, 4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 5726, 4640, 4737, 5737, 3899,
    6373, 6008, 5666, 3937, 5998, 6588, 5098, 4885, 4690, 3883, 5010, 4903, 4691, 4408, 4569, 6694, 6603, 6619, 4908, 6595, 4890, 5004, 6613, 3970, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    4742, 4132, 5656, 5661, 6627, 6635, 5380, 5726, 4640, 4737, 5737, 3899, 6373, 6000, 5666, 3937, 5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408,
    4569, 3961, 4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132, 5656, 5661, 5930, 5674, 5380, 5726, 4640, 4737, 5737, 3899, 6373, 6008,
    5666, 3937, 5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961, 4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4742, 4132,
    5656, 5661, 5930, 5674, 5380, 5726, 4640, 4737, 5737, 3899, 6373, 6000, 5666, 6659, 5998, 4404, 5098, 4885, 6373, 3883, 5010, 4903, 6373, 4408, 4569, 3961,
    4406, 5209, 4365, 6595, 4890, 5004, 5648, 3970, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6667, 6373, 5852, 6373, 5849, 6677, 4166, 6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641,
    6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6731, 6728, 4052,
    6702, 6723, 6741, 4166, 6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117,
    6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6773, 6763, 6761, 6771, 6264, 4404, 4166, 6373, 6373, 6374, 3913, 6373, 6373, 5315, 6641, 6373, 6375,
    6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684, 4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 4219, 6781, 5912,
    6791, 4166, 6373, 6373, 5083, 3913, 6373, 6373, 5315, 6641, 6373, 6375, 6397, 5253, 6373, 6393, 4522, 6690, 6373, 4556, 6575, 6373, 4554, 6117, 6374, 6684,
    4245, 6580, 6120, 4010, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6821, 6373, 6373, 6373, 6709, 6373, 6373, 6820, 6373,
    6373, 6373, 6819, 3993, 6373, 6373, 6806, 6373, 6373, 6813, 6373, 4421, 6059, 6822, 6816, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373,
    6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 6373, 2561, 0, 3, 0, 0, 0, 0, 0, 52, 57, 52, 60, 2561,
    2561, 0, 2561, 60, 0, 2625, 0, 2561, 2561, 2561, 2632, 2561, 2633, 2634, 80, 2633, 2561, 60, 2634, 2625, 2561, 60, 2625, 84, 2645, 2645, 60, 2645, 2625, 0,
    0, 5685, 55, 56, 5690, 0, 147, 176, 2633, 2634, 0, 0, 0, 101, 0, 80, 56, 5690, 122, 0, 0, 0, 7751, 0, 0, 167, 0, 0, 5685, 55, 56, 0, 0, 0, 0, 0, 7751, 0, 0,
    195, 0, 0, 0, 0, 0, 15872, 0, 0, 0, 0, 15872, 15955, 15955, 0, 5690, 122, 123, 124, 122, 0, 0, 7751, 124, 0, 0, 7751, 0, 0, 0, 0, 147, 176, 148, 123, 124,
    0, 7751, 0, 0, 0, 190, 0, 0, 0, 0, 0, 55, 151, 190, 176, 0, 0, 0, 0, 0, 56, 0, 0, 60, 2645, 2625, 0, 0, 0, 0, 0, 0, 2632, 56, 5690, 122, 0, 0, 0, 0, 0, 0,
    0, 95, 0, 0, 176, 12462, 147, 123, 151, 12462, 151, 0, 176, 0, 0, 0, 0, 0, 225, 0, 0, 124, 0, 7751, 0, 0, 0, 0, 0, 66, 0, 0, 109, 0, 137, 0, 0, 0, 0, 0,
    199, 0, 0, 176, 12462, 0, 123, 151, 12462, 0, 0, 222, 0, 0, 0, 0, 0, 69, 23552, 0, 0, 148, 122, 123, 151, 122, 124, 7751, 118, 5752, 122, 0, 0, 0, 0, 0, 67,
    13824, 0, 5752, 122, 122, 122, 0, 0, 0, 7835, 5752, 0, 0, 122, 0, 180, 0, 0, 55, 6144, 0, 0, 147, 123, 184, 0, 0, 7835, 0, 0, 0, 0, 5685, 5719, 55, 56, 193,
    0, 0, 0, 0, 0, 0, 0, 96, 0, 209, 12462, 0, 211, 184, 12462, 0, 0, 1536, 0, 0, 0, 0, 0, 5685, 5690, 5685, 214, 0, 7835, 0, 0, 0, 0, 0, 68, 0, 0, 0, 234, 122,
    211, 184, 122, 214, 7835, 209, 122, 234, 211, 184, 214, 7835, 0, 0, 5690, 0, 0, 0, 0, 0, 198, 0, 0, 0, 241, 0, 0, 0, 0, 0, 116, 118, 180, 209, 234, 211,
    184, 214, 7835, 0, 241, 0, 0, 180, 209, 234, 211, 184, 214, 0, 241, 180, 209, 234, 184, 214, 0, 241, 0, 180, 209, 234, 184, 241, 209, 0, 0, 0, 0, 0, 70, 0,
    0, 96, 0, 0, 0, 0, 0, 0, 0, 200, 0, 122, 123, 124, 122, 0, 0, 0, 60, 0, 0, 0, 0, 147, 176, 176, 147, 0, 123, 123, 148, 122, 0, 0, 0, 84, 2645, 0, 5685, 55,
    124, 148, 122, 122, 123, 151, 151, 151, 0, 7751, 7751, 0, 0, 0, 0, 147, 176, 177, 149, 124, 148, 123, 123, 151, 148, 148, 0, 0, 0, 0, 0, 190, 0, 0, 137, 0,
    165, 124, 148, 148, 123, 151, 148, 0, 0, 122, 124, 148, 75, 71, 71, 71, 71, 75, 71, 71, 71, 0, 0, 5685, 55, 56, 5690, 147, 176, 12496, 66, 0, 0, 0, 0, 0, 0,
    0, 11264, 0, 124, 148, 124, 122, 0, 0, 0, 98, 0, 77, 0, 0, 123, 148, 148, 148, 122, 124, 124, 0, 0, 0, 0, 190, 190, 0, 0, 0, 0, 0, 55, 0, 0, 6144, 147, 123,
    148, 148, 122, 124, 0, 190, 147, 123, 148, 122, 124, 0, 190, 0, 147, 123, 148, 147, 147, 148, 151, 122, 122, 122, 190, 123, 0, 0, 0, 0, 0, 5685, 55, 56,
    5690, 147, 176, 176, 0, 12800, 0, 12800, 12800, 0, 0, 0, 122, 122, 0, 122, 0, 0, 12800, 12800, 12800, 12800, 0, 12800, 12800, 12800, 0, 0, 5685, 55, 56,
    5690, 12462, 147, 0, 0, 6656, 5690, 0, 0, 0, 0, 0, 5685, 55, 6144, 56, 6656, 122, 0, 0, 0, 7751, 0, 0, 6144, 56, 0, 0, 147, 124, 0, 0, 0, 0, 1536, 190, 0,
    0, 5690, 61, 0, 0, 0, 0, 0, 0, 0, 13312, 6656, 122, 123, 124, 122, 0, 0, 0, 159, 6815, 0, 0, 0, 168, 0, 5802, 171, 172, 6656, 0, 147, 148, 147, 123, 151,
    151, 124, 0, 0, 0, 147, 176, 148, 147, 147, 147, 151, 151, 151, 0, 13312, 0, 0, 13312, 0, 0, 0, 5685, 55, 56, 13312, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 1536,
    1536, 0, 0, 0, 0, 0, 55, 56, 0, 147, 176, 176, 0, 1536, 0, 0, 147, 176, 148, 123, 123, 151, 124, 124, 7751, 123, 151, 124, 0, 1536, 147, 176, 148, 148, 123,
    151, 124, 0, 0, 147, 176, 148, 151, 1536, 176, 0, 0, 0, 0, 0, 5685, 6144, 56, 67, 0, 0, 0, 0, 13824, 13824, 0, 13824, 0, 0, 5685, 55, 56, 5690, 12462, 147,
    176, 0, 13824, 13824, 13824, 13824, 0, 0, 0, 2561, 2561, 0, 0, 0, 54, 0, 0, 54, 0, 0, 0, 0, 0, 0, 7751, 0, 0, 146, 149, 152, 122, 0, 0, 0, 5685, 0, 0, 5738,
    0, 176, 177, 149, 149, 151, 152, 152, 0, 0, 0, 0, 0, 190, 0, 0, 147, 123, 148, 148, 148, 122, 124, 0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 176,
    177, 177, 149, 151, 152, 0, 0, 147, 176, 177, 9216, 0, 0, 0, 0, 9216, 9216, 9216, 0, 9216, 0, 0, 0, 5685, 55, 56, 0, 122, 0, 0, 0, 7751, 0, 0, 5690, 0, 91,
    0, 0, 0, 5685, 0, 0, 5685, 0, 0, 0, 0, 0, 0, 5685, 0, 0, 9216, 0, 0, 0, 0, 0, 9216, 9216, 0, 0, 0, 9216, 9216, 0, 0, 55, 10240, 0, 0, 0, 0, 10240, 10240,
    10240, 10240, 0, 0, 10240, 0, 10240, 0, 0, 0, 5685, 55, 56, 0, 123, 0, 0, 0, 7751, 0, 0, 5690, 60, 0, 0, 0, 0, 122, 124, 148, 123, 10240, 10240, 0, 0, 0, 0,
    0, 10240, 10240, 0, 0, 55, 14412, 52, 52, 52, 52, 14417, 0, 0, 75, 75, 0, 71, 71, 75, 52, 0, 52, 0, 5685, 5685, 55, 56, 0, 124, 0, 0, 0, 7751, 0, 0, 5746,
    0, 116, 0, 118, 0, 0, 247, 5685, 55, 56, 5690, 147, 0, 5690, 5690, 0, 0, 0, 0, 0, 5802, 171, 172, 0, 5690, 0, 0, 0, 0, 5685, 55, 55, 56, 56, 0, 124, 0,
    7751, 7751, 0, 0, 190, 0, 0, 147, 176, 148, 123, 123, 151, 124, 124, 0, 124, 0, 7751, 0, 0, 190, 190, 0, 0, 0, 17920, 0, 55, 77, 14848, 14848, 14848, 14848,
    77, 14848, 14848, 14848, 0, 0, 5685, 55, 56, 61, 0, 0, 0, 0, 61, 0, 61, 61, 61, 61, 61, 61, 0, 61, 0, 0, 0, 0, 15421, 0, 0, 15421, 0, 61, 0, 0, 0, 0, 0, 0,
    61, 61, 0, 0, 55, 61, 61, 61, 0, 0, 5685, 55, 56, 59, 125, 0, 0, 0, 7751, 0, 0, 6656, 0, 0, 0, 0, 0, 55, 0, 12462, 147, 148, 12467, 123, 151, 12471, 12496,
    148, 147, 147, 123, 151, 151, 151, 124, 0, 190, 0, 147, 176, 148, 147, 147, 123, 151, 151, 151, 0, 5690, 5722, 0, 0, 0, 0, 0, 8704, 0, 0, 0, 0, 7267, 5690,
    0, 0, 0, 0, 5747, 117, 119, 5753, 122, 0, 0, 0, 7808, 0, 0, 7246, 7246, 0, 0, 0, 7246, 0, 0, 0, 0, 7246, 0, 0, 77, 77, 0, 14848, 14848, 77, 8322, 7299,
    7267, 7268, 0, 0, 0, 0, 9728, 0, 0, 55, 0, 5685, 5690, 134, 0, 0, 0, 0, 10752, 0, 0, 55, 0, 5685, 5774, 55, 143, 56, 144, 5690, 0, 147, 148, 147, 123, 151,
    151, 0, 0, 7751, 0, 0, 0, 0, 169, 5685, 55, 56, 5777, 122, 123, 124, 122, 0, 0, 7836, 0, 8350, 7299, 5685, 5690, 160, 0, 162, 5805, 0, 147, 148, 147, 181,
    151, 151, 124, 0, 1536, 0, 147, 176, 148, 147, 147, 149, 151, 151, 151, 185, 0, 7751, 7867, 0, 8381, 190, 192, 0, 194, 0, 196, 0, 0, 0, 0, 11264, 0, 0, 0,
    0, 5834, 203, 204, 5837, 0, 206, 176, 122, 148, 123, 151, 124, 7751, 0, 0, 241, 0, 0, 0, 0, 245, 176, 210, 147, 147, 212, 213, 151, 151, 124, 276, 190, 0,
    147, 176, 148, 148, 123, 151, 124, 7751, 0, 215, 0, 7896, 0, 8410, 190, 219, 220, 0, 221, 0, 223, 0, 0, 0, 0, 11264, 0, 0, 55, 0, 5860, 229, 230, 5863, 232,
    233, 176, 148, 12467, 147, 123, 151, 12471, 151, 0, 124, 0, 0, 0, 0, 0, 0, 0, 6144, 56, 176, 235, 123, 236, 237, 124, 238, 7919, 0, 8192, 242, 0, 243, 0,
    244, 0, 0, 8289, 5685, 0, 0, 5685, 0, 55, 0, 56, 0, 251, 148, 252, 253, 254, 255, 7936, 0, 0, 8289, 5685, 0, 102, 5685, 0, 5685, 5685, 5685, 5719, 55, 56,
    190, 258, 0, 259, 0, 0, 0, 55, 55, 56, 56, 0, 0, 268, 0, 0, 270, 271, 272, 273, 274, 275, 0, 277, 0, 278, 279, 280, 123, 281, 124, 0, 282, 147, 283, 148, 0,
    8350, 7299, 5685, 5690, 0, 0, 0, 5685, 0, 102, 5685, 0, 185, 0, 7751, 7867, 0, 8381, 190, 0, 0, 8289, 5685, 0, 103, 5685, 0, 0, 8289, 7267, 7268, 7246,
    5685, 0, 5685, 5685, 5685, 5685, 55, 56, 215, 0, 7896, 0, 8410, 190, 219, 0, 0, 10240, 0, 0, 0, 0, 0, 5746, 116, 118, 5752, 180, 209, 12462, 0, 8192, 242,
    0, 0, 0, 0, 0, 12800, 12800, 0, 190, 258, 0, 0, 0, 0, 0, 55, 56, 6656, 147, 176, 176, 0, 5685, 5690, 135, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 0, 8350, 7299,
    5685, 5690, 135, 0, 163, 0, 0, 0, 0, 0, 0, 226, 0, 185, 0, 7751, 7867, 0, 8381, 190, 135, 215, 0, 7896, 0, 8410, 190, 219, 135, 0, 163, 0, 0, 224, 0, 0, 0,
    5685, 0, 104, 5685, 0, 0, 8192, 242, 135, 163, 0, 0, 0, 5685, 0, 105, 5685, 0, 190, 258, 163, 0, 0, 0, 0, 55, 6144, 0, 147, 176, 123, 0, 8192, 242, 0, 0, 0,
    197, 0, 0, 0, 0, 190, 258, 0, 197, 0, 0, 0, 55, 55, 56, 56, 6656, 0, 268, 197, 0, 270, 271, 272, 273, 0, 15955, 15955, 15955, 15955, 0, 15955, 15955, 15955,
    0, 0, 5685, 55, 56, 16384, 0, 16384, 0, 0, 0, 0, 16384, 0, 0, 16384, 0, 0, 0, 5685, 248, 249, 5690, 250, 16896, 0, 0, 0, 0, 0, 0, 0, 13824, 0, 4608, 5120,
    4096, 3584, 3072, 0, 0, 98, 0, 0, 0, 0, 0, 0, 55, 6144, 0, 9728, 0, 0, 0, 5685, 55, 56, 122, 124, 148, 123, 151, 148, 0, 0, 0, 122, 124, 148, 0, 17408,
    17408, 17408, 17408, 0, 17408, 17408, 17494, 17408, 17494, 0, 0, 5685, 55, 56, 147, 176, 148, 123, 151, 124, 0, 190, 147, 176, 148, 0, 5685, 0, 5690, 5685,
    5685, 0, 5685, 0, 0, 0, 5685, 5685, 55, 55, 56, 56, 5690, 5685, 5685, 5685, 5685, 5685, 5690, 0, 0, 122, 0, 147, 0, 0, 5690, 5690, 5722, 0, 0, 0, 0, 0,
    13824, 0, 0, 0, 5690, 5690, 0, 0, 0, 0, 5747, 117, 8322, 0, 0, 0, 0, 0, 0, 0, 16384, 0, 8350, 0, 5685, 5690, 0, 0, 0, 0, 140, 5690, 5690, 5690, 0, 0, 0, 0,
    0, 16384, 0, 0, 5690, 5690, 0, 0, 0, 0, 5685, 55, 0, 19968, 19968, 19968, 19968, 0, 19968, 19968, 19968, 0, 0, 5685, 55, 56, 54, 54, 54, 54, 54, 59, 0, 0,
    101, 0, 0, 0, 0, 0, 54, 59, 54, 54, 0, 54, 54, 54, 5685, 88, 89, 175, 207, 178, 150, 182, 153, 95, 59, 59, 5690, 0, 0, 0, 0, 0, 16896, 0, 0, 59, 59, 108, 0,
    0, 0, 54, 55, 59, 125, 150, 153, 122, 0, 0, 95, 164, 0, 0, 0, 0, 54, 88, 89, 59, 175, 176, 207, 124, 0, 95, 95, 0, 0, 191, 0, 0, 164, 0, 0, 153, 0, 95, 0,
    0, 191, 190, 0, 0, 23040, 0, 0, 0, 23040, 23040, 0, 0, 0, 136, 0, 164, 0, 0, 0, 0, 0, 17408, 17408, 0, 191, 191, 0, 0, 0, 0, 0, 88, 0, 191, 0, 0, 175, 207,
    178, 150, 150, 182, 153, 153, 95, 150, 182, 153, 0, 191, 175, 207, 178, 20480, 0, 0, 0, 0, 0, 0, 0, 9728, 9728, 68, 0, 0, 0, 0, 0, 0, 0, 10752, 10752, 0,
    5685, 0, 5690, 5685, 5685, 62, 5685, 62, 62, 0, 5685, 5685, 5690, 5685, 5685, 5685, 5690, 141, 5685, 5774, 55, 143, 56, 144, 5690, 122, 122, 122, 0, 0, 0,
    7751, 0, 166, 0, 0, 0, 5802, 171, 172, 190, 258, 0, 0, 0, 0, 260, 55, 267, 268, 0, 0, 270, 271, 272, 273, 5690, 5690, 5722, 0, 0, 0, 0, 94, 5690, 5690, 0,
    0, 0, 110, 5747, 117, 8322, 0, 102, 102, 102, 0, 0, 0, 5685, 5690, 0, 0, 0, 0, 0, 11776, 5685, 5690, 0, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 8350, 102, 5685,
    5690, 0, 0, 0, 5685, 5690, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 268, 0, 269, 270, 271, 272, 273, 119, 5753, 122, 20992, 0, 0, 7808, 0, 52, 0, 0, 0, 0,
    0, 0, 122, 122, 5777, 122, 123, 124, 122, 0, 154, 7836, 0, 8350, 102, 5685, 5690, 0, 161, 0, 52, 0, 57, 52, 52, 0, 52, 0, 0, 0, 52, 52, 185, 186, 7751,
    7867, 0, 8381, 190, 0, 52, 14412, 14417, 52, 52, 52, 14417, 201, 5834, 203, 204, 5837, 0, 206, 176, 176, 176, 147, 151, 151, 0, 0, 147, 176, 176, 246, 0, 0,
    5685, 248, 249, 5690, 250, 274, 275, 0, 277, 19456, 278, 279, 280, 8322, 0, 103, 103, 103, 0, 0, 0, 6144, 6144, 56, 56, 0, 0, 8350, 103, 5685, 5690, 0, 0,
    0, 12800, 0, 0, 0, 0, 6144, 56, 0, 122, 176, 124, 0, 5685, 5690, 0, 0, 138, 0, 0, 101, 101, 101, 0, 0, 0, 54, 59, 0, 0, 0, 55, 55, 6144, 6144, 0, 5690,
    5690, 0, 0, 0, 111, 5685, 55, 56, 5690, 122, 0, 0, 0, 7751, 129, 56, 5690, 122, 0, 126, 0, 7751, 0, 54, 0, 59, 54, 54, 0, 54, 0, 0, 0, 54, 54, 59, 54, 54,
    54, 59, 0, 5764, 5765, 0, 0, 0, 0, 0, 104, 5685, 5690, 0, 0, 0, 102, 102, 102, 11776, 0, 0, 104, 104, 104, 0, 0, 0, 24064, 24064, 24064, 0, 0, 5690, 5690,
    0, 0, 0, 112, 5685, 55, 0, 5685, 5690, 0, 0, 0, 139, 0, 54, 54, 88, 88, 89, 89, 59, 0, 175, 178, 175, 123, 182, 182, 153, 0, 191, 0, 175, 207, 178, 178,
    150, 182, 153, 95, 0, 157, 0, 102, 5685, 5690, 0, 0, 0, 105, 105, 105, 0, 0, 0, 105, 5685, 5690, 0, 0, 0, 122, 148, 122, 123, 151, 151, 5690, 5690, 5690, 0,
    0, 92, 93, 0, 54, 59, 0, 136, 0, 0, 0, 0, 0, 0, 0, 18944, 5690, 5690, 109, 0, 0, 113, 5685, 55, 0, 5685, 5690, 109, 0, 0, 0, 0, 0, 0, 0, 0, 55, 56, 124,
    22528, 7751, 0, 0, 190, 190, 0, 0, 165, 0, 0, 55, 56, 0, 0, 147, 176, 147, 123, 151, 151, 0, 5685, 0, 5690, 5685, 5685, 63, 5685, 63, 63, 0, 5685, 5685, 0,
    5685, 5690, 0, 137, 0, 0, 0, 147, 148, 147, 123, 122, 122, 124, 0, 7751, 217, 0, 190, 190, 0, 54, 88, 89, 59, 0, 147, 207, 148, 175, 175, 150, 151, 182,
    182, 191, 207, 0, 0, 0, 0, 0, 19968, 19968, 0, 124, 0, 7751, 7751, 188, 0, 190, 0, 55, 0, 0, 0, 55, 0, 55, 0, 0, 0, 0, 55, 0, 0, 5690, 5690, 5690, 0, 0, 0,
    22016, 0, 55, 55, 55, 55, 0, 0, 55, 56, 6656, 0, 147, 176, 5690, 5739, 0, 0, 0, 0, 5685, 55, 56, 5690, 122, 0, 0, 127, 7751, 0, 56, 56, 56, 56, 0, 0, 56, 0,
    0, 0, 56, 0, 56, 0, 0, 0, 0, 56, 0, 0, 240, 0, 190, 0, 0, 0, 0, 0, 147, 148, 147, 123, 151, 151, 0, 5685, 0, 5690, 5685, 5685, 64, 5685, 64, 64, 0, 5685,
    5685, 227, 5685, 55, 56, 5690, 147, 176, 176, 147, 147, 151, 151, 151, 0, 0, 0, 147, 176, 176, 165, 0, 0, 0, 0, 5685, 55, 56, 147, 176, 148, 123, 151, 124,
    7751, 0, 18432, 0, 5685, 55, 56, 5690, 147, 176, 12462, 123, 151, 124, 2048, 190, 147, 176, 148, 148, 123, 151, 124, 7751, 257, 0, 5685, 5711, 5714, 5685,
    5685, 5685, 5714, 5711, 5685, 5685, 5685, 5685, 5714, 0, 0, 147, 151, 122, 0, 0, 0, 84, 2645, 0, 5746, 116, 118, 5752, 12462, 180, 0, 5690, 122, 123, 124,
    122, 21504, 0, 7751, 23040, 0, 0, 0, 0, 0, 0, 0, 14848, 0, 0, 23040, 0, 0, 0, 5685, 55, 56, 147, 176, 176, 147, 151, 151, 0, 0, 0, 0, 0, 190, 0, 0, 165, 0,
    0, 23621, 0, 0, 0, 0, 23552, 23552, 0, 122, 122, 122, 0, 0, 0, 0, 147, 177, 147, 123, 151, 151, 0, 23552, 23552, 23552, 23552, 0, 0, 23552, 0, 23552, 0, 0,
    0, 0, 0, 0, 15872, 0, 23552, 23552, 23552, 0, 0, 5685, 55, 56, 147, 176, 177, 149, 151, 152, 0, 0, 0, 147, 176, 177, 24064, 0, 24064, 0, 0, 0, 0, 24064, 0,
    24064, 0, 24064, 0, 0, 24064, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 19968, 0, 0, 10752, 0, 0, 0, 5685, 55, 56, 261, 262, 263, 264, 265, 266, 7751, 0, 122,
    122, 122, 0, 122, 122, 0, 122, 122, 122, 0, 122, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 122
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    142, 146, 252, 150, 154, 158, 162, 166, 170, 174, 178, 185, 181, 332, 189, 304, 197, 201, 205, 221, 209, 213, 264, 284, 218, 225, 228, 296, 331, 262, 191,
    283, 235, 230, 296, 214, 191, 274, 239, 256, 231, 296, 214, 191, 274, 274, 291, 268, 231, 296, 214, 191, 274, 275, 256, 231, 337, 263, 274, 276, 269, 259,
    273, 275, 294, 274, 193, 280, 192, 288, 302, 305, 347, 363, 320, 360, 245, 310, 314, 242, 318, 324, 248, 250, 305, 305, 328, 305, 305, 305, 305, 305, 336,
    353, 346, 305, 305, 305, 341, 305, 305, 305, 345, 305, 305, 341, 305, 305, 305, 346, 305, 305, 341, 305, 305, 305, 305, 346, 305, 305, 341, 305, 305, 305,
    305, 305, 306, 351, 305, 305, 305, 305, 357, 305, 305, 298, 305, 297, 305, 305, 305, 305, 16, 1024, 524288, 16777216, 33554432, 67108864, 1073741824,
    -2147483648, 16, 3072, 5120, 67109888, 8388608, 3088, 33554448, 1073746944, 67109904, 8391680, 0, 8391696, -2139091968, 16777216, -2139091952, 16777216,
    16777232, 1008, 1409303568, -1568666600, 1008, -1568142312, 139176980, 139181060, -494400488, 1428177936, 1436566528, 139181076, 172731412, 1436566544,
    1428177936, 1436566528, 1404977168, 1436566544, 1024, 1436566544, -1999913980, 1371422736, 1371422736, 5120, 5120, 5120, 8388608, 8388608, 8388608, 8, 4,
    8388624, 256, 512, 128, 64, 32, 16384, 8388632, 8912920, 655376, 32768, 4203520, 4207616, 5124, 2097152, 9043968, 10354704, 0, 1024, 2048, 2048, 32768,
    4202496, 4202496, 4268032, 4268032, 1028, 655360, 4194304, 4194304, 4194304, 4194304, 1028, 5124, 2097152, 2097152, 2097152, 2097152, 8, 32768, 4202496,
    1028, 8388608, 0, 16384, 16384, 0, 0, 16384, 3840, 16384, 16384, 4162, 12354, 8318, 0, 0, 0, 33554448, 8, 32768, 4, 2097152, 0, 0, 2048, 2048, 2048, 5120,
    8388608, 0, 32768, 4, 4, 2097152, 2097152, 2048, 8388608, 8388608, 8388608, 8388608, 16384, 8, 0, 8388608, 8388608, 8388608, 0, 0, 16384, 8, 4, 8388608,
    8388608, 8388608, 0, 16384, 8, 4, 2097152, 0, 0, 0, 32, 0, 8388608, 4, 8388608, 0, 0, 0, 0, 4, 3840, 16384, 7936, 7936, 129, 8256, 16384, 8321, 8258, 8258,
    0, 0, 0, 16384, 8258, 12354, 24642, 24642, 256, 1536, 2048, 0, 1024, 1024, 2048, 2048, 60, 0, 0, 0, 1024, 4, 8, 16, 32, 512, 2048, 0, 0, 0, 4096, 8, 32, 0,
    0, 256, 512, 4, 32, 0, 0, 8192, 0, 8192, 16384, 0, 128
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    'important',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'STRING',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'COMMENT',
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'and'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 283 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>          <!-- 'and' | 'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(42, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | '(' | 'and' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/> <!-- '(' | 'and' | 'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 44                                          (: '{' :)
                       or $state[$p:lk] = 2820">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 4">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(25, $input, $state)"/> <!-- '(' | 'and' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 24                                    (: '(' :)
                             or $state[$p:lk] = 1540">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(4, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 23">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 23">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 4">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(43, $input, $state)"/>  <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 46                                            (: '}' :)
                     or $state[$p:lk] = 2948">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>          <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- ';' -->
    <xsl:variable name="state" select="p:consume(31, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>          <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(27, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>          <!-- important | S | IDENT | STRING | COMMA | COMMENT | ')' | '/' | ';' |
                                                                                         '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- important | S | IDENT | STRING | COMMENT | ')' | '/' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/> <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | COMMENT | '-' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 10                                          (: IDENT :)
                       or $state[$p:lk] = 11                                          (: STRING :)
                       or $state[$p:lk] = 23                                          (: COMMENT :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 31                                          (: ';' :)
                       or $state[$p:lk] = 46                                          (: '}' :)
                       or $state[$p:lk] = 1476                                        (: S COMMENT :)
                       or $state[$p:lk] = 1988                                        (: S ';' :)
                       or $state[$p:lk] = 2948">                                    <!-- S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- IDENT | STRING -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>      <!-- URL | S | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2(36, $input, $state)"/> <!-- important | S | IDENT | STRING | COMMA | COMMENT | ')' | '/' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 1930                                       (: IDENT ':' :)
                      and $state[$p:lk] != 1931">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>   <!-- ':' -->
            <xsl:variable name="state" select="p:consume(30, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>           <!-- ':' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 45">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(15, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(18, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (2890,                                  (: IDENT '|' :)
                                               2906)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(15, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 266                                           (: IDENT S :)
                     or $state[$p:lk] = 685                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1610                                          (: IDENT ')' :)
                     or $state[$p:lk] = 43850                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 43866">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 28">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 38">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 30">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | ')' | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 2">                                       <!-- URL -->
            <xsl:variable name="state" select="p:consume(2, $input, $state)"/>      <!-- URL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 15">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(15, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 27">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(27, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 22">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(22, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 13">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(13, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 11">                                      <!-- STRING -->
            <xsl:variable name="state" select="p:consume(11, $input, $state)"/>     <!-- STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 10">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(10, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(19, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(32, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 45                                            (: '|' :)
                     or $state[$p:lk] = 2890">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 39">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 32">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(32, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 26">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(49, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | ')' |
                                                                                         '.' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 10                                            (: IDENT :)
                     or $state[$p:lk] = 45                                            (: '|' :)
                     or $state[$p:lk] = 2906">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- '*' -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 45">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(49, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | ')' |
                                                                                         '.' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 45                                            (: '|' :)
                     or $state[$p:lk] = 2890">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | '.' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 14                                         (: HASH :)
                      and $state[$p:l1] != 21                                         (: NOT :)
                      and $state[$p:l1] != 24                                         (: '(' :)
                      and $state[$p:l1] != 28                                         (: '.' :)
                      and $state[$p:l1] != 30                                         (: ':' :)
                      and $state[$p:l1] != 33                                         (: '@' :)
                      and $state[$p:l1] != 38">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 28">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 38">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 30">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(14, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 28">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 38">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 30">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 21">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | '.' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 14                                         (: HASH :)
                      and $state[$p:l1] != 21                                         (: NOT :)
                      and $state[$p:l1] != 24                                         (: '(' :)
                      and $state[$p:l1] != 28                                         (: '.' :)
                      and $state[$p:l1] != 30                                         (: ':' :)
                      and $state[$p:l1] != 33                                         (: '@' :)
                      and $state[$p:l1] != 38">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10                                            (: IDENT :)
                     or $state[$p:l1] = 26                                            (: '*' :)
                     or $state[$p:l1] = 45">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 45">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(15, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (10,                                    (: IDENT :)
                                               26)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' |
                                                                                            '.' | ':' | '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (2890,                            (: IDENT '|' :)
                                                     2906)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(15, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 266                                     (: IDENT S :)
                           or $state[$p:lk] = 685                                     (: '|' IDENT :)
                           or $state[$p:lk] = 906                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1098                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1162                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1226                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1290                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1354                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1482                                    (: IDENT COMMENT :)
                           or $state[$p:lk] = 1546                                    (: IDENT '(' :)
                           or $state[$p:lk] = 1802                                    (: IDENT '.' :)
                           or $state[$p:lk] = 1930                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2122                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2442                                    (: IDENT '[' :)
                           or $state[$p:lk] = 2826                                    (: IDENT '{' :)
                           or $state[$p:lk] = 43850                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 43866">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 19                                          (: COMMA :)
                       or $state[$p:lk] = 23                                          (: COMMENT :)
                       or $state[$p:lk] = 44                                          (: '{' :)
                       or $state[$p:lk] = 2820">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 19                                           (: COMMA :)
                    and $state[$p:l1] != 23">                                       <!-- COMMENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 23">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>      <!-- S | IDENT | STRING | COMMENT | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(24, $input, $state)"/> <!-- IDENT | STRING | COMMENT | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 31">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- S | IDENT | STRING | COMMENT | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 287">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- IDENT | STRING | COMMENT | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 671                                        (: ';' IDENT :)
                      and $state[$p:lk] != 735                                        (: ';' STRING :)
                      and $state[$p:lk] != 1988                                       (: S ';' :)
                      and $state[$p:lk] != 41247                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 45343">                                  <!-- ';' S STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>   <!-- ';' -->
            <xsl:variable name="state" select="p:consume(31, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>  <!-- S | IDENT | STRING -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>        <!-- IDENT | STRING | COMMENT | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 23">                                     <!-- COMMENT -->
            <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/>  <!-- IDENT | STRING | COMMENT | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 46                                            (: '}' :)
                     or $state[$p:lk] = 1495                                          (: COMMENT COMMENT :)
                     or $state[$p:lk] = 2967">                                      <!-- COMMENT '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 23">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 31">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(31, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>    <!-- S | IDENT | STRING | COMMENT | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- COMMENT | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 23">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>          <!-- S | IDENT | STRING | COMMENT | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>        <!-- END | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34                                      (: '@charset' :)
                           or $state[$p:l1] = 35                                      (: '@import' :)
                           or $state[$p:l1] = 37">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 23">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
          <xsl:sequence select="p:parse-css-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>