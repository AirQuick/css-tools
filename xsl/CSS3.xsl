<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Fri May 5, 2017 10:27 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> 
     see http://bottlecaps.de/rex/ -->
<!-- REx command line: CSS3.ebnf -tree -main -xslt -ll 3 -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="14"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 22, 20, 20, 24, 25, 9, 26, 27, 9, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 31, 32, 33, 34, 30, 9, 35, 29, 36, 37, 38, 39, 30, 40, 41, 30, 30, 42, 43, 44, 45, 46, 30, 47, 48, 49, 50, 30, 30, 51, 52, 30, 53, 54, 55,
    56, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 196, 208, 180, 224, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 57, 1, 0, 2, 3, 0, 0, 57, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 22, 20, 20, 24, 25, 9, 26, 27, 9, 35, 29, 36,
    37, 38, 39, 30, 40, 41, 30, 30, 42, 43, 44, 45, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 32, 33, 34,
    30, 46, 30, 47, 48, 49, 50, 30, 30, 51, 52, 30, 53, 54, 55, 56, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 30, 30
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 49, 562, 51, 564
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    1917, 1917, 1917, 1917, 1917, 1917, 1916, 3677, 1856, 1878, 1886, 1906, 1913, 1917, 1926, 3544, 1938, 1953, 2030, 2469, 1949, 3541, 3307, 3378, 1917, 2508,
    3383, 3307, 1962, 1970, 1981, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 1916, 3677, 1856, 1878, 1886, 1906, 1913, 1917, 1926, 3544, 1938, 1953, 2030, 3296,
    3742, 3541, 3307, 3768, 1917, 2508, 2487, 3307, 1994, 1970, 2641, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 1916, 3677, 1856, 1878, 1886, 1906, 1913, 1917,
    1926, 3544, 2002, 1953, 2030, 3821, 2013, 2025, 3916, 2038, 1917, 2005, 2046, 3916, 2059, 2072, 2067, 2080, 2086, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    1917, 1917, 1917, 1917, 2520, 3765, 2100, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917,
    1917, 1917, 1917, 1917, 1917, 2155, 2785, 2791, 2430, 2263, 3101, 3765, 1917, 1917, 2897, 1930, 1917, 3118, 2233, 1917, 3020, 1917, 1917, 2114, 1917, 2110,
    1917, 3021, 1917, 2116, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 3866, 2129, 2133, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917,
    2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2141, 1917, 2520, 3765, 1917, 1917,
    2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    1917, 1917, 2520, 3765, 1917, 3516, 2897, 1930, 3517, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917,
    1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2520, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897,
    1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2345, 3708, 3714, 2229, 2152, 2520, 2163, 1917, 1917, 2897, 1930, 1917, 2428, 2175, 1917, 2580, 1917,
    3453, 2217, 1917, 2188, 1917, 2214, 2805, 2194, 2533, 1917, 1917, 1917, 1917, 1917, 2664, 1917, 1917, 2736, 3966, 2701, 2705, 2225, 1917, 1917, 2241, 1930,
    1917, 2257, 2274, 1917, 2287, 2248, 2305, 2670, 1917, 2200, 2301, 2667, 2304, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 3188, 3189, 3190, 3649, 1917, 3190,
    2778, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2313, 1917, 2327, 2994, 1898, 2342, 1917, 1917, 1917, 1917, 1917,
    3267, 2793, 2794, 1917, 2353, 3092, 2361, 3961, 1917, 1917, 2897, 1930, 1917, 2428, 2369, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332,
    1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2385, 2382, 2396, 3765, 1917, 3584, 2388, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330,
    1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2537, 2407, 2404, 2418, 3765, 2426, 2536, 2410, 3746, 1917, 2428,
    2438, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 2894, 2266, 2457, 2894, 2967, 2451, 2932, 2465,
    1928, 3282, 3037, 3746, 2519, 3529, 2477, 2517, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    1917, 1917, 2545, 2553, 2557, 3765, 1917, 3445, 2897, 1930, 3450, 2428, 2233, 1917, 2896, 1917, 3453, 2330, 1917, 1986, 1917, 2565, 2805, 2570, 2533, 1917,
    1917, 1917, 1917, 1917, 1917, 1917, 2492, 3851, 1954, 2051, 2496, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 2578, 3453, 2330, 1917, 1986,
    1917, 2565, 2805, 2570, 2533, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2603, 2588, 3727, 2599, 1928, 2611, 2763, 2374, 2619, 1870, 2632, 2649,
    3407, 2657, 2678, 2696, 2713, 2721, 2729, 2756, 2771, 2293, 2802, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2603, 2588, 3727, 2599, 1928, 2611,
    2763, 2279, 2619, 1870, 2632, 2813, 3407, 2821, 3071, 2696, 2835, 2721, 2843, 2756, 2854, 2293, 2802, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    2603, 2588, 3727, 2599, 1928, 2611, 2763, 2443, 2619, 1870, 2632, 2872, 3407, 2880, 2917, 2696, 2905, 2721, 2913, 2756, 2925, 2293, 2802, 1917, 1917, 1917,
    1917, 1917, 1917, 1917, 1917, 1917, 2603, 2588, 3727, 2599, 1928, 2611, 2763, 2279, 2619, 1870, 2632, 2813, 3407, 2821, 2952, 2696, 2940, 2721, 2948, 2756,
    2960, 2319, 2802, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2603, 2588, 3727, 2599, 1928, 2611, 2763, 2443, 2619, 1870, 2632, 2872, 3407, 2880,
    2917, 2696, 2975, 2721, 2913, 2756, 2925, 2293, 2802, 1917, 1917, 1917, 1917, 1917, 2120, 1917, 2121, 2118, 2983, 2684, 2688, 3765, 1917, 1917, 2897, 3746,
    1917, 2428, 2438, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 2089, 1917, 2861, 2092, 1917, 1917,
    2520, 3765, 1917, 1917, 2897, 3746, 1917, 2428, 2438, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917,
    1917, 1917, 1917, 1917, 2991, 1917, 2520, 3765, 3946, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332,
    1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2102, 3002, 3765, 1917, 1917, 1893, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330,
    1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 2827, 3212, 3010, 3765, 1917, 1917, 2897, 1930, 1917, 2428,
    2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3059, 3067,
    1928, 3079, 2763, 2279, 3100, 1870, 2632, 3109, 3407, 2821, 3071, 2696, 2835, 2721, 2843, 2756, 2854, 2293, 2802, 1917, 1917, 1917, 1917, 1917, 3018, 3476,
    3051, 3018, 3029, 3045, 3126, 3512, 1928, 3285, 3037, 3746, 2519, 3529, 2477, 2517, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917,
    1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 3134, 3226, 3230, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200,
    1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 3116, 2144, 3148, 3116, 3614, 3142, 3322, 3245, 2249, 3156, 3171, 3198, 1918, 3163, 3206, 3220,
    3621, 3178, 2864, 3636, 3183, 3238, 3257, 3633, 3275, 3627, 3279, 1917, 1917, 1917, 1917, 1917, 1917, 3263, 1917, 1917, 3293, 1917, 2520, 3765, 1917, 1917,
    2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    3304, 1917, 2520, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917,
    1917, 1917, 3018, 3476, 3051, 3315, 3029, 3045, 3059, 3067, 1928, 3079, 2763, 2279, 3100, 1870, 2632, 3109, 3330, 2821, 3071, 2696, 2835, 3338, 2843, 2756,
    2854, 3663, 2802, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3059, 3346, 1928, 3079, 3599, 2279, 3100, 1870, 2632, 3109, 3407, 2821,
    3071, 2696, 2835, 2721, 2843, 2756, 2854, 2293, 2802, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3059, 3067, 1928, 3079, 2763, 3354,
    3100, 1870, 2632, 3109, 3836, 2821, 3071, 2696, 2835, 2721, 2843, 2756, 2854, 2293, 2802, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045,
    3059, 3067, 1928, 3371, 2763, 2279, 3400, 3415, 3423, 3431, 3407, 3439, 3071, 2696, 2835, 2721, 2843, 3461, 2854, 2293, 2802, 1917, 1917, 1917, 1917, 1917,
    3018, 3476, 3051, 3018, 3029, 3045, 3059, 3067, 1928, 3079, 2763, 2279, 3100, 1870, 2632, 3109, 3407, 2821, 3484, 2696, 2835, 2721, 2843, 2756, 2854, 2293,
    2802, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3126, 3512, 1928, 3285, 3037, 3746, 2519, 3498, 2477, 2517, 3036, 3086, 3453, 1941,
    2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3126, 3512, 1928, 3285, 3506, 2482, 2519, 3529,
    2477, 2517, 3036, 3086, 3453, 3525, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3126, 3512,
    1928, 3285, 3037, 3537, 3881, 3552, 2477, 2517, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476,
    3051, 3018, 3029, 3045, 3126, 3512, 1928, 3285, 3560, 3746, 3249, 3574, 2477, 3582, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917,
    1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3126, 3802, 1928, 3592, 3037, 2180, 2519, 3529, 2477, 2517, 3036, 3086, 3453, 3693, 2518, 2504,
    2516, 1970, 2529, 2206, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3607, 3029, 3045, 3126, 3512, 1928, 3285, 3037, 2017, 2519, 3529, 2477, 3644,
    3036, 3468, 2591, 1973, 3473, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3126, 3512, 1928, 1863,
    3037, 3746, 3490, 3529, 2477, 3750, 3657, 3671, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018,
    3029, 3045, 3126, 3566, 1928, 2624, 3690, 2637, 2519, 3529, 2477, 2517, 3036, 3086, 2846, 1941, 2518, 3701, 3724, 1970, 2529, 2748, 2533, 1917, 1917, 1917,
    1917, 1917, 3018, 3476, 3051, 3735, 3029, 3045, 3126, 3512, 1928, 3285, 3037, 3746, 2519, 3529, 2477, 2517, 3036, 3086, 3453, 1941, 2518, 3758, 2516, 1970,
    2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045, 3126, 3512, 1928, 3285, 3037, 3746, 2519, 3529, 2477, 3776, 3036, 3086,
    3788, 1941, 3777, 2504, 3785, 3796, 3810, 2748, 3818, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3829, 3844, 3126, 3512, 1928, 3285, 3037, 3746,
    2519, 3529, 2477, 2517, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 3018, 3476, 3051, 3018, 3029, 3045,
    3126, 3512, 1928, 3285, 3037, 3746, 2167, 3529, 2477, 2517, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748, 2533, 1917, 1917, 1917, 1917, 1917,
    3018, 3476, 3051, 3018, 3029, 3045, 3126, 3512, 1928, 3285, 3037, 3746, 2519, 3529, 3859, 2517, 3036, 3086, 3453, 1941, 2518, 2504, 2516, 1970, 2529, 2748,
    2533, 1917, 1917, 1917, 1917, 1917, 3716, 1917, 1917, 3388, 1917, 3682, 3392, 3765, 1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330,
    1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 3880, 3874, 1917, 3889, 3360, 3363, 3765, 1917, 1917, 2897, 1930, 1917, 2428,
    2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 3903, 3905, 3897, 1917, 2887, 2520, 3765,
    1917, 1917, 2897, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
    1917, 1917, 3913, 2334, 3924, 3765, 1917, 1917, 2743, 1930, 1917, 2428, 2233, 1917, 2896, 1917, 1917, 2330, 1917, 2200, 1917, 2897, 1917, 2332, 1917, 1917,
    1917, 1917, 1917, 1917, 1916, 3677, 1856, 1878, 1886, 1906, 3932, 3765, 1926, 3544, 1938, 3746, 2030, 2521, 3940, 3541, 3307, 3768, 1917, 2508, 2487, 3954,
    1994, 1970, 2641, 2748, 2533, 1917, 1917, 1917, 1917, 1917, 1281, 1281, 1281, 0, 0, 1281, 1281, 0, 0, 2870, 0, 102, 2870, 0, 2875, 0, 0, 0, 2870, 2950, 56,
    135, 0, 1281, 0, 1345, 0, 1346, 1281, 1346, 1281, 1281, 1281, 0, 1359, 82, 1281, 0, 0, 4864, 0, 0, 56, 57, 0, 0, 0, 768, 0, 768, 1359, 1359, 82, 1281, 1281,
    0, 1281, 1363, 0, 1363, 1281, 0, 0, 0, 0, 0, 0, 0, 0, 55, 1345, 1346, 0, 0, 0, 0, 0, 0, 0, 3912, 0, 0, 0, 82, 1363, 0, 2870, 56, 57, 2875, 0, 0, 0, 57, 57,
    2875, 2875, 117, 0, 0, 0, 0, 0, 0, 0, 61, 2875, 0, 3912, 0, 0, 126, 0, 148, 0, 169, 0, 0, 2870, 56, 57, 2875, 0, 0, 178, 0, 3912, 0, 0, 148, 169, 169, 0, 0,
    0, 0, 56, 57, 2875, 0, 3912, 0, 0, 0, 0, 148, 0, 82, 1363, 0, 2925, 111, 113, 2931, 6302, 0, 0, 0, 113, 0, 2931, 117, 0, 0, 0, 0, 3912, 0, 126, 0, 3981, 0,
    0, 0, 0, 0, 103, 103, 0, 0, 103, 0, 2931, 0, 0, 0, 0, 3981, 0, 163, 3981, 0, 0, 0, 182, 0, 0, 0, 61, 0, 61, 61, 0, 2931, 0, 3981, 0, 0, 0, 0, 197, 0, 3981,
    0, 0, 0, 0, 198, 0, 0, 2925, 111, 113, 2931, 111, 113, 0, 3981, 0, 198, 0, 198, 198, 0, 0, 0, 0, 0, 0, 8192, 0, 8192, 0, 8192, 93, 93, 0, 0, 0, 0, 0, 0, 0,
    4864, 0, 169, 0, 0, 0, 0, 3072, 57, 0, 0, 0, 0, 0, 0, 0, 7936, 0, 0, 0, 74, 74, 74, 72, 72, 72, 72, 72, 0, 0, 2870, 56, 67, 0, 67, 0, 0, 0, 0, 0, 55, 60,
    55, 57, 57, 57, 0, 0, 0, 0, 0, 56, 0, 0, 3072, 0, 0, 2875, 0, 0, 0, 0, 0, 5888, 0, 2870, 3072, 3072, 0, 0, 0, 117, 0, 0, 0, 0, 3912, 96, 0, 169, 169, 0, 0,
    0, 0, 56, 3072, 0, 0, 0, 169, 0, 169, 0, 0, 0, 0, 56, 57, 0, 3912, 0, 169, 209, 169, 0, 169, 0, 0, 0, 56, 3072, 0, 0, 0, 0, 57, 0, 3328, 2875, 0, 0, 0, 0,
    57, 57, 0, 0, 0, 117, 0, 0, 3328, 0, 0, 0, 0, 56, 57, 3328, 0, 0, 0, 0, 0, 0, 0, 94, 3328, 0, 0, 0, 0, 0, 56, 56, 56, 0, 0, 0, 0, 0, 53, 58, 53, 57, 57,
    3328, 3328, 0, 117, 0, 0, 0, 0, 3962, 0, 0, 150, 3478, 0, 0, 0, 0, 56, 57, 0, 3912, 0, 208, 0, 210, 3328, 0, 0, 0, 0, 0, 0, 5632, 0, 0, 0, 0, 768, 169, 0,
    0, 0, 0, 56, 57, 0, 3912, 167, 208, 0, 210, 0, 768, 0, 0, 0, 56, 57, 0, 0, 0, 0, 0, 0, 0, 5376, 0, 768, 768, 0, 0, 0, 0, 0, 57, 0, 0, 68, 6912, 68, 6912, 0,
    0, 6912, 6912, 0, 6912, 0, 6912, 0, 0, 2870, 56, 57, 57, 0, 0, 138, 117, 0, 0, 0, 0, 3962, 123, 0, 4608, 4608, 4608, 0, 0, 0, 0, 4608, 4608, 0, 0, 56, 57,
    0, 4608, 0, 4608, 0, 0, 0, 2870, 56, 5120, 5120, 5120, 0, 0, 0, 0, 5120, 5120, 0, 0, 56, 57, 0, 5120, 0, 5120, 0, 0, 0, 2870, 56, 0, 5120, 0, 0, 0, 0, 0, 0,
    56, 56, 0, 0, 57, 57, 0, 0, 117, 117, 0, 0, 0, 0, 3962, 124, 0, 7248, 7243, 7248, 53, 53, 53, 53, 0, 0, 53, 58, 53, 53, 53, 57, 0, 2875, 2875, 0, 0, 0, 0,
    2870, 2870, 56, 56, 57, 57, 2875, 2875, 117, 117, 0, 0, 0, 121, 3912, 0, 0, 0, 126, 0, 0, 0, 61, 0, 61, 0, 61, 0, 0, 2870, 56, 169, 169, 0, 0, 0, 2870, 56,
    57, 2875, 6302, 0, 0, 2875, 0, 3912, 0, 0, 0, 0, 0, 0, 0, 2870, 56, 56, 0, 3912, 0, 0, 0, 169, 169, 0, 0, 0, 0, 0, 0, 5120, 0, 5120, 0, 7424, 0, 7424, 76,
    76, 7424, 7424, 76, 76, 76, 7424, 7424, 7424, 7424, 7424, 0, 0, 2870, 56, 0, 169, 0, 0, 0, 56, 57, 0, 0, 0, 169, 0, 169, 0, 6302, 0, 0, 0, 0, 0, 0, 56,
    3072, 3661, 3661, 3661, 0, 0, 0, 0, 0, 169, 0, 172, 57, 0, 2875, 2904, 0, 0, 0, 0, 3661, 3661, 0, 0, 0, 4193, 3683, 3684, 3661, 2870, 0, 3683, 4223, 3712,
    3683, 3684, 0, 0, 0, 2870, 0, 0, 2920, 0, 2875, 57, 136, 2875, 2953, 117, 117, 0, 0, 120, 0, 3912, 0, 0, 0, 0, 169, 0, 0, 3982, 143, 0, 145, 0, 4245, 3712,
    2973, 0, 0, 0, 3912, 4001, 162, 0, 0, 6400, 0, 0, 0, 0, 0, 56, 57, 3328, 0, 0, 0, 164, 0, 166, 0, 4264, 169, 0, 0, 0, 8009, 8009, 8009, 8009, 8009, 0, 0,
    2870, 56, 0, 2990, 175, 176, 2993, 0, 0, 0, 6400, 6400, 6400, 6400, 6400, 0, 0, 2870, 56, 4019, 180, 0, 181, 0, 183, 0, 4281, 169, 186, 0, 0, 0, 3005, 190,
    191, 3008, 0, 4034, 0, 195, 0, 196, 0, 0, 6400, 0, 6400, 0, 6400, 0, 0, 5376, 0, 0, 56, 57, 0, 3912, 0, 169, 0, 169, 4096, 199, 0, 0, 2870, 201, 202, 2875,
    0, 0, 0, 2926, 112, 114, 2932, 0, 4044, 0, 205, 0, 169, 206, 0, 0, 6656, 0, 0, 0, 2870, 56, 0, 0, 56, 0, 56, 0, 56, 0, 0, 0, 0, 0, 0, 0, 6912, 0, 0, 211,
    169, 0, 0, 0, 0, 0, 169, 169, 0, 0, 3982, 0, 0, 0, 0, 4245, 3712, 2973, 0, 0, 0, 3912, 4001, 0, 0, 0, 8704, 0, 0, 8704, 8704, 4019, 0, 0, 0, 0, 0, 0, 4281,
    3008, 0, 4034, 0, 0, 0, 0, 0, 169, 171, 0, 0, 4044, 0, 0, 0, 169, 206, 0, 0, 8192, 0, 0, 0, 0, 0, 170, 0, 0, 0, 3982, 124, 0, 146, 0, 4245, 3712, 2973, 0,
    0, 0, 3912, 4001, 124, 0, 0, 11776, 0, 0, 11776, 11776, 0, 53, 0, 0, 0, 0, 0, 0, 56, 57, 0, 4019, 124, 0, 146, 0, 0, 184, 4281, 3008, 0, 4034, 124, 146, 0,
    0, 0, 4264, 169, 0, 0, 0, 4044, 146, 0, 0, 169, 206, 0, 53, 0, 53, 0, 2870, 2870, 56, 4019, 0, 0, 0, 0, 167, 0, 4281, 3008, 0, 4034, 0, 0, 0, 167, 0, 4264,
    169, 0, 0, 0, 4044, 0, 167, 0, 169, 206, 0, 53, 0, 53, 7243, 7248, 53, 53, 4019, 124, 0, 146, 0, 0, 0, 4281, 0, 7936, 0, 8009, 0, 0, 8009, 8009, 8448, 0,
    8448, 0, 0, 0, 0, 0, 768, 768, 0, 4864, 0, 4864, 0, 0, 0, 2870, 56, 8704, 8788, 8704, 8788, 0, 0, 2870, 56, 0, 2870, 0, 0, 0, 0, 0, 0, 3072, 57, 0, 0, 2870,
    0, 2870, 2870, 2875, 2870, 2870, 2875, 0, 0, 0, 2870, 56, 57, 2875, 2875, 2870, 2875, 2870, 2870, 2870, 2870, 0, 0, 2870, 2875, 2870, 2870, 2870, 0, 2870,
    0, 2870, 2870, 2870, 2901, 56, 57, 2875, 2875, 2904, 0, 0, 0, 0, 4264, 169, 0, 0, 0, 4193, 2870, 0, 0, 2870, 0, 2875, 0, 0, 0, 3912, 3912, 0, 0, 0, 6912,
    6912, 6912, 6912, 0, 4223, 0, 0, 0, 0, 0, 0, 2870, 3072, 0, 3982, 0, 0, 0, 0, 4245, 0, 55, 0, 0, 0, 0, 0, 0, 3072, 3072, 0, 2870, 0, 2870, 2870, 2870, 2870,
    56, 0, 9728, 0, 9728, 0, 0, 9728, 9728, 60, 55, 60, 55, 55, 55, 55, 0, 0, 55, 60, 55, 55, 55, 95, 0, 55, 0, 0, 55, 0, 60, 0, 0, 0, 55, 55, 86, 86, 60, 0, 0,
    0, 55, 56, 57, 60, 0, 0, 0, 94, 94, 0, 125, 0, 147, 0, 0, 0, 6656, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 3912, 0, 125, 87, 87, 60, 60, 118, 117, 0, 0, 0, 8704,
    8704, 8704, 8704, 8704, 0, 94, 0, 0, 0, 147, 0, 0, 0, 9728, 9728, 9728, 9728, 9728, 0, 0, 2870, 56, 170, 169, 0, 0, 0, 55, 86, 87, 60, 60, 2875, 0, 0, 0, 0,
    5888, 0, 0, 2870, 60, 0, 94, 0, 0, 147, 0, 0, 0, 9984, 0, 0, 0, 0, 6912, 0, 0, 0, 0, 94, 0, 0, 0, 170, 170, 0, 0, 0, 0, 0, 2870, 0, 0, 2870, 0, 2875, 9984,
    0, 9984, 0, 0, 0, 0, 0, 2870, 0, 56, 69, 0, 69, 0, 0, 0, 0, 0, 2870, 56, 57, 62, 2870, 62, 0, 62, 0, 62, 0, 55, 0, 55, 55, 55, 2870, 86, 2870, 2875, 151, 0,
    0, 2970, 155, 156, 169, 186, 0, 0, 9472, 3005, 190, 191, 57, 2875, 2875, 2904, 0, 0, 0, 92, 117, 10240, 0, 0, 0, 3962, 0, 0, 0, 11520, 11520, 11520, 11520,
    0, 0, 2870, 56, 0, 4193, 2870, 0, 101, 2870, 0, 2875, 0, 0, 0, 3912, 3912, 0, 96, 0, 126, 0, 0, 0, 0, 11264, 0, 11264, 0, 0, 0, 2870, 56, 4223, 0, 101, 101,
    0, 0, 101, 2870, 2875, 0, 0, 0, 2970, 155, 156, 2875, 0, 0, 133, 2870, 2950, 56, 135, 57, 136, 2875, 2953, 117, 117, 0, 139, 0, 3982, 0, 144, 0, 0, 4245,
    101, 2973, 0, 159, 0, 3912, 4001, 0, 0, 98, 0, 76, 0, 0, 98, 0, 0, 0, 0, 0, 169, 0, 0, 4096, 199, 200, 0, 2870, 201, 202, 2875, 0, 0, 0, 3912, 3912, 0, 126,
    0, 0, 0, 0, 0, 2870, 2875, 2870, 0, 165, 0, 0, 4264, 169, 0, 0, 102, 102, 0, 0, 102, 2870, 2875, 131, 0, 0, 2870, 2870, 56, 56, 2875, 0, 0, 107, 2870, 56,
    57, 2875, 2875, 2875, 0, 0, 0, 0, 4352, 0, 0, 0, 0, 173, 2870, 56, 57, 2875, 0, 0, 0, 2870, 2870, 56, 56, 117, 0, 119, 0, 0, 3912, 0, 0, 0, 0, 0, 103, 0,
    1359, 0, 2946, 0, 0, 0, 2870, 2870, 56, 56, 2875, 0, 0, 108, 2870, 56, 57, 2875, 2875, 2875, 0, 0, 10752, 0, 2875, 0, 132, 0, 2870, 2870, 56, 56, 140, 3912,
    0, 0, 0, 0, 0, 0, 4608, 0, 96, 0, 2870, 0, 0, 2870, 0, 2875, 0, 0, 106, 2926, 112, 114, 2932, 63, 2870, 63, 0, 63, 0, 63, 0, 55, 0, 55, 55, 60, 55, 55, 60,
    0, 0, 0, 55, 86, 87, 0, 94, 0, 170, 0, 170, 0, 0, 55, 86, 87, 60, 0, 0, 0, 0, 3912, 0, 0, 126, 0, 0, 0, 6656, 0, 6656, 0, 6656, 2870, 2875, 0, 152, 0, 2870,
    56, 57, 207, 3912, 0, 208, 0, 210, 2875, 0, 0, 160, 3912, 3912, 0, 0, 1281, 1281, 1281, 0, 0, 0, 0, 11264, 0, 0, 11264, 2921, 0, 0, 0, 2870, 56, 57, 2875,
    0, 11008, 0, 169, 169, 0, 188, 0, 2870, 56, 57, 0, 0, 57, 0, 57, 0, 57, 0, 0, 0, 0, 0, 0, 0, 11264, 2875, 193, 3912, 0, 0, 0, 0, 0, 2870, 2901, 56, 64,
    2870, 64, 0, 64, 0, 64, 0, 57, 0, 2875, 117, 0, 0, 0, 0, 3912, 0, 0, 0, 0, 0, 102, 169, 169, 187, 0, 0, 2870, 56, 57, 0, 0, 2875, 0, 0, 0, 0, 3912, 0, 96,
    0, 3912, 0, 0, 0, 148, 0, 0, 0, 2875, 0, 3912, 0, 0, 148, 0, 0, 169, 0, 0, 0, 169, 0, 9216, 2870, 56, 57, 2875, 2875, 2875, 0, 90, 91, 0, 203, 3912, 0, 0,
    0, 169, 169, 8960, 1024, 169, 169, 0, 0, 0, 0, 0, 2925, 0, 111, 0, 2870, 0, 2870, 2894, 2897, 2870, 2870, 2875, 0, 0, 153, 2970, 155, 156, 2897, 2894, 2897,
    2870, 2870, 2870, 2870, 0, 61, 0, 7680, 0, 7680, 0, 7680, 57, 57, 2875, 2875, 117, 117, 10496, 0, 72, 0, 72, 74, 74, 72, 72, 0, 11520, 0, 0, 0, 0, 11520, 0,
    0, 0, 0, 0, 0, 0, 2945, 70, 11520, 11590, 11520, 0, 0, 11520, 11520, 0, 11776, 0, 11776, 0, 11776, 0, 11776, 0, 0, 11776, 0, 0, 0, 0, 11776, 71, 0, 71, 0,
    0, 0, 0, 0, 2925, 111, 113, 5376, 0, 5376, 0, 0, 0, 2870, 56, 1363, 0, 1363, 1281, 0, 0, 2870, 56, 57, 57, 0, 2875, 117, 117, 0, 0, 2304, 2560, 2048, 1792,
    1536, 0, 0, 169, 0, 0, 0, 2870, 56, 57, 0, 0, 2875, 89, 0, 0, 0, 6400, 0, 0, 6400, 6400
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    112, 106, 109, 116, 120, 124, 128, 132, 136, 140, 146, 142, 150, 154, 158, 206, 162, 166, 175, 178, 182, 156, 206, 222, 193, 197, 201, 155, 157, 205, 222,
    225, 200, 283, 211, 169, 171, 215, 283, 211, 223, 224, 230, 283, 221, 171, 215, 156, 222, 229, 285, 234, 236, 207, 258, 240, 207, 244, 269, 271, 273, 250,
    280, 292, 262, 266, 207, 207, 277, 207, 207, 207, 207, 246, 207, 289, 207, 207, 207, 189, 207, 207, 253, 207, 207, 188, 207, 256, 207, 207, 188, 207, 256,
    207, 207, 188, 207, 207, 207, 185, 207, 207, 217, 207, 207, 207, 67108864, 1073741824, -2147483648, 0, 0, 33554448, 16, 1024, 16777216, 33554432, 16, 3072,
    5120, 67109888, 3088, 33554448, -2147483632, 8391680, 1073746944, 8391696, 67109904, 8391680, 0, 8391696, 16777216, -1577058280, 16777216, -1576533992,
    16777232, -502792168, 1008, 1409303568, 1008, 1428177920, 139176980, 139181060, 1428177936, 1436566528, 1436566544, 1363034128, 139181076, 172731412,
    139181060, 1436566544, 1363034128, 1436566528, 1396588560, 1436566544, 1024, 1024, 1024, 2048, 2048, 5120, 5120, 5120, 24, 524312, 256, 512, 128, 64, 32,
    16384, 16384, 2097152, 2097152, 2097152, 2097152, 2097152, 32768, 4203520, 4268032, 1028, 655376, 4207616, 5124, 655360, 1966096, 0, 4, 8, 0, 4, 8, 16, 0,
    32768, 4202496, 4202496, 4268032, 4194304, 4194304, 4194304, 1028, 5124, 0, 0, 0, 8388608, 8388608, 0, 0, 0, 0, 5120, 8388608, 0, 8, 32768, 4, 0, 0, 4, 0,
    5120, 8, 16384, 2097152, 2097152, 2097152, 32768, 4202496, 2097152, 4, 4, 0, 0, 2097152, 4, 8, 4, 4, 0, 8192, 0, 64, 8192, 4096, 8192, 0, 0, 28, 0, 4128,
    4161, 4130, 0, 256, 1024, 0, 1024, 0, 0, 2048, 4096, 12322, 12322, 2082, 6178, 4158, 6178, 4158, 0, 4096, 8192, 1920, 8192, 3968, 8192, 65, 128, 768, 1024,
    0, 4130, 4130, 0, 1024, 2048, 2048, 8, 16384, 128, 256, 1024, 0, 8192, 4130, 6178
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    'important',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'STRING',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'COMMENT',
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'and'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 211 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- 'and' | 'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(39, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(42, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 41">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>      <!-- S | '(' | 'and' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(28, $input, $state)"/> <!-- '(' | 'and' | 'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 43                                          (: '{' :)
                       or $state[$p:lk] = 2756">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 4">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(26, $input, $state)"/> <!-- '(' | 'and' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 24                                    (: '(' :)
                             or $state[$p:lk] = 1540">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(4, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/> <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                          '|' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 45                                          (: '}' :)
                       or $state[$p:lk] = 2884">                                    <!-- S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>  <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 23">                                <!-- COMMENT -->
                  <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-query_declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>          <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- COMMENT -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- COMMENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '}' -->
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>           <!-- ';' -->
    <xsl:variable name="state" select="p:consume(31, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>          <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(27, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>          <!-- important | S | COMMA | ')' | '/' | ';' | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- important | S | ')' | '/' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | '-' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 31                                          (: ';' :)
                       or $state[$p:lk] = 45                                          (: '}' :)
                       or $state[$p:lk] = 2884">                                    <!-- S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- IDENT | STRING -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- URL | S | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2(31, $input, $state)"/> <!-- important | S | COMMA | ')' | '/' | ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 1930                                       (: IDENT ':' :)
                      and $state[$p:lk] != 1931">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>   <!-- ':' -->
            <xsl:variable name="state" select="p:consume(30, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- ':' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 44">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(15, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(17, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (2826,                                  (: IDENT '|' :)
                                               2842)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(15, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 266                                           (: IDENT S :)
                     or $state[$p:lk] = 684                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1610                                          (: IDENT ')' :)
                     or $state[$p:lk] = 43786                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 43802">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 28">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 37">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 30">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | ')' | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 2">                                       <!-- URL -->
            <xsl:variable name="state" select="p:consume(2, $input, $state)"/>      <!-- URL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 15">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(15, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 27">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(27, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 22">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(22, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 13">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(13, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 11">                                      <!-- STRING -->
            <xsl:variable name="state" select="p:consume(11, $input, $state)"/>     <!-- STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 10">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(10, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(19, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(34, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 44                                            (: '|' :)
                     or $state[$p:lk] = 2826">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 38">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 32">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(32, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 26">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 10                                            (: IDENT :)
                     or $state[$p:lk] = 44                                            (: '|' :)
                     or $state[$p:lk] = 2842">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>           <!-- '*' -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 44">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 44                                            (: '|' :)
                     or $state[$p:lk] = 2826">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 4                                           (: S :)
                       or $state[$p:l1] = 17                                          (: PLUS :)
                       or $state[$p:l1] = 18                                          (: GREATER :)
                       or $state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 20                                          (: TILDE :)
                       or $state[$p:l1] = 43">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 28">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 37">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 30">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(14, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 28">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 37">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 30">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 21">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 4                                           (: S :)
                       or $state[$p:l1] = 17                                          (: PLUS :)
                       or $state[$p:l1] = 18                                          (: GREATER :)
                       or $state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 20                                          (: TILDE :)
                       or $state[$p:l1] = 43">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>          <!-- IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10                                            (: IDENT :)
                     or $state[$p:l1] = 26                                            (: '*' :)
                     or $state[$p:l1] = 44">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 44">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(15, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (10,                                    (: IDENT :)
                                               26)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                            '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (2826,                            (: IDENT '|' :)
                                                     2842)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(15, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 266                                     (: IDENT S :)
                           or $state[$p:lk] = 684                                     (: '|' IDENT :)
                           or $state[$p:lk] = 906                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1098                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1162                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1226                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1290                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1354                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1546                                    (: IDENT '(' :)
                           or $state[$p:lk] = 1802                                    (: IDENT '.' :)
                           or $state[$p:lk] = 1930                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2122                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2378                                    (: IDENT '[' :)
                           or $state[$p:lk] = 2762                                    (: IDENT '{' :)
                           or $state[$p:lk] = 43786                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 43802">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 19                                          (: COMMA :)
                       or $state[$p:lk] = 43                                          (: '{' :)
                       or $state[$p:lk] = 2756">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 19">                                       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 31">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(25, $input, $state)"/> <!-- S | IDENT | STRING | COMMENT | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 287">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(23, $input, $state)"/> <!-- IDENT | STRING | COMMENT | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 4                                           (: S :)
                       or $state[$p:lk] = 45                                          (: '}' :)
                       or $state[$p:lk] = 2911                                        (: ';' '}' :)
                       or $state[$p:lk] = 184607">                                  <!-- ';' S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(31, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>  <!-- S | IDENT | STRING | COMMENT -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>  <!-- IDENT | STRING | COMMENT -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 23">                                <!-- COMMENT -->
                  <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- S | IDENT | STRING | COMMENT -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- IDENT | STRING | COMMENT -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- COMMENT -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- COMMENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- ';' -->
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- ';' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- S | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '}' -->
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(49, $input, $state)"/>        <!-- END | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '[' | '|' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 23">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34                                      (: '@charset' :)
                           or $state[$p:l1] = 35">                                  <!-- '@import' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:variable name="state" select="p:parse-css-4($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:variable name="state" select="p:parse-css-5($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-css-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>