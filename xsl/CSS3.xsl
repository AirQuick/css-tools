<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Mon May 29, 2017 21:29 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -tree -xslt -ll 3 -backtrack -main -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 24, 25, 20, 26, 27, 9, 28, 29, 30, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 34, 35, 36, 37, 33, 9, 38, 39, 40, 41, 42, 43, 33, 44, 45, 33, 46, 47, 48, 49, 50, 51, 33, 52, 53, 54, 55, 56, 33, 57, 58, 59, 60, 61, 62,
    63, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 181, 193, 224, 209, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
    188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
    188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 64, 1, 0, 2, 3, 0, 0, 64, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 20, 26, 27, 9, 28, 29, 30, 31, 32,
    32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 35, 36, 37, 33, 51, 33, 52, 53, 54, 55, 56, 33, 57, 58, 59, 60, 61,
    62, 63, 9, 38, 39, 40, 41, 42, 43, 33, 44, 45, 33, 46, 47, 48, 49, 50
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 33, 33
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1281, 1538, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 569
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
    2119, 2119, 2119, 2119, 2119, 2119, 4527, 2537, 2080, 2087, 2093, 2101, 2108, 2116, 2910, 2119, 3600, 2129, 2146, 3759, 2196, 3340, 2779, 2197, 3302, 3069,
    3126, 2810, 2159, 2924, 2812, 2283, 3103, 4362, 2334, 2472, 4214, 2119, 4527, 2537, 2080, 2087, 2093, 2101, 2108, 2116, 2910, 2119, 3600, 2170, 2191, 3759,
    2196, 3340, 2205, 2197, 3302, 3041, 3126, 2810, 2159, 3121, 2812, 4211, 3103, 4209, 3796, 2472, 4214, 2119, 4527, 2537, 2080, 2087, 2093, 2101, 2108, 2220,
    2910, 2119, 3600, 2232, 2240, 3759, 2196, 2872, 2253, 2197, 2871, 2277, 3022, 2873, 2291, 3116, 2304, 2314, 2302, 2312, 2693, 3295, 3301, 2119, 2117, 2119,
    2119, 2119, 2119, 2119, 2119, 3848, 2870, 2119, 2269, 3142, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119,
    2119, 2119, 2119, 2119, 3819, 2119, 4289, 2363, 2358, 2353, 3822, 3848, 2870, 2119, 2119, 2119, 2322, 2119, 2119, 2497, 2245, 2119, 2119, 2118, 2119, 2498,
    2120, 2119, 3816, 2119, 2498, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 3075, 2371, 2377, 2385, 2870, 2119, 2119, 3142, 2322, 2119, 2119, 3340,
    2245, 2119, 3302, 2118, 4213, 3341, 2458, 2119, 2508, 4211, 3341, 4561, 2121, 2472, 4214, 2119, 2117, 2119, 2119, 2119, 2939, 2119, 2119, 3848, 2870, 2119,
    2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119,
    2119, 2119, 2119, 3848, 2870, 2119, 2407, 3142, 2396, 3373, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119,
    2119, 2119, 2117, 2119, 2119, 2119, 2119, 2119, 2119, 3848, 2870, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119,
    2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 4244, 2119, 2528, 2418, 2430, 2425, 2435, 3848, 2870, 2119, 2119, 3142, 3027, 2119, 2119, 3303, 2245, 2119,
    3302, 2119, 4213, 3304, 2458, 2119, 4241, 4211, 3304, 4561, 2121, 2472, 4214, 2119, 3884, 2119, 2119, 2119, 3870, 3890, 2443, 2450, 2870, 2119, 3964, 3142,
    2466, 2119, 3962, 3340, 2480, 3095, 4237, 2494, 2119, 2506, 2457, 2119, 2518, 2119, 2516, 2496, 2526, 2119, 2119, 2119, 2117, 2536, 2536, 2536, 2119, 2545,
    2549, 3848, 2870, 2119, 2119, 3142, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341, 3435, 2119, 2508, 3614, 3341, 3448, 4019, 3695, 3617, 2119,
    2117, 2565, 3834, 3835, 3017, 2557, 2563, 2576, 4017, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 2944, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119,
    3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 2859, 4447, 4397, 3848, 2870, 2119, 4392, 2587, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118,
    2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 3924, 3545, 2119, 4058, 4280, 2602, 2595, 3848, 2265, 2119, 4058, 2617, 2322, 2119,
    2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 4085, 2119, 3728, 2625, 2631, 2639, 2665, 2646,
    2870, 3044, 4158, 3852, 2682, 2119, 4156, 4098, 2701, 4157, 3851, 3223, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2117, 2119,
    2119, 2119, 2609, 2717, 2723, 2731, 2870, 2119, 2742, 2753, 2322, 2410, 2119, 3340, 2245, 2119, 3302, 2118, 4213, 3341, 2458, 2119, 2508, 4211, 3341, 4561,
    2121, 2472, 4214, 2119, 2117, 2119, 2567, 2294, 3433, 2761, 2787, 2794, 3430, 2119, 2568, 3665, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2806, 4213, 3341,
    2458, 2119, 2508, 4211, 3341, 4561, 2121, 2472, 4214, 2119, 2117, 2119, 2119, 2119, 3618, 3741, 2820, 2839, 2858, 2399, 2867, 2881, 2889, 4475, 3470, 2138,
    2903, 2932, 2952, 2960, 2980, 3154, 2988, 2996, 3978, 3010, 3035, 3057, 3083, 3484, 4214, 2119, 2117, 2119, 2119, 2119, 3618, 3741, 2820, 2839, 2858, 2399,
    2867, 2881, 2889, 4475, 4156, 2138, 2903, 3111, 2388, 2960, 3140, 3154, 2988, 2119, 3978, 3150, 2810, 3057, 4379, 3484, 4214, 2119, 2117, 2119, 2119, 2119,
    3618, 3741, 2820, 2839, 2858, 2399, 2867, 2881, 2889, 4475, 3585, 2138, 2903, 3162, 3191, 2960, 3175, 3154, 2988, 3167, 3978, 3185, 2810, 3199, 4379, 3484,
    4214, 2119, 2117, 2119, 2119, 2119, 3618, 3741, 2820, 2839, 2858, 2399, 2867, 2881, 2889, 4475, 4156, 2138, 2903, 3111, 2388, 2960, 3207, 3154, 2988, 3209,
    3978, 3150, 3217, 3057, 3231, 3251, 4214, 2119, 2117, 2119, 2119, 2119, 3618, 3741, 2820, 2839, 2858, 2399, 2867, 2881, 2889, 4475, 3585, 2138, 2903, 3162,
    3191, 2960, 3175, 3154, 2988, 3177, 3978, 3185, 2810, 3199, 4379, 3484, 4214, 2119, 2117, 2119, 2119, 2119, 3618, 3741, 2820, 2839, 2858, 2399, 2867, 2881,
    2889, 4475, 4156, 2138, 2903, 3111, 2388, 2960, 3207, 3154, 2988, 3209, 3978, 3150, 3217, 3057, 3231, 3271, 4214, 2119, 2117, 2119, 2119, 2119, 3618, 3741,
    2820, 2839, 2858, 2399, 2867, 2881, 2889, 4475, 4156, 2138, 2903, 3111, 2388, 2960, 3140, 3154, 2988, 2119, 3978, 3150, 2810, 3289, 4379, 3484, 4214, 2119,
    2117, 2673, 2674, 2674, 2672, 3318, 3312, 3326, 2870, 2119, 2119, 3142, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119,
    3341, 2119, 2119, 2119, 2119, 2119, 2117, 2708, 2709, 3350, 3338, 3349, 4485, 3848, 2870, 2119, 2119, 3142, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2118,
    2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 3358, 2119, 2119, 3848, 4550, 3371, 2119, 3142, 2322, 2119,
    2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 2119, 2119, 3243, 3848,
    2870, 2119, 2119, 4512, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119,
    2119, 2119, 2119, 2119, 2119, 3848, 2870, 2119, 2119, 3142, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119,
    2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 2119, 3381, 3387, 3395, 2870, 2119, 2119, 3142, 2322, 2119, 2119, 3340, 2245, 2119, 3302, 2118, 2119, 3341,
    2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 4419, 2858, 2399, 4547, 4195, 2889, 4152, 4156, 2138,
    2903, 3443, 2388, 2960, 3140, 3154, 2988, 2119, 3978, 3150, 2810, 3057, 4379, 3484, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044,
    4547, 4333, 2682, 2119, 4156, 4098, 2701, 4157, 3851, 3069, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2117, 2119, 2119, 2119,
    3466, 3462, 3456, 3478, 2870, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119,
    2119, 2119, 3581, 2119, 2850, 3510, 3492, 3507, 3518, 3532, 2870, 3278, 3524, 3553, 3561, 2119, 2223, 3575, 3593, 2224, 2972, 3608, 4537, 3047, 3499, 3811,
    3049, 2966, 3047, 3539, 4532, 3002, 3544, 2119, 2117, 2119, 2827, 2119, 3626, 2119, 2119, 3848, 2870, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119,
    3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 3090, 2119, 2119, 3848, 2870, 2119, 2119, 3142,
    2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2136, 2119, 3631, 4040, 3639, 4032,
    3654, 4419, 2858, 2399, 4547, 4195, 2889, 4152, 4156, 2798, 2903, 3443, 3673, 2960, 3140, 3154, 2988, 2119, 3681, 3150, 2810, 3057, 3401, 3484, 4214, 2119,
    2136, 2119, 3631, 4040, 3409, 4037, 3424, 4419, 2858, 2399, 4547, 4195, 2889, 4152, 4156, 2138, 2903, 3443, 2388, 2960, 3140, 3154, 2988, 2119, 3978, 3150,
    2810, 3689, 4379, 3484, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 4419, 2858, 3703, 3958, 3711, 2889, 4180, 3719, 2138, 2903, 3736, 2388, 2960,
    3140, 3154, 2988, 2119, 3978, 3150, 2810, 3057, 4379, 3749, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 4419, 2858, 2399, 4547, 4195, 3767, 4152,
    4156, 2138, 2903, 3443, 2734, 2960, 3140, 3154, 2988, 2119, 3978, 3150, 2810, 3057, 4379, 3484, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 4419,
    2858, 2399, 3958, 4195, 2889, 4180, 4542, 3330, 2903, 3775, 2388, 3783, 3140, 3929, 2988, 2119, 3978, 3150, 4412, 3057, 4379, 3567, 4214, 2119, 2136, 2119,
    3631, 4040, 3409, 4037, 3424, 4419, 2858, 2399, 4054, 4195, 2889, 4303, 2915, 2138, 2903, 3791, 2388, 2960, 3804, 3154, 2988, 2119, 3978, 3830, 2810, 3057,
    4379, 3484, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044, 4547, 4333, 2682, 2119, 2260, 3843, 2701, 4157, 3851, 3069, 4213, 2810,
    3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044, 4276, 3860, 2682, 3281, 2151, 4098,
    2701, 4374, 3851, 3069, 4213, 3063, 3416, 2119, 2812, 4211, 2810, 4362, 4071, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044,
    4547, 4333, 2682, 2119, 4156, 4098, 2701, 4157, 3851, 3069, 4213, 2810, 3646, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040,
    3409, 4037, 3424, 2775, 2870, 3044, 4547, 4333, 2682, 3868, 2831, 3878, 2701, 4157, 3851, 3069, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472,
    4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3898, 3958, 3910, 2682, 2745, 4542, 3918, 2701, 4368, 2579, 3069, 4213, 2810, 3944, 2119,
    2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3937, 4257, 3952, 2775, 2870, 3972, 2920, 3986, 2682, 2119, 3994, 4098, 4002, 4157,
    3851, 3069, 4213, 2810, 4426, 2119, 2812, 4211, 2810, 4362, 3796, 2895, 4214, 2119, 2136, 2119, 3631, 4040, 4010, 4027, 4048, 2775, 2870, 4066, 4547, 4333,
    2682, 2119, 4156, 4079, 2701, 4157, 4097, 3069, 2339, 4326, 3416, 4106, 2812, 4117, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037,
    3424, 2775, 2870, 3044, 2653, 4333, 2682, 4109, 3131, 4098, 2701, 3132, 4127, 3069, 4135, 2810, 3416, 2119, 2812, 4211, 3363, 4362, 3796, 2472, 4214, 2119,
    2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 4146, 3724, 4166, 2682, 3756, 4174, 4098, 2701, 4157, 3851, 3069, 4213, 4188, 3416, 2119, 4203, 2688,
    2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 4223, 4252, 4270, 2775, 2870, 3044, 4547, 4333, 2682, 2119, 4156, 4098, 2701, 4157, 3851, 3069,
    4213, 2810, 3416, 4215, 4356, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044, 4547, 4333, 2682, 4288,
    4297, 4098, 2701, 4157, 4311, 3069, 4119, 2810, 3416, 3100, 2812, 2328, 2768, 4230, 4319, 2486, 4214, 2119, 2136, 2119, 3631, 4040, 4341, 4262, 4349, 2775,
    2870, 3044, 4547, 4333, 2682, 2119, 4156, 4098, 2701, 4157, 3851, 3069, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119,
    3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044, 2846, 4333, 2682, 4138, 2344, 4098, 2701, 2345, 3851, 3069, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362,
    3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044, 4547, 4333, 2682, 2119, 4297, 4098, 2701, 4157, 3851, 3069, 4213, 2810,
    3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044, 4547, 4333, 2682, 2119, 4156, 4098,
    2701, 4387, 3851, 3069, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2136, 2119, 3631, 4040, 3409, 4037, 3424, 2775, 2870, 3044,
    4547, 4333, 4405, 2119, 4156, 4098, 2701, 4157, 3851, 3069, 4213, 2810, 3416, 2119, 2812, 4211, 2810, 4362, 3796, 2472, 4214, 2119, 2117, 2182, 2119, 2119,
    2119, 2183, 4434, 3848, 2870, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119,
    2119, 2119, 2117, 3902, 2119, 4442, 3238, 4455, 4461, 4469, 2870, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119,
    2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2162, 2162, 2657, 4483, 4493, 4498, 3848, 2870, 2119, 2119, 3142, 2396, 2119, 2119, 3340, 4089, 2119,
    3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2117, 2119, 2119, 2119, 3258, 2119, 3263, 3848, 2870, 2119, 2119, 2212,
    2396, 2119, 2119, 3340, 4089, 2119, 3302, 2118, 2119, 3341, 2120, 2119, 2508, 2119, 3341, 2119, 2119, 2119, 2119, 2119, 2177, 2537, 2080, 2087, 2093, 2101,
    2108, 4506, 3660, 2119, 3600, 2129, 2682, 3759, 2196, 3340, 4520, 2197, 3302, 3041, 3126, 2810, 4558, 3121, 2812, 4211, 3103, 4209, 3796, 2472, 4214, 2119,
    1795, 1795, 1795, 1795, 0, 0, 67, 1795, 0, 0, 1795, 1795, 1860, 67, 1861, 1795, 1795, 1795, 0, 0, 85, 1878, 1795, 67, 0, 1880, 1883, 1878, 1795, 67, 1883,
    1861, 1884, 1884, 1885, 1884, 1861, 1281, 1538, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 1883, 1884, 1885, 0, 1281, 1281, 1538, 0, 3389, 0, 0, 0, 0, 1432,
    1689, 1538, 1538, 3389, 3392, 133, 0, 0, 0, 0, 114, 3392, 142, 0, 3392, 6578, 4171, 0, 0, 0, 0, 0, 0, 14080, 0, 0, 0, 1883, 1884, 1885, 0, 0, 1281, 1538,
    1795, 0, 5, 0, 0, 0, 0, 13568, 0, 0, 0, 13568, 0, 1538, 3389, 3392, 133, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 3389, 0, 3392, 133, 0, 4171, 0, 0, 0, 5632, 0, 0,
    1281, 1281, 1861, 1375, 1633, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 1883, 1884, 1885, 0, 0, 1375, 0, 1633, 3457, 3459, 133, 0, 0, 0, 0, 133, 133, 0, 0, 0, 3457,
    0, 3459, 133, 0, 4253, 0, 0, 0, 6144, 0, 3392, 0, 0, 5376, 0, 0, 0, 0, 0, 119, 0, 0, 1633, 3457, 3459, 0, 0, 4253, 0, 0, 0, 183, 0, 0, 0, 146, 3459, 6578,
    4253, 0, 0, 0, 0, 0, 66, 66, 66, 0, 226, 0, 0, 0, 1375, 1633, 3457, 3459, 4253, 3459, 4253, 0, 0, 0, 221, 0, 0, 0, 0, 1538, 1538, 0, 0, 133, 4171, 0, 0, 0,
    183, 0, 0, 0, 169, 0, 0, 4171, 0, 183, 0, 0, 146, 0, 0, 0, 0, 116, 3392, 0, 0, 0, 6656, 0, 0, 0, 6656, 6656, 6656, 0, 0, 0, 0, 0, 6656, 6656, 0, 0, 6656,
    6656, 0, 75, 75, 0, 80, 80, 0, 75, 80, 75, 75, 75, 80, 75, 75, 1281, 1538, 0, 0, 3389, 0, 0, 0, 0, 1454, 1538, 1538, 0, 0, 0, 4171, 0, 0, 0, 0, 4460, 0, 0,
    4608, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 6912, 6912, 0, 0, 6912, 6912, 0, 0, 0, 6912, 6912, 6912, 0, 0, 0, 0, 0, 6912, 0, 0, 0, 6912, 0, 7168, 7168, 0, 7168,
    7168, 7168, 0, 7168, 1281, 1538, 0, 0, 3389, 0, 3584, 0, 0, 0, 0, 0, 0, 183, 183, 1538, 1538, 0, 3584, 133, 4171, 0, 0, 0, 183, 0, 0, 183, 0, 0, 0, 3584,
    3584, 133, 133, 0, 0, 0, 183, 0, 0, 183, 1024, 1538, 0, 3584, 0, 0, 0, 0, 0, 0, 0, 1538, 0, 5888, 0, 0, 0, 0, 1281, 1538, 0, 0, 0, 0, 5888, 0, 0, 0, 1281,
    1538, 0, 3584, 0, 0, 5888, 0, 0, 0, 0, 0, 0, 0, 6912, 7424, 0, 0, 0, 0, 0, 0, 0, 1808, 7424, 0, 0, 0, 0, 0, 7424, 0, 0, 0, 0, 7424, 0, 7680, 7680, 0, 0, 0,
    0, 7680, 0, 7680, 0, 0, 0, 0, 0, 0, 66, 0, 0, 7680, 1281, 1538, 0, 0, 3389, 0, 0, 0, 173, 1281, 0, 0, 4864, 4864, 4864, 0, 1281, 1281, 7936, 0, 5376, 0,
    5376, 5376, 5376, 5376, 0, 0, 7936, 0, 5376, 5376, 0, 0, 0, 8448, 0, 0, 0, 82, 0, 0, 5376, 5376, 5376, 0, 1281, 1281, 0, 63, 60, 60, 60, 0, 60, 60, 0, 60,
    0, 0, 0, 8273, 60, 60, 60, 0, 8273, 8281, 60, 60, 1281, 1538, 0, 3389, 3389, 0, 3392, 0, 115, 3392, 0, 0, 0, 0, 0, 14080, 14080, 14080, 0, 60, 8281, 60, 0,
    0, 8273, 0, 0, 0, 8960, 0, 0, 0, 0, 0, 0, 1538, 1538, 3389, 3392, 133, 4171, 0, 0, 0, 183, 223, 0, 0, 0, 0, 4253, 0, 221, 0, 3389, 3389, 3392, 3392, 133,
    133, 4171, 0, 0, 0, 9216, 0, 0, 0, 0, 0, 0, 8448, 8448, 0, 82, 82, 0, 8448, 82, 8448, 8448, 8448, 82, 8448, 8448, 1281, 1538, 0, 0, 3389, 0, 0, 172, 0,
    1454, 109, 0, 82, 0, 0, 0, 0, 0, 112, 112, 6144, 109, 0, 0, 0, 0, 0, 1281, 1281, 8770, 0, 66, 0, 0, 0, 8770, 0, 0, 0, 10240, 0, 1281, 1538, 3389, 1281,
    1538, 3389, 3389, 3389, 3392, 3392, 133, 0, 4171, 0, 0, 66, 0, 66, 66, 66, 66, 66, 1281, 1538, 0, 0, 3389, 0, 0, 0, 151, 1432, 1689, 1538, 0, 0, 6578, 0, 0,
    0, 0, 0, 1281, 1538, 3389, 3392, 4171, 0, 0, 3923, 0, 0, 0, 3923, 0, 0, 0, 11264, 0, 0, 0, 0, 0, 3469, 0, 0, 0, 1376, 1634, 0, 3389, 3427, 0, 3392, 0, 116,
    3392, 0, 0, 0, 0, 65, 62, 0, 0, 3428, 0, 0, 0, 0, 0, 0, 0, 4864, 3950, 3951, 3923, 3392, 0, 0, 0, 0, 0, 0, 0, 1375, 1633, 3457, 3950, 3389, 0, 0, 0, 0,
    1281, 1407, 1538, 1664, 3458, 3460, 133, 4231, 0, 0, 0, 183, 240, 0, 183, 0, 3389, 3482, 3392, 3483, 133, 133, 4254, 0, 0, 67, 1860, 1861, 0, 0, 0, 0, 113,
    3392, 0, 0, 3392, 0, 0, 121, 0, 146, 0, 0, 0, 0, 0, 4513, 3980, 3392, 0, 164, 0, 0, 70, 0, 70, 0, 0, 0, 0, 156, 133, 0, 0, 166, 0, 3389, 0, 0, 0, 0, 1454,
    1711, 3504, 3505, 0, 4171, 4275, 0, 0, 0, 184, 0, 0, 0, 168, 62, 0, 0, 0, 0, 58, 4534, 183, 0, 186, 0, 188, 0, 190, 3527, 0, 4296, 0, 0, 4555, 183, 204, 0,
    206, 0, 207, 0, 209, 0, 0, 0, 184, 0, 0, 184, 0, 0, 0, 4352, 222, 0, 0, 224, 0, 0, 71, 7680, 71, 0, 0, 0, 0, 187, 0, 0, 0, 0, 133, 4171, 0, 0, 225, 0, 0, 0,
    0, 1281, 1538, 3389, 3392, 0, 0, 4171, 0, 0, 0, 0, 0, 58, 59, 62, 65, 102, 3392, 4325, 0, 0, 183, 231, 0, 0, 0, 194, 0, 1281, 1538, 3389, 3392, 0, 4171,
    4171, 0, 0, 0, 75, 0, 0, 0, 80, 233, 0, 0, 0, 4171, 0, 236, 0, 0, 72, 0, 72, 0, 0, 0, 0, 3746, 0, 0, 0, 0, 169, 0, 0, 0, 1281, 1538, 3389, 0, 0, 4513, 3980,
    3392, 0, 0, 0, 0, 208, 0, 0, 0, 0, 146, 0, 0, 0, 0, 121, 0, 0, 0, 0, 115, 3392, 0, 0, 0, 4534, 183, 0, 0, 0, 0, 0, 0, 1281, 1281, 0, 0, 4352, 222, 0, 0, 0,
    0, 0, 1476, 1733, 3526, 0, 0, 4513, 3980, 3392, 0, 144, 0, 167, 0, 0, 210, 0, 4534, 183, 0, 144, 0, 167, 0, 0, 0, 0, 0, 0, 4352, 222, 0, 144, 167, 0, 3389,
    0, 0, 0, 0, 1454, 3392, 4325, 0, 0, 183, 231, 0, 167, 4534, 183, 0, 0, 0, 0, 0, 191, 0, 0, 191, 0, 0, 0, 0, 1281, 1538, 3389, 3392, 0, 4171, 4171, 180, 0,
    191, 0, 0, 0, 4171, 0, 236, 0, 0, 73, 13824, 13897, 0, 0, 0, 0, 5120, 5120, 0, 5120, 191, 0, 0, 239, 0, 0, 241, 0, 0, 74, 0, 74, 0, 0, 0, 0, 5632, 5632, 0,
    5632, 191, 0, 12032, 239, 0, 0, 241, 0, 0, 102, 0, 0, 0, 0, 0, 114, 114, 0, 3392, 4325, 11520, 0, 183, 231, 0, 0, 0, 221, 0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
    1281, 0, 0, 0, 9047, 0, 9047, 9047, 9047, 0, 9047, 9047, 0, 0, 0, 8960, 9047, 9047, 1281, 1538, 0, 0, 3389, 0, 0, 150, 0, 1432, 1689, 9216, 9216, 0, 0, 0,
    0, 0, 0, 1281, 1538, 0, 9216, 0, 0, 0, 0, 0, 9216, 0, 0, 0, 0, 9472, 0, 9472, 0, 0, 0, 0, 228, 1281, 1538, 3389, 2304, 2048, 0, 0, 0, 0, 0, 0, 4608, 0, 0,
    9728, 9728, 0, 0, 0, 0, 9728, 0, 9728, 9728, 9728, 0, 9728, 9822, 1281, 1538, 0, 0, 3389, 0, 0, 0, 234, 4171, 0, 236, 237, 3389, 3389, 0, 3389, 0, 0, 0,
    3392, 0, 4171, 0, 0, 0, 183, 183, 0, 3389, 3389, 3389, 0, 0, 3392, 0, 66, 66, 66, 0, 0, 0, 0, 0, 0, 768, 951, 0, 0, 4513, 0, 3392, 0, 0, 0, 0, 768, 768, 0,
    0, 0, 11008, 0, 11008, 11008, 11008, 0, 11008, 11008, 0, 0, 0, 0, 11008, 0, 0, 0, 0, 0, 3392, 0, 143, 11008, 1281, 1538, 0, 0, 3389, 0, 0, 0, 239, 0, 0,
    241, 0, 62, 62, 0, 62, 0, 0, 0, 65, 0, 102, 0, 0, 0, 184, 184, 62, 62, 62, 0, 65, 62, 62, 62, 0, 62, 62, 0, 62, 62, 62, 0, 0, 65, 0, 0, 65, 0, 0, 120, 0,
    62, 1281, 1538, 62, 62, 3389, 65, 65, 102, 0, 0, 184, 184, 0, 0, 0, 0, 0, 0, 0, 5376, 62, 62, 0, 0, 0, 0, 58, 58, 59, 59, 62, 65, 134, 4171, 0, 0, 0, 239,
    0, 10752, 241, 0, 145, 62, 0, 0, 0, 0, 58, 59, 0, 62, 0, 0, 0, 0, 0, 3392, 0, 144, 62, 62, 65, 65, 134, 133, 102, 0, 0, 117, 0, 85, 1878, 0, 1880, 59, 62,
    65, 0, 102, 102, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0, 3923, 0, 0, 11264, 0, 11264, 0, 0, 0, 0, 3392, 3389, 0, 0, 3389, 3389, 0, 3389, 0, 76, 76, 3392, 0,
    4171, 201, 0, 0, 183, 183, 76, 3389, 3389, 3389, 0, 0, 3392, 0, 67, 1860, 1861, 0, 0, 0, 66, 66, 0, 1281, 1281, 0, 0, 3389, 170, 0, 0, 0, 1454, 0, 10496, 0,
    1494, 1751, 3544, 3545, 4314, 3392, 4325, 0, 230, 183, 231, 0, 0, 0, 768, 0, 0, 768, 0, 0, 0, 4171, 0, 0, 0, 107, 4460, 3389, 3389, 0, 0, 0, 123, 1281,
    1407, 0, 0, 6144, 0, 112, 3392, 0, 0, 3446, 0, 0, 0, 0, 63, 60, 0, 0, 0, 0, 4513, 112, 3392, 0, 0, 0, 0, 3923, 3923, 0, 0, 0, 238, 0, 239, 0, 0, 241, 0, 0,
    138, 0, 0, 0, 0, 0, 117, 117, 0, 1538, 1664, 3458, 3460, 133, 4231, 0, 12288, 0, 160, 4513, 112, 3392, 0, 0, 165, 1711, 3504, 3505, 0, 4171, 4275, 0, 181,
    0, 0, 4513, 113, 3392, 0, 0, 0, 0, 4171, 0, 183, 0, 4534, 183, 0, 0, 0, 0, 189, 0, 0, 145, 0, 168, 0, 0, 0, 0, 1538, 0, 0, 0, 6656, 0, 0, 0, 6656, 0, 219,
    0, 4352, 222, 0, 0, 0, 0, 0, 7680, 0, 0, 0, 0, 3389, 148, 0, 0, 0, 1281, 1538, 0, 0, 3389, 0, 0, 0, 0, 1281, 1281, 3389, 3389, 0, 0, 0, 124, 1281, 1281, 0,
    137, 0, 0, 0, 0, 0, 0, 7168, 0, 0, 3475, 0, 0, 0, 0, 1281, 1538, 0, 0, 0, 0, 0, 7168, 7168, 7168, 0, 0, 0, 7168, 0, 0, 4171, 103, 0, 0, 0, 0, 0, 13824, 0,
    0, 3389, 3389, 0, 0, 0, 125, 1281, 1281, 0, 3389, 0, 149, 0, 0, 1281, 1538, 0, 0, 5376, 0, 0, 0, 0, 195, 1476, 1733, 3526, 3389, 3389, 0, 3389, 0, 77, 77,
    3392, 0, 4171, 202, 0, 0, 183, 183, 77, 3389, 3389, 3389, 0, 0, 3392, 0, 112, 3392, 0, 0, 0, 0, 0, 3584, 0, 0, 0, 0, 0, 0, 4171, 104, 0, 106, 0, 0, 0, 1494,
    1751, 3544, 3545, 4314, 3389, 3389, 0, 0, 0, 126, 1281, 1281, 0, 6144, 0, 0, 0, 3392, 0, 121, 3389, 3389, 3392, 3392, 133, 133, 4171, 159, 3389, 3389, 0,
    3389, 0, 78, 78, 3392, 101, 0, 0, 0, 0, 0, 0, 768, 0, 3389, 3389, 3389, 78, 3392, 3389, 3389, 3389, 76, 3392, 3389, 3389, 3389, 0, 3392, 3389, 3389, 3389,
    0, 3389, 3389, 78, 3389, 3389, 3389, 0, 0, 3392, 0, 113, 3392, 0, 0, 0, 0, 0, 5376, 0, 0, 0, 0, 4171, 0, 105, 0, 0, 0, 0, 4171, 12011, 183, 0, 146, 3389, 0,
    0, 0, 0, 1281, 1538, 0, 60, 0, 0, 0, 0, 0, 133, 0, 0, 146, 0, 3389, 0, 0, 0, 0, 1281, 1538, 205, 0, 146, 0, 0, 0, 0, 0, 115, 115, 0, 0, 220, 0, 183, 0, 0,
    0, 0, 0, 169, 0, 0, 3389, 0, 171, 0, 0, 1281, 0, 183, 185, 0, 0, 0, 0, 0, 116, 116, 0, 0, 0, 4171, 0, 0, 13056, 0, 0, 0, 4491, 0, 0, 0, 0, 0, 3392, 0, 0, 0,
    0, 3389, 3450, 0, 0, 0, 0, 1281, 1281, 6144, 0, 0, 0, 0, 3392, 0, 0, 0, 4491, 0, 112, 112, 0, 0, 192, 0, 0, 0, 1281, 1538, 3389, 3389, 0, 0, 0, 0, 1281,
    1407, 212, 0, 0, 1281, 1538, 3389, 3392, 4171, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 211, 3389, 3389, 0, 3389, 0, 79, 79, 3392, 4171, 0, 0, 183, 183, 232, 0,
    0, 162, 0, 0, 0, 0, 1281, 0, 0, 0, 0, 0, 6912, 0, 3389, 3389, 3389, 79, 3392, 3389, 3389, 3389, 77, 3392, 3389, 3389, 3389, 0, 3412, 3418, 3389, 3389, 79,
    3389, 3389, 3389, 0, 0, 3392, 0, 114, 3392, 0, 0, 0, 0, 0, 7936, 7936, 0, 12544, 0, 0, 0, 0, 0, 0, 0, 6656, 0, 0, 6144, 0, 0, 3392, 0, 0, 0, 4491, 0, 113,
    113, 0, 0, 169, 3389, 0, 0, 0, 0, 1281, 0, 0, 9984, 0, 4171, 0, 183, 0, 0, 193, 0, 0, 1281, 1538, 3389, 3389, 0, 0, 0, 0, 1281, 1281, 3389, 3389, 0, 3389,
    0, 0, 0, 3412, 0, 3389, 3418, 3389, 0, 0, 3412, 0, 0, 213, 1281, 1538, 3389, 3392, 4171, 0, 0, 183, 183, 0, 0, 0, 112, 3392, 163, 0, 0, 0, 114, 3392, 0, 0,
    0, 0, 4171, 0, 236, 0, 12800, 0, 0, 0, 3392, 0, 0, 0, 0, 4864, 0, 0, 4864, 0, 4864, 4864, 4864, 4864, 1538, 1538, 3389, 3392, 133, 4171, 136, 0, 0, 227, 0,
    0, 1281, 1538, 3389, 1376, 1634, 3389, 3389, 3427, 3392, 3392, 0, 4171, 0, 13312, 0, 183, 183, 13568, 0, 0, 0, 13568, 13568, 0, 13568, 13824, 0, 0, 0,
    13824, 0, 0, 0, 0, 4864, 4864, 0, 0, 0, 13824, 13824, 0, 0, 0, 0, 13824, 0, 13824, 0, 13824, 0, 13824, 13824, 1281, 1538, 0, 0, 3389, 0, 0, 0, 4491, 3980,
    3950, 3951, 0, 14080, 14080, 0, 0, 0, 0, 0, 0, 9216, 0, 14080, 0, 0, 0, 0, 0, 14080, 0, 14080, 0, 0, 14080, 0, 1861, 1281, 1538, 0, 0, 3389, 0, 0, 0, 5120,
    0, 0, 1281, 1281, 0, 3389, 0, 3392, 133, 133, 4171, 0, 0, 1795, 0, 5, 0, 0, 0, 0, 102, 0, 184, 0, 0, 145, 0, 0, 0, 0, 112, 3392, 0, 0, 3392, 0, 0, 0, 0,
    2816, 3072, 2560, 3392, 6578, 4171, 0, 0, 0, 0, 183, 183, 0, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    228, 121, 125, 236, 131, 140, 144, 148, 150, 154, 160, 158, 164, 177, 167, 231, 181, 185, 189, 256, 213, 217, 221, 225, 240, 250, 256, 198, 245, 201, 274,
    314, 231, 249, 195, 202, 273, 313, 169, 254, 262, 271, 206, 315, 171, 258, 203, 204, 313, 241, 257, 203, 205, 315, 234, 268, 205, 173, 265, 278, 312, 207,
    208, 281, 209, 288, 310, 345, 284, 292, 296, 300, 304, 319, 323, 207, 207, 207, 207, 334, 207, 207, 207, 192, 207, 127, 338, 207, 207, 207, 351, 135, 207,
    207, 342, 207, 207, 134, 207, 127, 350, 207, 352, 136, 207, 349, 207, 207, 134, 207, 307, 207, 351, 356, 330, 329, 351, 327, 358, 325, 207, 1048576,
    33554432, 67108864, 134217728, 268435456, 536870912, 0, 0, 0, 28672, 268435520, 64, 64, 64, 128, 256, 512, 0, 0, 12288, 536875008, 16777216, 100663360,
    268435520, 12288, 100667392, 100667456, 536875072, 17825856, 117444608, 117444672, 4032, 536907840, 4032, 1073741824, 1207959552, -2037944316, -2037944252,
    -2036903868, 386928712, 675319872, 692097024, 1207959552, 1207959616, 692097024, -1768468412, 692097088, 16, 32, 4096, 12288, 16777216, 32768, 0, 4, 8,
    159154240, 159154240, -2020118460, 427589696, 12288, 16777216, 16777216, 17825856, 16777280, 1024, 2048, 512, 256, 128, 32768, 0, 0, 960, 0, 0, 65536,
    8404992, 8404992, 8536064, 8388608, 12292, 8, 4194304, 4194304, 4194304, 0, 0, 0, 0, 4, 8, 8417280, 8536064, 8536064, 12292, 262144, 17825864, 4194304,
    262208, 8409088, 4100, 1310784, 20709440, 18088000, 0, 16, 16, 32, 64, 4096, 4096, 12288, 12288, 32768, 0, 0, 0, 1048640, 32, 32, 4096, 12288, 32768,
    8388608, 8388608, 8388608, 8388608, 16777216, 16777216, 32768, 0, 0, 32768, 32768, 0, 0, 0, 65536, 4, 4, 65536, 4, 8, 4194304, 0, 0, 4, 4, 8, 4194304,
    4194304, 4194304, 4194304, 4100, 0, 0, 8, 0, 4, 8, 1048576, 2097152, 4194304, 4194312, 4194312, 2064, 2048, 0, 0, 4194304, 2098181, 2099216, 1044480,
    1044480, 0, 4194314, 2098213, 2098213, 2093056, 0, 0, 4194318, 3146789, 2093056, 6292517, 0, 4096, 24576, 0, 2097152, 4, 0, 0, 0, 16, 32, 4096, 6292517,
    1049637, 3146789, 4194312, 3146789, 2099173, 0, 0, 512, 0, 24576, 0, 0, 0, 4096, 61440, 65536, 393216, 524288, 32768, 65536, 131072, 524288, 28672, 131072,
    524288, 0, 2097152, 4194312, 4194304, 28672, 524288, 0, 0, 0, 64, 128, 128, 512, 0, 0, 512, 16384
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    'important',
    'STRING_CONTENT1',
    'STRING_CONTENT2',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'COMMENT',
    &quot;'&quot;&quot;'&quot;,
    &quot;''''&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'amzn-mobi7'&quot;,
    &quot;'and'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 241 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>          <!-- ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                         'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 51">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(51, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'amzn-mobi7' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'amzn-mobi7' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>      <!-- S | '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                         'not' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(43, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                          'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 52                                          (: '{' :)
                       or $state[$p:lk] = 3334">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                              'not' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 27                                    (: '(' :)
                             or $state[$p:lk] = 1734">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(40, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(6, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 24">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(24, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(49, $input, $state)"/>  <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 54                                            (: '}' :)
                     or $state[$p:lk] = 3462">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(54, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>      <!-- S | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_atrule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-simple_atrule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(38, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(39, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-STRING($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-simple_atrule-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- URL | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- important | S | IDENT | COMMA | COMMENT | '"' | "'" | ')' | '/' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(54, $input, $state)"/> <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | COMMENT | '"' | "'" | '-' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 33                                         (: '/' :)
                      and $state[$p:lk] != 134                                        (: S URL :)
                      and $state[$p:lk] != 774                                        (: S IDENT :)
                      and $state[$p:lk] != 838                                        (: S FUNCTION :)
                      and $state[$p:lk] != 902                                        (: S NUMBER :)
                      and $state[$p:lk] != 1030                                       (: S HEX :)
                      and $state[$p:lk] != 1094                                       (: S PERCENTAGE :)
                      and $state[$p:lk] != 1158                                       (: S PLUS :)
                      and $state[$p:lk] != 1478                                       (: S DIMENSION :)
                      and $state[$p:lk] != 1606                                       (: S '&quot;' :)
                      and $state[$p:lk] != 1670                                       (: S &quot;'&quot; :)
                      and $state[$p:lk] != 1990">                                   <!-- S '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         DIMENSION | '"' | "'" | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- important | S | IDENT | COMMA | COMMENT | '"' | "'" | ')' | '/' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(54, $input, $state)"/> <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | COMMENT | '"' | "'" | '-' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 33                                         (: '/' :)
                      and $state[$p:lk] != 134                                        (: S URL :)
                      and $state[$p:lk] != 774                                        (: S IDENT :)
                      and $state[$p:lk] != 838                                        (: S FUNCTION :)
                      and $state[$p:lk] != 902                                        (: S NUMBER :)
                      and $state[$p:lk] != 1030                                       (: S HEX :)
                      and $state[$p:lk] != 1094                                       (: S PERCENTAGE :)
                      and $state[$p:lk] != 1158                                       (: S PLUS :)
                      and $state[$p:lk] != 1478                                       (: S DIMENSION :)
                      and $state[$p:lk] != 1606                                       (: S '&quot;' :)
                      and $state[$p:lk] != 1670                                       (: S &quot;'&quot; :)
                      and $state[$p:lk] != 1990">                                   <!-- S '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(29, $input, $state)"/>  <!-- S | COMMA | COMMENT | ';' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 390                                          (: S S :)
                    and $state[$p:lk] != 1286">                                     <!-- S COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-values-3($input, $state)"/>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-values-4($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-values-5($input, $state)"/>
          <xsl:sequence select="p:parse-values-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-values-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         DIMENSION | '"' | "'" | '-' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(46, $input, $state)"/> <!-- important | S | IDENT | COMMA | COMMENT | '"' | "'" | ')' | '/' |
                                                                                          ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 281">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 346">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 102681                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 106842">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 2188">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consume(34, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 53">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (12,                                          (: IDENT :)
                                         29)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(24, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3404,                                  (: IDENT '|' :)
                                               3421)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 396                                           (: IDENT S :)
                     or $state[$p:lk] = 821                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1804                                          (: IDENT ')' :)
                     or $state[$p:lk] = 52556                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 52573">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 15">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 32">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 42">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 34">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- URL | S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | ')' | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 18">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 2">                                       <!-- URL -->
            <xsl:variable name="state" select="p:consume(2, $input, $state)"/>      <!-- URL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 31">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(31, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 14">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(14, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 12">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(12, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 20">                                      <!-- COMMA -->
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-STRING($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- URL | S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'STRING', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(36, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 53                                            (: '|' :)
                     or $state[$p:lk] = 3404">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 43">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 11">                                  <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(36, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-STRING($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 29">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | ')' |
                                                                                         '.' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 53                                            (: '|' :)
                     or $state[$p:lk] = 3421">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '*' -->
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 53">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(53, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | ')' |
                                                                                         '.' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 53                                            (: '|' :)
                     or $state[$p:lk] = 3404">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | '.' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 32                                         (: '.' :)
                      and $state[$p:l1] != 34                                         (: ':' :)
                      and $state[$p:l1] != 37                                         (: '@' :)
                      and $state[$p:l1] != 42">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 15">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(15, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 32">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 42">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 34">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 37">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 32">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 42">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 34">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 37">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | '.' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 32                                         (: '.' :)
                      and $state[$p:l1] != 34                                         (: ':' :)
                      and $state[$p:l1] != 37                                         (: '@' :)
                      and $state[$p:l1] != 42">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 29                                            (: '*' :)
                     or $state[$p:l1] = 53">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 53">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (12,                                    (: IDENT :)
                                               29)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(53, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' |
                                                                                            '.' | ':' | '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (3404,                            (: IDENT '|' :)
                                                     3421)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 396                                     (: IDENT S :)
                           or $state[$p:lk] = 821                                     (: '|' IDENT :)
                           or $state[$p:lk] = 972                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1164                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1228                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1292                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1356                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1420                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1548                                    (: IDENT COMMENT :)
                           or $state[$p:lk] = 1740                                    (: IDENT '(' :)
                           or $state[$p:lk] = 2060                                    (: IDENT '.' :)
                           or $state[$p:lk] = 2188                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2380                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2700                                    (: IDENT '[' :)
                           or $state[$p:lk] = 3340                                    (: IDENT '{' :)
                           or $state[$p:lk] = 52556                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 52573">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 24                                          (: COMMENT :)
                       or $state[$p:lk] = 52                                          (: '{' :)
                       or $state[$p:lk] = 3334">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 24">                                       <!-- COMMENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- S | IDENT | COMMENT | '"' | "'" | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(32, $input, $state)"/> <!-- IDENT | COMMENT | '"' | "'" | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 35">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(31, $input, $state)"/> <!-- S | IDENT | COMMENT | '"' | "'" | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 419">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(30, $input, $state)"/> <!-- IDENT | COMMENT | '"' | "'" | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 803                                        (: ';' IDENT :)
                      and $state[$p:lk] != 1635                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 1699                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 2246                                       (: S ';' :)
                      and $state[$p:lk] != 49571                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 102819                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 106915">                                 <!-- ';' S "'" -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(35, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>  <!-- S | IDENT | '"' | "'" -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>        <!-- IDENT | COMMENT | '"' | "'" | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 24">                                     <!-- COMMENT -->
            <xsl:variable name="state" select="p:lookahead2(30, $input, $state)"/>  <!-- IDENT | COMMENT | '"' | "'" | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 54                                            (: '}' :)
                     or $state[$p:lk] = 1560                                          (: COMMENT COMMENT :)
                     or $state[$p:lk] = 3480">                                      <!-- COMMENT '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(35, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>    <!-- S | IDENT | COMMENT | '"' | "'" | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- COMMENT | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 24">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(24, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>          <!-- S | IDENT | COMMENT | '"' | "'" | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
    <xsl:variable name="state" select="p:consume(54, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 38                                      (: '@charset' :)
                           or $state[$p:l1] = 39                                      (: '@import' :)
                           or $state[$p:l1] = 41">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
          <xsl:sequence select="p:parse-css-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   : Memoize the backtracking result that was computed at decision point
   : $dpi for input position $e0. Reconstruct state from the parameters.
   :
   : @param $state the lexer state to be restored.
   : @param $update the lexer state containing updates.
   : @param $dpi the decision point id.
   : @param $e0 the input position.
   : @param $v the id of the successful alternative.
   : @param $lk the new lookahead code.
   : @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 1 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 1 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>