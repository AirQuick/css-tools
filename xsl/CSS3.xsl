<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Fri May 5, 2017 14:27 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> 
     see http://bottlecaps.de/rex/ -->
<!-- REx command line: CSS3.ebnf -tree -main -xslt -ll 3 -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="14"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 22, 20, 20, 24, 25, 9, 26, 27, 9, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 31, 32, 33, 34, 30, 9, 35, 29, 36, 37, 38, 39, 30, 40, 41, 30, 30, 42, 43, 44, 45, 46, 30, 47, 48, 49, 50, 30, 30, 51, 52, 30, 53, 54, 55,
    56, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 196, 208, 180, 224, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 57, 1, 0, 2, 3, 0, 0, 57, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 22, 20, 20, 24, 25, 9, 26, 27, 9, 35, 29, 36,
    37, 38, 39, 30, 40, 41, 30, 30, 42, 43, 44, 45, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 32, 33, 34,
    30, 46, 30, 47, 48, 49, 50, 30, 30, 51, 52, 30, 53, 54, 55, 56, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 30, 30
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 1072, 1073
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 1856, 1872, 1888, 1904, 4518, 5110, 1934, 1958, 2135, 1983, 5236, 5609, 5291, 2035, 5966, 4445, 2062, 2105, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 1856, 1872, 1888, 1904, 4518, 5110, 2129, 4795, 2135, 2151, 5236, 6333, 4373, 4037,
    5803, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 1856, 1872, 1888, 1904, 4518, 5893, 2129, 2194,
    2232, 2282, 3610, 2325, 4917, 2341, 2370, 3149, 2413, 2429, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 4832, 2850, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 2519, 2560, 2601, 5930, 3558, 2612, 3558, 2628, 4726, 2655, 5079, 2677, 4751, 6184, 2717, 3780, 6171, 2011, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 6099, 2744, 2759, 3558, 4006, 3558, 2574, 6188, 2784, 6192, 3866, 4841, 4549, 3213, 2487,
    2071, 2208, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 2857, 3558, 4832, 3558, 2258, 3558, 2247, 6188, 2453,
    6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4832,
    2216, 2258, 2806, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 4832, 3558, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3182, 2824, 2839, 5461, 3558, 2639, 3558, 3301, 4553, 2873, 4557, 2915, 5470, 6455, 4492, 2927, 6442, 2943,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 5996, 4866, 3752, 2967, 5999, 2585, 3501, 4507, 2992, 2784, 4681, 3866,
    2997, 4671, 4152, 3013, 2071, 2208, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 6056, 6065, 6045, 4832, 3558, 4006,
    3558, 2574, 6188, 2784, 6192, 3937, 4841, 3041, 3286, 2499, 2080, 3065, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    6220, 6231, 4311, 3089, 3558, 2728, 3558, 2385, 6188, 3115, 6192, 3137, 2768, 3178, 4109, 3878, 3165, 5071, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3198, 4832, 2459, 3247, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 2808, 3271, 4832, 5202, 3328, 3558, 2574, 6188, 2784, 6192, 3866, 4841, 4549,
    3213, 2487, 2071, 2208, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3371, 3385, 3357, 3401, 2266, 4174, 1942, 3426,
    5232, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3121,
    3517, 3532, 3073, 2258, 3557, 2247, 6188, 3575, 6192, 3626, 5939, 3654, 3980, 3792, 2544, 3678, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3559, 3025, 6302, 3702, 3224, 3715, 3558, 2297, 6188, 3739, 3049, 3626, 5939, 3654, 3980, 3792, 2544, 3678, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3768, 3601, 5176, 3638, 3808, 3835, 3851, 3906, 3922, 3965, 4022, 4066, 4094, 4137,
    4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3768, 3601, 5176, 3638, 4230, 3835, 4255, 4298,
    4706, 4327, 5012, 4355, 4094, 3890, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3768, 3601,
    5176, 3638, 4389, 3835, 4416, 4461, 4706, 4477, 4534, 4573, 4599, 3890, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3768, 3601, 5176, 3638, 4230, 3835, 4255, 4298, 4625, 4327, 4656, 4615, 4094, 4641, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3768, 3601, 5176, 3638, 4389, 3835, 4416, 4461, 4706, 4477, 5012, 4573, 4599, 3890, 4190, 4206,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 5770, 5763, 6391, 4697, 3558, 4006, 3558, 2574, 6188, 2784, 6192, 3866,
    4841, 4549, 3213, 2487, 2071, 2208, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 6091, 3662, 6095, 4832, 3558, 4006,
    3558, 2574, 6188, 2784, 6192, 3866, 4841, 4549, 3213, 2487, 2071, 2208, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 2437, 3558, 5668, 4722, 4006, 3558, 2574, 6188, 2784, 6192, 3866, 4841, 4549, 3213, 2487, 2071, 2208, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 2661, 4832, 3558, 5529, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 5041, 4742, 3558, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515,
    3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4857, 4804, 4282, 1942, 3835,
    5390, 4298, 4706, 4327, 5012, 4355, 4094, 3890, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767,
    4820, 4882, 3255, 4174, 1942, 3426, 5232, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 5776, 5499, 4907, 3558, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4947, 4961, 4933, 5002, 2397, 5028, 5119, 5057, 4975, 5095, 5902, 5135, 3099, 5164, 4986, 3949,
    5151, 5192, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3448, 2019, 3558, 4832, 3558, 2258, 3558, 2247, 6188, 2453,
    6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3231, 3558, 4832,
    3558, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 4781, 5218, 4820, 4857, 4804, 4282, 2976, 3835, 5862, 4298, 4706, 4327, 6361, 4355, 4094, 3477, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 5252, 4078, 4050, 5282, 3835, 5307, 4298, 4706, 4327, 5012, 4355, 4094, 3890, 5360, 4206,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4857, 4804, 2309, 1942, 3835, 5718, 4298, 4706, 4327,
    5012, 4355, 4094, 3890, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4857, 4078, 4282,
    5376, 5406, 5422, 5486, 4583, 4327, 5012, 5515, 4094, 3890, 5553, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    4781, 4767, 4820, 4857, 4339, 4282, 5569, 3835, 5594, 4298, 5625, 4327, 5012, 4355, 4094, 3890, 4190, 4206, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4882, 3255, 4174, 3410, 3426, 5232, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4882, 5344, 2354, 5656, 3426, 5684, 3464, 3312, 4270, 4239, 3493,
    5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4882, 3255, 4400, 4364, 3426,
    5232, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767,
    4820, 4882, 5537, 2886, 5704, 5734, 5792, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 4781, 4767, 4820, 5819, 3255, 1997, 5449, 3426, 5232, 3464, 5688, 5437, 4239, 3493, 5966, 2701, 2089, 2105, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 5848, 4820, 4882, 3255, 4174, 3541, 3426, 6261, 5878, 4121, 5322, 4239, 3493, 5966, 2701,
    2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4882, 1967, 4174, 5918, 3426, 5955, 5982,
    5688, 4270, 4239, 6015, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 6031,
    3723, 3819, 3588, 3426, 5232, 3464, 2899, 4270, 3341, 6081, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 4781, 6115, 4820, 4882, 3255, 4174, 1942, 3426, 5232, 3464, 5688, 4270, 5266, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4882, 3255, 4174, 4163, 3426, 6129, 3464, 2046, 4431, 4239, 6156, 6140, 6493, 2062, 6208,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 6247, 4882, 3255, 4174, 1942, 3426, 5232, 3464, 5688, 4270,
    4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4781, 4767, 4820, 4882, 3255, 4174,
    4163, 3426, 5232, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    4781, 4767, 4820, 4882, 3255, 4174, 1942, 6288, 5232, 3464, 5688, 4270, 4239, 3493, 5966, 2701, 2062, 2105, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 4891, 6463, 3686, 4832, 3558, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 4214, 6318, 5832, 6349, 3558, 2258, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515,
    3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 2951, 2178, 2166, 4832, 3558, 2258, 3558, 2247,
    6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 2113,
    2790, 4832, 3558, 5336, 3558, 2247, 6188, 2453, 6192, 2475, 5939, 2515, 3995, 2689, 2535, 3440, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 1856, 1872, 1888, 1918, 4518, 5749, 2129, 6377, 6407, 6427, 6411, 5640, 5578, 6479, 6272, 2701, 2062, 2105, 3558, 3558, 3558, 3558,
    3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 2561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2561, 2561, 0, 0, 0, 59, 2561, 2561, 0, 2561, 59, 0, 2623, 0,
    2623, 0, 2561, 2561, 2561, 2630, 2561, 2631, 2637, 80, 2631, 2561, 59, 2637, 2637, 2623, 2561, 59, 82, 2623, 2643, 2643, 2643, 59, 2623, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 59, 0, 0, 0, 2623, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 59, 0, 0, 0, 2623, 0, 103, 103, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 5683, 5688, 0, 0, 0,
    0, 0, 0, 5683, 5683, 53, 53, 54, 54, 5688, 5688, 89, 89, 0, 0, 0, 0, 7749, 0, 0, 0, 5683, 0, 102, 5683, 0, 5688, 5688, 0, 89, 0, 144, 0, 0, 148, 12439, 0,
    7749, 7749, 0, 0, 0, 0, 107, 0, 0, 111, 5683, 53, 54, 5688, 89, 0, 0, 0, 7749, 0, 0, 0, 89, 121, 145, 148, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20480,
    0, 0, 20480, 0, 120, 148, 121, 121, 7749, 0, 0, 187, 0, 0, 135, 0, 163, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 144, 173, 173, 145, 144, 0, 144, 173, 145, 120,
    148, 121, 0, 187, 0, 144, 173, 145, 120, 148, 121, 0, 0, 0, 144, 173, 145, 120, 148, 121, 0, 1536, 0, 144, 173, 145, 120, 148, 121, 273, 187, 0, 144, 173,
    145, 120, 148, 121, 0, 187, 144, 173, 145, 148, 187, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 68, 0, 103, 103, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 5683, 53, 54, 5688, 0, 89, 0, 144, 0, 0, 148, 12439, 0, 0, 7749, 0, 0, 0, 0, 107, 0, 0, 24064, 0, 0, 0, 0, 0, 0, 24064, 24064, 24064, 0, 0, 0, 0,
    24064, 0, 24064, 0, 24064, 0, 0, 0, 0, 24064, 0, 24064, 5744, 0, 114, 0, 116, 0, 5750, 89, 89, 0, 0, 0, 0, 7833, 0, 0, 144, 173, 145, 148, 0, 173, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 8704, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5744, 114, 116, 5750, 0, 53, 53, 54, 54, 0, 0, 144, 148, 0, 89, 0, 0, 0, 0, 0,
    53, 54, 0, 0, 0, 0, 0, 7749, 0, 0, 0, 0, 0, 0, 5683, 0, 0, 5688, 0, 89, 0, 177, 0, 0, 181, 12439, 0, 0, 7833, 0, 0, 0, 0, 190, 0, 53, 53, 54, 54, 0, 0, 144,
    148, 12439, 89, 0, 0, 0, 0, 0, 5745, 115, 117, 5751, 89, 20992, 0, 0, 7806, 0, 8320, 0, 0, 208, 181, 12439, 0, 211, 0, 7833, 0, 0, 0, 0, 0, 0, 0, 219, 208,
    181, 89, 211, 7833, 0, 0, 238, 0, 0, 0, 0, 242, 0, 0, 0, 109, 5683, 53, 54, 5688, 89, 0, 0, 0, 7749, 127, 0, 0, 5744, 114, 116, 5750, 177, 206, 89, 231,
    208, 181, 211, 7833, 0, 0, 238, 0, 53, 53, 54, 54, 0, 0, 146, 149, 0, 89, 0, 0, 0, 0, 0, 93, 0, 0, 0, 52, 0, 0, 52, 0, 57, 57, 0, 0, 177, 206, 231, 208,
    181, 211, 0, 238, 0, 177, 206, 231, 208, 181, 211, 0, 238, 177, 206, 231, 181, 238, 206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16896, 0, 0, 16896, 0, 173, 144,
    120, 148, 148, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9216, 0, 0, 9216, 144, 144, 148, 148, 148, 148, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 53, 54, 144, 173,
    145, 120, 148, 121, 0, 0, 0, 0, 53, 54, 144, 173, 145, 120, 148, 121, 0, 0, 1536, 0, 144, 148, 148, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
    144, 173, 173, 144, 148, 148, 0, 0, 0, 144, 173, 173, 144, 148, 148, 0, 187, 0, 144, 173, 173, 144, 148, 148, 53, 0, 0, 0, 53, 0, 53, 0, 53, 0, 0, 0, 0, 53,
    0, 53, 53, 54, 54, 0, 0, 120, 121, 0, 89, 0, 0, 0, 0, 0, 53, 54, 6656, 89, 0, 0, 0, 7749, 0, 0, 0, 53, 53, 53, 0, 0, 53, 53, 0, 0, 0, 53, 0, 0, 0, 0, 0, 53,
    54, 0, 120, 0, 0, 0, 7749, 0, 0, 0, 0, 6144, 6144, 54, 54, 0, 0, 120, 145, 0, 89, 0, 0, 0, 0, 0, 53, 54, 0, 121, 0, 0, 0, 7749, 0, 0, 0, 145, 89, 120, 148,
    148, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9728, 9728, 9728, 0, 89, 120, 148, 148, 148, 145, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 53, 54, 144, 173, 173, 144,
    148, 148, 0, 0, 0, 0, 53, 54, 144, 173, 145, 120, 148, 121, 7749, 0, 187, 0, 0, 6144, 54, 0, 89, 121, 145, 145, 120, 148, 145, 0, 0, 0, 0, 0, 53, 54, 0,
    122, 0, 0, 0, 7749, 0, 0, 0, 72, 72, 0, 69, 69, 72, 72, 69, 69, 69, 72, 69, 69, 69, 69, 69, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 53, 54, 0,
    144, 173, 173, 173, 174, 146, 145, 144, 120, 148, 148, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10752, 10752, 10752, 0, 0, 8704, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 10240, 54, 0, 0, 0, 54, 0, 54, 0, 54, 0, 0, 0, 0, 54, 0, 54, 54, 54, 0, 0, 54, 54, 0, 0, 0, 54, 0, 0, 0, 0, 0, 94, 94, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 64, 0, 0, 64, 0, 145, 144, 120, 89, 89, 121, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 110, 5683, 53, 54, 5688, 89, 0, 0, 0, 7749, 0, 0, 0, 195, 0, 0,
    0, 5683, 53, 54, 5688, 144, 173, 173, 145, 144, 144, 145, 148, 89, 89, 121, 0, 0, 0, 0, 187, 187, 0, 0, 0, 0, 53, 6144, 144, 120, 145, 145, 89, 121, 0, 0,
    187, 0, 0, 187, 144, 120, 145, 89, 187, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 0, 0, 0, 24064, 12800, 0, 0, 5683, 53, 54, 0, 6656, 5688, 0, 0, 0, 0,
    0, 0, 0, 5683, 5688, 0, 0, 0, 0, 0, 139, 5683, 0, 157, 6813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 6656, 144, 173, 173, 173, 145, 120, 0, 11264, 0, 0, 53, 54,
    144, 173, 145, 120, 148, 121, 0, 0, 0, 0, 58, 0, 58, 0, 58, 0, 0, 0, 0, 15418, 0, 15418, 120, 148, 121, 121, 0, 0, 0, 1536, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54,
    0, 144, 173, 12493, 145, 144, 0, 1536, 144, 173, 145, 148, 1536, 173, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 74, 0, 0, 96, 0, 0, 13824, 0, 0, 5683, 53, 54, 0, 0,
    5688, 89, 0, 0, 0, 0, 0, 0, 52, 86, 87, 57, 172, 173, 204, 204, 175, 147, 174, 144, 120, 148, 148, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14848, 0, 0, 0,
    144, 146, 148, 148, 148, 149, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 114, 116, 177, 206, 231, 208, 181, 211, 7833, 0, 238, 0, 0, 144, 173, 174, 146, 148, 149, 0,
    0, 0, 144, 173, 174, 146, 148, 149, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 9216, 9216, 0, 0, 0, 9216, 9216, 0, 0, 0, 9216, 0, 9216, 9216,
    9216, 0, 53, 54, 0, 144, 173, 145, 145, 120, 148, 121, 0, 0, 0, 0, 0, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 66, 0, 0, 9216, 9216, 0, 0, 53, 54,
    0, 0, 0, 0, 0, 7749, 0, 0, 0, 5683, 0, 0, 5683, 0, 5688, 5688, 0, 10240, 10240, 10240, 0, 0, 10240, 10240, 0, 0, 0, 10240, 0, 10240, 10240, 10240, 0, 53,
    54, 0, 144, 173, 145, 145, 120, 148, 121, 0, 0, 1536, 1536, 0, 53, 53, 6144, 6144, 0, 0, 145, 121, 0, 89, 0, 0, 0, 0, 0, 197, 0, 5683, 53, 54, 5688, 144,
    173, 173, 145, 144, 0, 10240, 10240, 0, 0, 53, 54, 0, 89, 0, 0, 0, 7749, 0, 0, 0, 223, 0, 0, 5683, 53, 54, 5688, 144, 173, 173, 173, 145, 120, 14409, 14414,
    50, 50, 50, 14414, 14409, 50, 50, 50, 14414, 50, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 55, 50, 0, 55, 50, 50, 0, 50, 0, 50, 0, 0, 0, 50, 50, 0, 50,
    50, 0, 5683, 5683, 53, 54, 0, 5688, 5688, 0, 0, 0, 0, 0, 0, 0, 5683, 5688, 0, 0, 136, 0, 0, 0, 5683, 5683, 53, 53, 54, 54, 5688, 5688, 120, 121, 0, 89, 0,
    0, 7749, 0, 0, 144, 173, 173, 148, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 145, 144, 120, 148, 148, 121, 0, 0, 7749, 7749, 0, 0, 187, 0,
    0, 0, 257, 53, 54, 258, 259, 260, 261, 262, 263, 7749, 264, 265, 0, 120, 148, 121, 121, 7749, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 6656, 0, 0, 0, 0, 0, 0, 0,
    74, 74, 0, 14848, 14848, 74, 74, 14848, 14848, 14848, 74, 14848, 14848, 14848, 14848, 14848, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 5683,
    5688, 0, 135, 0, 0, 0, 0, 5683, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 173, 144, 120, 148, 148, 121, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 11776,
    0, 0, 0, 5683, 5688, 0, 0, 0, 0, 0, 0, 5683, 5717, 53, 54, 0, 5688, 5720, 0, 0, 0, 0, 0, 0, 0, 5744, 114, 116, 5750, 177, 0, 0, 206, 12439, 144, 144, 148,
    148, 148, 148, 0, 0, 0, 0, 187, 187, 0, 0, 0, 0, 5745, 115, 117, 5751, 89, 0, 0, 0, 7806, 0, 8320, 7297, 144, 148, 148, 148, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
    0, 0, 16384, 0, 0, 0, 0, 16384, 0, 16384, 0, 187, 144, 173, 173, 148, 187, 173, 0, 0, 0, 0, 0, 0, 0, 0, 23040, 0, 0, 0, 23040, 23040, 23040, 0, 58, 0, 0,
    5683, 53, 54, 0, 0, 5688, 0, 58, 0, 0, 0, 58, 0, 0, 0, 53, 54, 0, 0, 0, 0, 0, 7749, 0, 0, 0, 5683, 0, 0, 5736, 0, 5688, 5737, 0, 173, 12464, 120, 148,
    12468, 121, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 12800, 12800, 0, 0, 12800, 12800, 12800, 0, 12800, 12800, 12800, 12800, 12800, 7243, 7243, 0, 0, 0, 7243, 7243,
    0, 0, 0, 7243, 0, 0, 0, 0, 0, 6144, 54, 89, 121, 145, 120, 148, 145, 0, 0, 0, 0, 53, 54, 144, 173, 173, 144, 148, 148, 0, 0, 187, 0, 7265, 7266, 0, 0, 0, 0,
    0, 5683, 5688, 132, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 89, 0, 0, 125, 7749, 0, 0, 0, 5772, 53, 141, 54, 142, 5688, 5775, 120, 121, 0, 89, 0, 0, 7834, 0,
    8348, 7297, 5683, 5688, 158, 0, 160, 0, 0, 0, 0, 0, 5800, 169, 170, 5803, 144, 120, 148, 148, 148, 121, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 53, 54, 144, 173,
    174, 146, 148, 149, 0, 0, 0, 0, 53, 54, 258, 259, 260, 261, 262, 263, 7749, 0, 265, 0, 145, 144, 178, 148, 148, 182, 0, 0, 7749, 7864, 0, 8378, 187, 189, 0,
    191, 0, 193, 0, 0, 0, 0, 0, 5831, 200, 201, 5834, 203, 173, 173, 207, 144, 120, 148, 148, 148, 121, 0, 0, 0, 0, 1536, 187, 0, 0, 0, 0, 86, 87, 172, 204,
    175, 147, 179, 150, 93, 0, 188, 0, 144, 209, 210, 148, 148, 212, 0, 7893, 0, 8407, 187, 216, 217, 0, 218, 0, 53, 54, 0, 144, 173, 173, 173, 144, 148, 148,
    0, 0, 187, 187, 0, 53, 54, 0, 144, 173, 173, 173, 144, 148, 148, 0, 0, 0, 0, 0, 53, 54, 0, 89, 0, 0, 0, 7749, 0, 0, 0, 220, 0, 0, 0, 0, 0, 5857, 226, 227,
    5860, 229, 230, 173, 173, 232, 120, 148, 89, 121, 7749, 0, 0, 187, 0, 0, 0, 0, 163, 0, 0, 0, 108, 5745, 115, 117, 5751, 89, 0, 0, 0, 7806, 0, 8320, 0, 233,
    234, 121, 235, 7916, 0, 8192, 239, 0, 240, 0, 241, 0, 0, 0, 0, 7749, 0, 0, 8287, 5683, 0, 99, 5683, 0, 5688, 5688, 0, 5683, 245, 246, 5688, 247, 248, 145,
    249, 250, 251, 252, 7933, 0, 187, 255, 0, 53, 54, 0, 144, 173, 174, 174, 146, 148, 149, 0, 0, 0, 0, 0, 196, 0, 0, 5683, 53, 54, 5688, 144, 173, 173, 145,
    144, 256, 0, 0, 0, 53, 54, 258, 259, 260, 261, 262, 263, 7749, 0, 265, 0, 53, 54, 6656, 144, 173, 145, 145, 120, 148, 121, 0, 0, 0, 0, 0, 11776, 0, 5683,
    5688, 0, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 89, 0, 0, 0, 7749, 0, 0, 0, 0, 267, 268, 269, 270, 271, 272, 0, 274, 0, 275, 276, 277, 120, 278, 121, 0, 279,
    144, 280, 145, 148, 187, 173, 0, 0, 0, 0, 0, 0, 0, 0, 23552, 0, 0, 0, 0, 0, 0, 0, 7265, 7266, 0, 0, 0, 0, 0, 5683, 5688, 0, 0, 0, 0, 0, 0, 5683, 53, 54,
    5688, 144, 173, 173, 173, 145, 120, 7297, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 0, 5800, 169, 170, 5803, 144, 120, 148, 148, 148, 121, 0, 7749, 0, 0, 187, 187,
    0, 0, 0, 0, 5745, 115, 117, 5751, 89, 0, 0, 0, 7806, 0, 8320, 0, 145, 144, 178, 148, 148, 182, 0, 0, 7749, 7864, 0, 8378, 187, 0, 0, 0, 13824, 13824, 0, 0,
    13824, 13824, 13824, 0, 13824, 0, 0, 0, 13824, 144, 209, 210, 148, 148, 212, 0, 7893, 0, 8407, 187, 216, 0, 0, 0, 0, 7749, 0, 0, 8287, 5683, 0, 100, 5683,
    0, 5688, 5688, 0, 233, 234, 121, 235, 7916, 0, 8192, 239, 0, 0, 0, 0, 0, 0, 0, 0, 5762, 5763, 0, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 144, 173, 12439, 0, 145,
    89, 7265, 7266, 0, 0, 0, 0, 0, 5683, 5688, 133, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 89, 0, 124, 0, 7749, 0, 0, 0, 7297, 5683, 5688, 133, 0, 161, 0, 0, 0, 0,
    0, 5800, 169, 170, 5803, 144, 120, 148, 148, 148, 121, 0, 7749, 0, 0, 187, 187, 0, 0, 0, 163, 0, 0, 53, 54, 144, 173, 145, 120, 148, 121, 7749, 0, 187, 0,
    145, 144, 178, 148, 148, 182, 0, 0, 7749, 7864, 0, 8378, 187, 133, 0, 161, 144, 209, 210, 148, 148, 212, 0, 7893, 0, 8407, 187, 216, 133, 0, 161, 0, 53,
    6144, 0, 144, 120, 145, 145, 145, 89, 121, 0, 0, 187, 187, 0, 53, 53, 54, 54, 6656, 6656, 120, 121, 0, 89, 0, 0, 0, 0, 0, 2630, 2631, 0, 0, 0, 103, 0, 2637,
    0, 0, 80, 0, 221, 0, 0, 0, 0, 5857, 226, 227, 5860, 229, 230, 173, 173, 232, 120, 148, 121, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 6144, 0, 144, 120,
    120, 145, 144, 233, 234, 121, 235, 7916, 0, 8192, 239, 133, 161, 0, 0, 0, 0, 0, 0, 198, 5831, 200, 201, 5834, 203, 173, 173, 207, 144, 5683, 245, 246, 5688,
    247, 248, 145, 249, 250, 251, 252, 7933, 0, 187, 255, 161, 233, 234, 121, 235, 7916, 0, 8192, 239, 0, 0, 0, 194, 0, 0, 0, 0, 0, 5831, 200, 201, 5834, 203,
    173, 173, 207, 144, 194, 0, 0, 0, 53, 54, 258, 259, 260, 261, 262, 263, 7749, 0, 265, 194, 0, 0, 0, 0, 0, 5857, 226, 227, 5860, 229, 230, 173, 173, 232,
    120, 148, 121, 121, 0, 0, 0, 0, 0, 0, 0, 0, 11264, 0, 0, 0, 0, 0, 53, 54, 6656, 144, 173, 173, 145, 144, 15953, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0,
    0, 0, 0, 5831, 200, 201, 5834, 203, 173, 173, 207, 144, 5120, 4096, 3584, 3072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6144, 54, 0, 89, 17492, 0, 0, 5683, 53,
    54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 6144, 54, 0, 89, 173, 121, 121, 145, 120, 5683, 0, 5688, 5683, 5683, 0, 5683, 0, 5683, 0, 0, 0, 5683, 5683, 0, 5683, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 5683, 5688, 5683, 0, 53, 0, 54, 0, 5688, 89, 89, 0, 0, 0, 0, 7749, 0, 0, 8287, 5683, 0, 0, 5683, 0, 5688, 5688, 0, 5683, 5688,
    5683, 5683, 5683, 5688, 5683, 5683, 5683, 5683, 5688, 5683, 0, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 53, 54, 0, 144, 173, 173, 173, 145, 120,
    5683, 5683, 5683, 5717, 53, 54, 5688, 5688, 5720, 0, 0, 0, 0, 0, 0, 0, 12800, 0, 12800, 12800, 0, 0, 0, 0, 0, 5683, 5683, 5683, 5683, 53, 54, 5688, 5688,
    5688, 0, 0, 0, 0, 0, 0, 0, 23040, 0, 0, 0, 0, 0, 0, 0, 0, 19968, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 5744, 114, 116, 5750, 177, 206, 12439,
    0, 231, 89, 52, 57, 52, 52, 52, 57, 52, 52, 52, 52, 57, 52, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 57, 52, 0, 57, 52, 52, 0, 52, 0, 52, 0, 0, 0, 52,
    52, 0, 52, 57, 0, 0, 0, 162, 0, 0, 0, 0, 52, 86, 87, 57, 172, 204, 175, 175, 147, 179, 150, 93, 0, 188, 188, 0, 52, 52, 52, 5683, 86, 87, 57, 57, 5688, 0,
    0, 0, 0, 0, 0, 0, 5857, 226, 227, 5860, 229, 230, 173, 173, 232, 120, 106, 0, 0, 0, 52, 53, 54, 57, 123, 0, 0, 0, 7749, 0, 0, 0, 17408, 17408, 0, 0, 17408,
    17408, 17408, 0, 17408, 17408, 17408, 17408, 17492, 52, 86, 86, 87, 87, 57, 57, 147, 150, 0, 89, 0, 0, 93, 0, 0, 144, 173, 174, 148, 0, 173, 0, 0, 0, 0, 0,
    0, 0, 0, 6144, 54, 0, 144, 121, 121, 145, 89, 175, 172, 120, 179, 179, 121, 0, 0, 93, 93, 0, 0, 188, 0, 134, 0, 82, 2643, 0, 5683, 53, 54, 5688, 89, 0, 0,
    0, 0, 0, 0, 0, 52, 57, 0, 134, 0, 0, 0, 0, 52, 172, 147, 148, 179, 179, 150, 0, 93, 0, 0, 188, 187, 0, 134, 0, 162, 0, 172, 204, 175, 147, 179, 150, 0, 188,
    0, 172, 204, 175, 147, 179, 150, 150, 93, 0, 0, 188, 0, 0, 162, 0, 0, 0, 0, 0, 7749, 0, 0, 8287, 7265, 7266, 7243, 5683, 0, 7265, 5688, 0, 0, 188, 172, 204,
    175, 179, 188, 204, 0, 0, 0, 0, 0, 0, 0, 0, 10240, 0, 0, 0, 0, 0, 10240, 0, 0, 10240, 5683, 0, 5688, 5683, 5683, 60, 5683, 60, 5683, 60, 60, 0, 5683, 5683,
    0, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 144, 0, 0, 173, 12439, 5683, 5683, 5683, 5717, 53, 54, 5688, 5688, 5720, 0, 0, 0, 0, 92, 0, 0,
    222, 0, 0, 224, 5683, 53, 54, 5688, 144, 173, 173, 173, 145, 120, 99, 99, 0, 0, 0, 11776, 99, 5683, 5688, 0, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 144, 173,
    12439, 173, 145, 120, 99, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 0, 5800, 169, 170, 5803, 144, 120, 148, 148, 148, 121, 0, 7749, 214, 0, 187, 187, 0, 135, 0, 0,
    10752, 0, 0, 53, 54, 0, 0, 0, 0, 0, 7749, 0, 0, 0, 5683, 0, 101, 5683, 0, 5688, 5688, 0, 266, 267, 268, 269, 270, 271, 272, 0, 274, 0, 275, 276, 277, 120,
    278, 121, 99, 99, 0, 0, 0, 0, 99, 5683, 5688, 0, 0, 0, 0, 138, 0, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 0, 5800, 169, 170, 5803, 144, 5772, 53, 141, 54, 142,
    5688, 5775, 120, 121, 0, 89, 0, 152, 7834, 0, 8348, 99, 5683, 5688, 0, 159, 0, 0, 0, 0, 0, 0, 5800, 169, 170, 5803, 144, 120, 148, 148, 148, 121, 22528,
    7749, 0, 0, 187, 187, 0, 0, 0, 0, 11776, 0, 0, 5683, 5688, 107, 0, 0, 0, 0, 0, 5683, 53, 6144, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 53, 6144, 0, 144, 173, 120,
    120, 145, 145, 145, 144, 178, 148, 148, 182, 0, 183, 7749, 7864, 0, 8378, 187, 0, 0, 0, 19968, 19968, 0, 0, 19968, 19968, 19968, 0, 19968, 19968, 19968,
    19968, 19968, 233, 234, 121, 235, 7916, 0, 8192, 239, 0, 0, 0, 0, 0, 243, 0, 0, 9728, 0, 0, 53, 54, 0, 0, 0, 0, 0, 7749, 0, 0, 0, 5683, 0, 99, 5683, 0,
    5688, 5688, 0, 0, 267, 268, 269, 270, 271, 272, 0, 274, 19456, 275, 276, 277, 120, 278, 121, 100, 100, 0, 0, 0, 0, 100, 5683, 5688, 0, 0, 0, 0, 0, 0, 5683,
    53, 54, 5688, 144, 173, 12493, 173, 145, 120, 100, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 0, 5800, 169, 170, 5803, 144, 120, 148, 12439, 148, 121, 0, 7749, 0, 0,
    0, 0, 0, 107, 0, 135, 192, 0, 0, 0, 0, 0, 0, 5831, 200, 201, 5834, 203, 173, 173, 207, 144, 120, 148, 12468, 148, 121, 0, 7749, 0, 0, 0, 187, 0, 0, 0, 135,
    101, 101, 0, 0, 0, 0, 101, 5683, 5688, 0, 0, 0, 0, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 4608, 101, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 0, 5683,
    53, 54, 5688, 144, 173, 173, 145, 144, 99, 99, 11776, 0, 0, 0, 99, 5683, 5688, 0, 0, 0, 137, 0, 0, 5683, 5688, 0, 0, 0, 0, 0, 0, 166, 0, 5800, 169, 170,
    5803, 144, 5683, 53, 53, 54, 54, 5688, 5688, 120, 121, 0, 89, 0, 0, 7749, 155, 0, 82, 2643, 0, 5683, 53, 54, 5688, 89, 0, 0, 0, 7749, 0, 0, 0, 15872, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 15872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19968, 0, 0, 0, 99, 5683, 5688, 0, 0, 0, 0, 0, 0, 0, 167, 5683, 53, 54, 5688, 144, 173, 89,
    145, 120, 148, 121, 7749, 0, 0, 187, 0, 5683, 5683, 5683, 5683, 53, 54, 5688, 5688, 5688, 0, 0, 90, 91, 0, 0, 0, 23552, 23552, 0, 0, 23552, 23552, 23552, 0,
    23552, 0, 23552, 23552, 23552, 5683, 0, 5688, 5683, 5683, 61, 5683, 61, 5683, 61, 61, 0, 5683, 5683, 0, 5683, 5688, 0, 0, 0, 0, 164, 0, 0, 0, 5800, 169,
    170, 5803, 144, 145, 144, 120, 148, 148, 121, 0, 0, 7749, 7749, 0, 0, 187, 0, 135, 0, 82, 2643, 0, 5744, 114, 116, 5750, 89, 0, 0, 0, 0, 0, 0, 0, 52, 86,
    87, 57, 144, 204, 204, 145, 172, 102, 102, 0, 0, 0, 0, 102, 5683, 5688, 0, 0, 0, 0, 0, 0, 5683, 6144, 54, 0, 0, 5688, 0, 0, 0, 0, 0, 0, 0, 53, 54, 0, 144,
    173, 173, 173, 173, 144, 102, 5683, 5688, 0, 0, 0, 0, 0, 165, 0, 0, 5683, 53, 54, 5688, 144, 173, 145, 145, 120, 148, 121, 7749, 0, 187, 187, 0, 145, 144,
    120, 148, 148, 121, 0, 0, 7749, 7749, 185, 0, 187, 0, 0, 0, 12800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6656, 0, 120, 148, 121, 121, 7749, 0, 0, 187,
    0, 0, 0, 0, 0, 0, 0, 244, 5683, 5683, 5683, 5683, 53, 54, 5688, 5688, 5688, 0, 0, 0, 22016, 0, 0, 0, 13312, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 0, 0, 13312, 0,
    0, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13312, 0, 13312, 120, 148, 121, 121, 7749, 237, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 16384, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 5683, 0, 5688, 5683, 5683, 62, 5683, 62, 5683, 62, 62, 0, 5683, 5683, 0, 5683, 5688, 0, 0, 0, 163, 0, 0, 0, 0, 5683,
    53, 54, 5688, 144, 173, 145, 145, 120, 148, 121, 7749, 254, 187, 187, 0, 120, 148, 121, 121, 7749, 0, 0, 187, 0, 0, 163, 0, 0, 0, 18432, 0, 89, 121, 145,
    120, 148, 145, 0, 0, 0, 89, 121, 145, 120, 148, 145, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 0, 144, 173, 173, 145, 144, 2048, 187, 144, 173, 145,
    148, 187, 173, 0, 0, 0, 0, 0, 0, 0, 0, 13824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13824, 0, 0, 0, 0, 0, 0, 0, 65, 13824, 0, 65, 0, 5708, 5711, 5683, 5683, 5683,
    5711, 5708, 5683, 5683, 5683, 5711, 5683, 0, 0, 0, 5683, 5688, 0, 0, 135, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 144, 173, 145, 145, 120, 148, 121, 7749, 0, 0,
    187, 0, 5683, 53, 53, 54, 54, 5688, 5688, 120, 121, 0, 89, 21504, 0, 7749, 0, 0, 15418, 0, 58, 0, 0, 58, 0, 58, 58, 58, 0, 0, 0, 58, 0, 23552, 0, 23552, 0,
    0, 0, 0, 0, 0, 0, 67, 23552, 0, 23619, 0, 120, 148, 12439, 0, 121, 0, 7749, 0, 0, 0, 0, 0, 0, 0, 135, 23552, 0, 0, 5683, 53, 54, 0, 0, 5688, 0, 0, 0, 0, 0,
    0, 0, 18944, 0, 5857, 226, 227, 5860, 229, 230, 173, 173, 232, 120, 5683, 53, 53, 54, 54, 0, 5688, 120, 121, 0, 89, 0, 0, 7749, 0, 0, 15872, 15953, 15953,
    0, 0, 15953, 15953, 15953, 0, 15953, 15953, 15953, 15953, 15953, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5683, 53, 54, 5688, 144, 173, 173, 145, 12464, 145, 144,
    120, 148, 148, 121, 12439, 0, 0, 7749, 0, 0, 0, 0, 107, 0, 144, 120, 145, 145, 89, 121, 0, 187, 0, 144, 120, 145, 145, 89, 121, 121, 0, 0, 0, 187, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 23040, 23040, 0, 0, 0, 0, 0, 120, 148, 121, 121, 7749, 0, 0, 187, 0, 0, 0, 0, 163, 0, 0, 0, 17920, 0, 53, 54, 144, 173, 145, 120, 148,
    121, 7749, 0, 187, 0
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    150, 140, 147, 154, 165, 169, 173, 177, 181, 202, 184, 199, 187, 227, 194, 206, 210, 214, 218, 222, 306, 226, 157, 259, 232, 234, 246, 348, 190, 228, 254,
    238, 244, 266, 348, 192, 253, 254, 258, 265, 266, 348, 192, 253, 253, 195, 240, 303, 247, 349, 193, 253, 253, 239, 303, 248, 226, 253, 278, 263, 247, 339,
    253, 300, 271, 272, 270, 253, 276, 341, 158, 143, 285, 309, 282, 289, 293, 297, 310, 314, 318, 322, 325, 158, 326, 330, 158, 158, 158, 158, 249, 158, 336,
    158, 158, 158, 159, 345, 158, 158, 332, 331, 158, 159, 345, 158, 158, 359, 158, 158, 159, 345, 158, 158, 158, 360, 158, 158, 160, 346, 158, 158, 158, 158,
    158, 161, 158, 158, 158, 158, 353, 158, 158, 158, 347, 158, 357, 158, 158, 158, 67108864, 1073741824, -2147483648, 0, 0, 0, 4096, 0, 0, 33554448, 16, 1024,
    16777216, 33554432, 3072, 5120, 67109888, 8388608, 0, 0, 0, 0, 4, 8, 32, 3088, 33554448, 1073746944, 67109904, 8391680, 0, 8391696, 16777216, -2139091952,
    16777216, 16777232, 1008, 1409303568, -1568666600, 1008, -1568142312, 139176980, 139181060, -494400488, 1428177936, 1436566528, 147569668, 1436566544, 1024,
    1024, 1024, 2048, 2048, 2048, 5120, 8388608, 8388608, 0, 16384, 1363034128, 1363034128, 1396588560, 1436566528, 139181076, 172731412, 1436566544, 0, 0,
    8388624, 256, 512, 128, 64, 32, 16384, 8388632, 8912920, 32768, 4203520, 4268032, 4268032, 1028, 655376, 4207616, 5124, 655360, 1024, 2048, 2048, 5120,
    5120, 8388608, 4202496, 4268032, 4194304, 4194304, 4194304, 1028, 0, 16384, 8, 32768, 4, 4, 4202496, 1028, 5124, 2097152, 2097152, 0, 0, 0, 60, 8388608,
    8388608, 8388608, 8388608, 0, 16384, 16384, 8, 32768, 4202496, 8, 4, 4, 2097152, 2097152, 2097152, 0, 4, 0, 8388608, 8388608, 8388608, 8, 8, 4, 8388608,
    8388608, 8388608, 16384, 0, 8192, 0, 8192, 16384, 0, 128, 16384, 3840, 16384, 3840, 16384, 7936, 7936, 129, 8256, 16384, 8321, 16384, 8, 4, 2097152,
    2097152, 2097152, 2097152, 9043968, 1966096, 0, 0, 0, 16384, 8258, 8258, 0, 0, 8258, 12354, 24642, 16384, 24642, 4162, 12354, 12354, 8318, 0, 0, 0, 256,
    1536, 2048, 0, 0, 0, 512, 0, 256, 512, 2048, 2048, 8388608, 8388608, 4, 8388608, 8, 16, 32, 0, 0, 0, 1024, 2048, 0, 0, 4, 32, 0, 32, 0, 0, 0, 2048, 0
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    'important',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'STRING',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'COMMENT',
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'and'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 512, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 512"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="512 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 16"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 511) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 280 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>          <!-- 'and' | 'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 42">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(42, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>      <!-- S | '(' | 'and' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(25, $input, $state)"/> <!-- '(' | 'and' | 'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 44                                          (: '{' :)
                       or $state[$p:lk] = 2820">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 4">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(23, $input, $state)"/> <!-- '(' | 'and' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 24                                    (: '(' :)
                             or $state[$p:lk] = 1540">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(4, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 23">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 23">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 4">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(41, $input, $state)"/>  <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 46                                            (: '}' :)
                     or $state[$p:lk] = 2948">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '}' -->
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 35">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(35, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>           <!-- ';' -->
    <xsl:variable name="state" select="p:consume(31, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>          <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 27">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(27, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>          <!-- important | S | IDENT | STRING | COMMA | COMMENT | ')' | '/' | ';' |
                                                                                         '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>      <!-- important | S | IDENT | STRING | COMMENT | ')' | '/' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/> <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | COMMENT | '-' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 10                                          (: IDENT :)
                       or $state[$p:lk] = 11                                          (: STRING :)
                       or $state[$p:lk] = 23                                          (: COMMENT :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 31                                          (: ';' :)
                       or $state[$p:lk] = 46                                          (: '}' :)
                       or $state[$p:lk] = 1476                                        (: S COMMENT :)
                       or $state[$p:lk] = 2948">                                    <!-- S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- IDENT | STRING -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- URL | S | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2(34, $input, $state)"/> <!-- important | S | IDENT | STRING | COMMA | COMMENT | ')' | '/' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 1930                                       (: IDENT ':' :)
                      and $state[$p:lk] != 1931">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>   <!-- ':' -->
            <xsl:variable name="state" select="p:consume(30, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- ':' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 45">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(14, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(17, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (2890,                                  (: IDENT '|' :)
                                               2906)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 266                                           (: IDENT S :)
                     or $state[$p:lk] = 685                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1610                                          (: IDENT ')' :)
                     or $state[$p:lk] = 43850                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 43866">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 28">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 38">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 30">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | ')' | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 2">                                       <!-- URL -->
            <xsl:variable name="state" select="p:consume(2, $input, $state)"/>      <!-- URL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 15">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(15, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 27">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(27, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 22">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(22, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 13">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(13, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 11">                                      <!-- STRING -->
            <xsl:variable name="state" select="p:consume(11, $input, $state)"/>     <!-- STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 10">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(10, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(19, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(38, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(30, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 45                                            (: '|' :)
                     or $state[$p:lk] = 2890">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 39">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 32">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(32, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 26">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(46, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 10                                            (: IDENT :)
                     or $state[$p:lk] = 45                                            (: '|' :)
                     or $state[$p:lk] = 2906">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>           <!-- '*' -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 45">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(46, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 45                                            (: '|' :)
                     or $state[$p:lk] = 2890">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 4                                           (: S :)
                       or $state[$p:l1] = 17                                          (: PLUS :)
                       or $state[$p:l1] = 18                                          (: GREATER :)
                       or $state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 20                                          (: TILDE :)
                       or $state[$p:l1] = 44">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 28">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 38">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 30">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(14, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 28">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 38">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 30">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 21">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 4                                           (: S :)
                       or $state[$p:l1] = 17                                          (: PLUS :)
                       or $state[$p:l1] = 18                                          (: GREATER :)
                       or $state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 20                                          (: TILDE :)
                       or $state[$p:l1] = 44">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10                                            (: IDENT :)
                     or $state[$p:l1] = 26                                            (: '*' :)
                     or $state[$p:l1] = 45">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 45">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(14, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (10,                                    (: IDENT :)
                                               26)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(45, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                            '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (2890,                            (: IDENT '|' :)
                                                     2906)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 266                                     (: IDENT S :)
                           or $state[$p:lk] = 685                                     (: '|' IDENT :)
                           or $state[$p:lk] = 906                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1098                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1162                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1226                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1290                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1354                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1546                                    (: IDENT '(' :)
                           or $state[$p:lk] = 1802                                    (: IDENT '.' :)
                           or $state[$p:lk] = 1930                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2122                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2442                                    (: IDENT '[' :)
                           or $state[$p:lk] = 2826                                    (: IDENT '{' :)
                           or $state[$p:lk] = 43850                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 43866">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(40, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 19                                          (: COMMA :)
                       or $state[$p:lk] = 44                                          (: '{' :)
                       or $state[$p:lk] = 2820">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 19">                                       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>      <!-- S | IDENT | STRING | COMMENT | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 31">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(22, $input, $state)"/> <!-- S | IDENT | STRING | COMMENT | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 287">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- IDENT | STRING | COMMENT | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 671                                        (: ';' IDENT :)
                      and $state[$p:lk] != 735                                        (: ';' STRING :)
                      and $state[$p:lk] != 41247                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 45343">                                  <!-- ';' S STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(31, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>  <!-- S | IDENT | STRING -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>        <!-- IDENT | STRING | COMMENT | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 23">                                     <!-- COMMENT -->
            <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/>  <!-- IDENT | STRING | COMMENT | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 46                                            (: '}' :)
                     or $state[$p:lk] = 1495                                          (: COMMENT COMMENT :)
                     or $state[$p:lk] = 2967">                                      <!-- COMMENT '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 23">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 31">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(31, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>    <!-- S | IDENT | STRING | COMMENT | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>      <!-- COMMENT | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 23">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>          <!-- S | IDENT | STRING | COMMENT | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
    <xsl:variable name="state" select="p:consume(46, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>        <!-- END | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34                                      (: '@charset' :)
                           or $state[$p:l1] = 35                                      (: '@import' :)
                           or $state[$p:l1] = 37">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 23">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(23, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
          <xsl:sequence select="p:parse-css-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>