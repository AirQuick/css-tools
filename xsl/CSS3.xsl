<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Wed Jul 19, 2017 14:18 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -ll 3 -backtrack -xslt -tree -main -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 24, 25, 20, 26, 27, 9, 28, 29, 9, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 33, 34, 35, 36, 32, 9, 37, 38, 39, 40, 41, 42, 32, 43, 44, 32, 45, 46, 47, 48, 49, 50, 32, 51, 52, 53, 54, 55, 32, 56, 57, 58, 59, 60, 61,
    62, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 196, 208, 180, 224, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 63, 1, 0, 2, 3, 0, 0, 63, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 20, 26, 27, 9, 28, 29, 9, 37, 38, 39,
    40, 41, 42, 32, 43, 44, 32, 45, 46, 47, 48, 49, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 35, 36,
    32, 50, 32, 51, 52, 53, 54, 55, 32, 56, 57, 58, 59, 60, 61, 62, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 32, 32
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1281, 1538, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 575, 576, 577
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
    3952, 3952, 3952, 3952, 3952, 3952, 3946, 3952, 2048, 3968, 2052, 2060, 4053, 2068, 2086, 3951, 3952, 3360, 2094, 2102, 2258, 3209, 3326, 3979, 2994, 3325,
    3978, 2120, 3952, 4214, 4067, 2137, 3422, 2136, 2145, 2996, 3952, 3952, 3973, 3952, 2048, 3968, 2052, 2060, 4053, 2068, 2075, 3952, 3952, 3360, 2094, 3655,
    2258, 3209, 3326, 2474, 2908, 3325, 3978, 3811, 3952, 4214, 3424, 2137, 2155, 2136, 2154, 2996, 3952, 3952, 3946, 3952, 2048, 3968, 2052, 2060, 4053, 2068,
    2164, 3951, 3952, 3360, 2094, 3799, 2172, 3209, 3326, 3760, 2181, 3325, 4072, 2191, 3952, 2203, 3623, 4073, 2208, 2199, 2207, 2183, 3952, 3952, 2217, 3952,
    2597, 2209, 3952, 3952, 3952, 3952, 2238, 2108, 3952, 3207, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226,
    3952, 3952, 3952, 3952, 2278, 3952, 3952, 2312, 2298, 2293, 2306, 2310, 2320, 2222, 3952, 3952, 3952, 3340, 4274, 3952, 3952, 4327, 3952, 3952, 4326, 3952,
    3952, 3867, 3952, 4327, 3952, 4326, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 2328, 2342, 2335, 2349, 2108, 3952, 3952, 3952, 2246, 4274, 3952,
    3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 3953, 4175, 3952, 3952, 2238, 2108,
    3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209,
    3952, 3952, 3952, 3952, 2238, 2108, 3952, 3952, 2357, 2246, 4274, 3116, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952,
    3952, 3952, 2217, 3952, 2597, 2209, 3952, 3952, 3952, 3952, 2238, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267,
    3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2367, 3952, 3952, 2392, 2378, 2373, 2386, 2390, 2400, 2222, 3952, 3952, 3952, 2408, 4274, 3952, 3952, 3844,
    3952, 3952, 3843, 3952, 3952, 2426, 3952, 3844, 3952, 3843, 3952, 3952, 3952, 3952, 2217, 2870, 3952, 3952, 3952, 2864, 2436, 2440, 2448, 2655, 3952, 3952,
    2485, 2246, 2456, 3952, 4107, 4227, 2470, 3587, 2473, 2486, 2499, 2482, 3952, 2503, 3952, 2502, 2495, 3952, 3952, 3952, 2217, 3193, 3191, 3191, 3952, 3189,
    3192, 2511, 2238, 2222, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952,
    2539, 2553, 2597, 2591, 2570, 2565, 2585, 2578, 2607, 2621, 3952, 3952, 3952, 2615, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227,
    3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 4038, 3467, 2636, 2238, 2108, 3952, 3952, 2629, 2246, 4274, 3952, 3952, 4227, 3952, 3952,
    4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2650, 3952, 2663, 2209, 2733, 2674, 2688, 2708, 2238, 2108, 3952, 2734, 3364, 2246,
    4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2727, 3952, 2597, 2742, 2771, 2776, 2750, 2765,
    2757, 3805, 4271, 3952, 2112, 2102, 3810, 3952, 2128, 3979, 3809, 2358, 3660, 2784, 3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 2217, 3952,
    2597, 2209, 3952, 2810, 2803, 2796, 2830, 2108, 3952, 2270, 2817, 2246, 4274, 2270, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226,
    3952, 3952, 3952, 3952, 2838, 3952, 2597, 2889, 3542, 2858, 2886, 2879, 2897, 2904, 3952, 3952, 3952, 2918, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952,
    3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 2871, 3400, 3404, 2926, 2252, 4271, 3472, 2934, 2947, 2961, 2285,
    2128, 4260, 2974, 2987, 2939, 3004, 3019, 3032, 3050, 4247, 3058, 3066, 3078, 2996, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 2871, 3400, 3404, 2926, 2252,
    4271, 3472, 2934, 2947, 2961, 2680, 2128, 4260, 2974, 2719, 2939, 3103, 2714, 3032, 2487, 4247, 3115, 3066, 3124, 2996, 3952, 3952, 2217, 3952, 2597, 2209,
    3952, 2871, 3400, 3404, 2926, 2252, 4271, 3472, 2934, 2947, 2961, 3163, 2128, 4260, 2974, 3134, 2939, 3159, 3184, 3032, 3171, 4247, 3179, 3066, 3201, 2996,
    3952, 3952, 2217, 3952, 2597, 2209, 3952, 2871, 3400, 3404, 2926, 2252, 4271, 3472, 2934, 2947, 2961, 2680, 2128, 4260, 2974, 2719, 2939, 3103, 3231, 3032,
    3219, 4247, 3217, 3066, 3227, 4146, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 2871, 3400, 3404, 2926, 2252, 4271, 3472, 2934, 2947, 2961, 3163, 2128, 4260,
    2974, 3134, 2939, 3159, 3184, 3032, 3239, 4247, 3179, 3066, 3201, 2996, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 2871, 3400, 3404, 2926, 2252, 4271, 3472,
    2934, 2947, 2961, 2680, 2128, 4260, 2974, 2719, 2939, 3103, 3231, 3032, 3219, 4247, 3217, 3066, 3227, 4161, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 2871,
    3400, 3404, 2926, 2252, 4271, 3472, 2934, 2947, 2961, 2680, 2128, 4260, 2974, 2719, 2939, 3103, 2714, 3032, 2487, 4247, 3115, 3066, 3247, 2996, 3952, 3952,
    2217, 3038, 3258, 3263, 3952, 3042, 3271, 3277, 3285, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227,
    3952, 4226, 3952, 3952, 3952, 3952, 2217, 2461, 3293, 2209, 2460, 3308, 3296, 2462, 2238, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952,
    4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 2428, 3322, 3952, 3952, 2238, 2108, 3334, 3952, 3952, 2246,
    4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 3952, 3952, 3354,
    2238, 2108, 3952, 3952, 4188, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952,
    2597, 2209, 3952, 2557, 3372, 3378, 3386, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226,
    3952, 3952, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 3412, 3530, 4271, 3628, 2226, 2947, 2961, 2517, 2128, 4260, 2974, 2822, 2939, 3103,
    2714, 3032, 2487, 4247, 3115, 3066, 3124, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3810, 3952,
    2128, 3979, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 2217, 3952, 2597, 2209, 3952, 3433, 3439, 3445, 3453, 2108,
    3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 3461, 3952, 2597, 3480,
    3492, 2531, 3488, 3500, 3516, 3346, 2078, 2522, 2527, 3524, 3538, 3569, 3770, 3508, 3550, 4448, 3507, 3565, 3952, 3581, 2695, 2966, 4446, 2965, 3585, 4444,
    3952, 3952, 2217, 3952, 3595, 2209, 3126, 3599, 3952, 3952, 2238, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267,
    3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 2259, 4323, 3952, 3952, 2238, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227,
    3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 4295, 3885, 3747, 3412, 3530, 4271, 3628,
    2226, 2947, 2961, 2517, 2128, 3314, 2974, 2822, 4015, 3103, 2714, 3032, 2487, 3610, 3115, 3066, 3124, 3618, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230,
    3904, 3747, 3412, 3530, 4271, 3628, 2226, 2947, 2961, 2517, 2128, 4260, 2974, 2822, 2939, 3103, 2714, 3032, 2487, 4247, 3115, 3066, 3636, 2996, 3952, 3952,
    3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 3412, 3530, 4271, 4060, 3091, 3648, 2961, 2545, 3713, 4260, 2974, 2979, 2939, 3103, 2714, 3032, 2487, 4247,
    3115, 3066, 3124, 2910, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 3412, 3530, 4271, 3628, 2226, 2947, 3672, 2517, 2128, 4260, 2974, 2822,
    4120, 3103, 2714, 3032, 2487, 4247, 3115, 3066, 3124, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 3412, 3530, 4271, 3628, 3091, 2947,
    2961, 2545, 3931, 3011, 3686, 3085, 2939, 3694, 2714, 3707, 2487, 4247, 3115, 3721, 3124, 2996, 3733, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747,
    3412, 3530, 4271, 3628, 3743, 2947, 2961, 2642, 3573, 4260, 2974, 3024, 2939, 3103, 3755, 3032, 2487, 4247, 3768, 3066, 3124, 2996, 3952, 3952, 3394, 3952,
    2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3810, 3952, 2844, 3778, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978,
    2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 3826, 3792, 3810, 3819, 4179, 3979, 3809, 4178, 3660, 3420,
    2173, 4214, 3952, 2137, 2155, 3978, 2154, 3839, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3810, 3952,
    2128, 3979, 3809, 2358, 3660, 3420, 3952, 3070, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414,
    4271, 2359, 2226, 2102, 3852, 3952, 4096, 3979, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850,
    3908, 2230, 3904, 3747, 4203, 2414, 3151, 2359, 3091, 3860, 3810, 3870, 3878, 3916, 3809, 3930, 3831, 3420, 3952, 3725, 3952, 2137, 2155, 3978, 2154, 2996,
    3952, 3952, 3394, 3952, 2597, 2850, 3908, 3784, 3994, 3747, 4203, 2414, 4430, 3939, 2226, 3961, 3810, 2125, 3987, 3979, 4023, 2358, 3660, 3420, 3952, 3664,
    3952, 2137, 2155, 3978, 2154, 2996, 4037, 3952, 3394, 3952, 2597, 2850, 3908, 3922, 4001, 3747, 4203, 2414, 4271, 4046, 2226, 2102, 3810, 3425, 2128, 3979,
    3809, 4085, 3660, 4081, 3602, 4214, 4093, 2137, 4104, 3978, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359,
    4115, 2102, 3810, 2666, 3107, 3979, 3809, 3106, 3892, 4128, 3952, 4214, 3952, 2137, 2155, 3699, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230,
    3904, 3747, 4203, 2953, 4142, 4154, 4169, 2102, 3810, 4187, 4196, 3979, 3809, 2358, 3660, 3420, 3640, 4214, 3952, 4211, 4222, 3978, 2154, 2996, 3952, 3952,
    3394, 3952, 2597, 2850, 3908, 4309, 4008, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3810, 3952, 2128, 3979, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 4235,
    2155, 3978, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3141, 3952, 3678, 3979, 3809, 2700,
    3660, 3420, 3557, 4214, 3555, 2137, 2146, 4029, 4255, 4268, 3148, 3952, 3394, 3952, 2597, 4282, 4290, 3095, 3899, 4303, 4203, 2414, 4271, 2359, 2226, 2102,
    3810, 3952, 2128, 3979, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747,
    4203, 2414, 4271, 2359, 4317, 2102, 3810, 3250, 3300, 3979, 3809, 3299, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 3394, 3952,
    2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3810, 3952, 3678, 3979, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978,
    2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 3810, 3952, 2128, 3979, 2418, 2358, 3660, 3420,
    3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 3394, 3952, 2597, 2850, 3908, 2230, 3904, 3747, 4203, 2414, 4271, 2359, 2226, 2102, 4242, 3952,
    2128, 3979, 3809, 2358, 3660, 3420, 3952, 4214, 3952, 2137, 2155, 3978, 2154, 2996, 3952, 3952, 2217, 2788, 2597, 2209, 3952, 3952, 4335, 4338, 2238, 2108,
    3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3735, 2597, 4357,
    4346, 4354, 4365, 4369, 4377, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952,
    3952, 3952, 2217, 3952, 4385, 4388, 4134, 4402, 4405, 4396, 4413, 2108, 3952, 3952, 3952, 2246, 4274, 3952, 3952, 4227, 3952, 3952, 4226, 3952, 3952, 2267,
    3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 2217, 3952, 2597, 2209, 2156, 4427, 3952, 4421, 2238, 2108, 3952, 3952, 2599, 2246, 4274, 3952, 3952, 4227,
    3952, 3952, 4226, 3952, 3952, 2267, 3952, 4227, 3952, 4226, 3952, 3952, 3952, 3952, 4438, 3952, 2048, 3968, 2052, 2060, 4053, 2068, 4456, 2222, 3952, 3360,
    2094, 2102, 2995, 3209, 3326, 2474, 2908, 3325, 3978, 3811, 3952, 4214, 3424, 2137, 2155, 2136, 2154, 2996, 3952, 3952, 0, 1795, 1811, 1795, 1795, 1795,
    1795, 1795, 1811, 1795, 1795, 1795, 1795, 1811, 1795, 0, 0, 1884, 1795, 99, 1895, 1795, 1896, 1896, 1895, 1896, 1795, 1795, 1281, 1538, 0, 0, 0, 0, 0, 0,
    116, 0, 1795, 1281, 1538, 0, 0, 0, 73, 73, 134, 0, 99, 1892, 0, 0, 1895, 1896, 0, 1281, 1281, 1538, 1538, 3397, 73, 0, 843, 0, 0, 3405, 0, 0, 0, 3397, 0, 0,
    3405, 4183, 4183, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 3405, 3397, 180, 0, 0, 0, 0, 1281, 1538, 3397, 3405, 3405, 4183, 0, 0, 0, 0, 0, 180, 0, 3405, 4183, 0,
    0, 0, 0, 0, 0, 0, 86, 1795, 1386, 1644, 0, 0, 0, 73, 73, 3473, 0, 0, 0, 0, 0, 0, 0, 203, 0, 3473, 0, 0, 4266, 0, 0, 0, 0, 0, 3473, 0, 4266, 0, 0, 0, 0, 195,
    232, 0, 0, 0, 0, 1386, 1644, 3471, 3473, 4266, 0, 0, 0, 0, 0, 0, 0, 843, 1281, 1538, 0, 0, 0, 73, 0, 0, 0, 0, 3405, 0, 0, 3397, 3397, 0, 0, 0, 3397, 3397,
    3405, 0, 1281, 1538, 0, 0, 3397, 73, 73, 0, 1281, 1281, 1538, 1538, 0, 73, 0, 843, 0, 3405, 3441, 3405, 0, 0, 0, 0, 0, 0, 0, 84, 0, 1281, 1538, 0, 0, 0, 0,
    0, 0, 126, 0, 0, 1538, 0, 0, 0, 73, 6656, 0, 0, 154, 0, 4510, 3999, 3967, 3968, 0, 6656, 0, 0, 0, 6656, 0, 6656, 6656, 6656, 6656, 6656, 0, 0, 0, 6656,
    6656, 6656, 0, 0, 0, 6656, 0, 0, 0, 6656, 6656, 6656, 1281, 1538, 0, 0, 3397, 73, 73, 87, 0, 0, 0, 0, 0, 87, 94, 87, 87, 87, 94, 87, 87, 87, 0, 0, 94, 94,
    87, 0, 87, 1281, 1538, 0, 0, 3397, 73, 73, 4608, 0, 0, 0, 0, 0, 0, 0, 3405, 0, 1281, 0, 0, 0, 0, 73, 0, 6912, 0, 0, 0, 6912, 0, 6912, 6912, 6912, 6912,
    6912, 0, 0, 0, 6912, 6912, 6912, 0, 0, 0, 6912, 0, 0, 0, 6912, 6912, 6912, 1281, 1538, 0, 0, 3397, 73, 73, 0, 1281, 1281, 0, 0, 0, 73, 0, 843, 3405, 3405,
    3405, 3405, 0, 4183, 0, 13312, 0, 0, 1281, 0, 0, 0, 0, 0, 0, 0, 9984, 7168, 7168, 0, 0, 0, 7168, 7168, 7168, 0, 7168, 7168, 7168, 7168, 1281, 1538, 0, 0,
    3397, 73, 73, 3584, 3584, 0, 4183, 0, 0, 0, 0, 0, 0, 9728, 0, 0, 0, 3584, 3584, 0, 14080, 0, 0, 0, 0, 1281, 1538, 0, 3397, 0, 1281, 1538, 0, 3584, 0, 0, 0,
    0, 0, 0, 0, 4570, 3584, 0, 0, 0, 0, 0, 0, 5888, 0, 0, 0, 0, 1281, 1538, 0, 3584, 7424, 0, 0, 0, 0, 7424, 0, 0, 0, 0, 4510, 0, 0, 0, 0, 123, 0, 78, 0, 0, 70,
    70, 0, 0, 0, 70, 70, 78, 1281, 1538, 0, 0, 0, 71, 0, 0, 0, 0, 4510, 0, 129, 129, 0, 0, 7680, 74, 0, 0, 0, 0, 0, 0, 10240, 0, 7680, 0, 83, 0, 0, 0, 7680, 0,
    0, 0, 0, 0, 83, 0, 7680, 0, 0, 0, 0, 7680, 7680, 0, 0, 0, 0, 7680, 0, 7680, 0, 0, 0, 0, 0, 843, 0, 0, 0, 0, 0, 0, 0, 5632, 7680, 1281, 1538, 0, 0, 3397,
    22895, 112, 0, 1281, 1281, 1538, 1538, 0, 22895, 0, 843, 0, 0, 3405, 0, 9216, 0, 0, 4864, 4864, 0, 0, 4864, 4864, 0, 4864, 4864, 4864, 4864, 0, 0, 0, 0,
    4510, 0, 130, 130, 1281, 1538, 0, 0, 5376, 73, 0, 0, 0, 3584, 3405, 3584, 0, 0, 843, 5376, 0, 0, 0, 0, 0, 0, 132, 132, 0, 5376, 0, 8192, 8192, 5376, 0, 0,
    0, 0, 4510, 3999, 3967, 3968, 0, 8192, 5376, 0, 5376, 0, 8192, 0, 0, 156, 0, 179, 0, 0, 0, 0, 180, 0, 0, 3405, 5376, 0, 5376, 5376, 5376, 5376, 0, 0, 0, 0,
    4552, 0, 0, 0, 0, 0, 4533, 3999, 3405, 1281, 1538, 0, 68, 0, 73, 0, 0, 0, 0, 5376, 0, 0, 0, 0, 76, 68, 0, 0, 0, 76, 68, 843, 68, 0, 68, 8543, 8549, 68, 0,
    68, 1281, 1538, 0, 3397, 3397, 73, 73, 8549, 68, 0, 0, 8543, 0, 68, 68, 0, 68, 68, 68, 68, 0, 0, 0, 68, 68, 8543, 3405, 4183, 4183, 191, 0, 0, 0, 0, 0, 0,
    14336, 0, 96, 8704, 8704, 8704, 96, 8704, 8704, 8704, 0, 0, 96, 96, 8704, 0, 8704, 0, 0, 0, 0, 0, 8704, 96, 0, 0, 0, 126, 0, 0, 0, 0, 0, 4533, 0, 3405,
    8704, 1281, 1538, 0, 0, 3397, 73, 73, 1281, 1538, 0, 0, 0, 72, 0, 0, 0, 0, 6144, 0, 3405, 3397, 0, 0, 0, 3405, 3397, 843, 0, 80, 0, 0, 0, 9040, 0, 0, 0, 0,
    7168, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 3937, 0, 80, 80, 80, 80, 80, 80, 80, 0, 9040, 0, 0, 0, 0, 80, 0, 0, 843, 80, 1281, 1538, 0, 0, 3397, 0, 72, 7936, 843,
    0, 0, 3405, 0, 0, 4183, 0, 0, 0, 242, 0, 0, 1281, 1281, 1538, 1538, 0, 39168, 39168, 0, 1387, 1645, 0, 3397, 3438, 73, 73, 3937, 3405, 0, 0, 3967, 3397, 0,
    0, 0, 0, 1466, 1723, 3516, 0, 1281, 1421, 1538, 1678, 3472, 73, 0, 843, 3405, 3405, 3405, 3442, 0, 3474, 3405, 0, 4245, 0, 0, 0, 0, 0, 66, 67, 70, 78, 3405,
    3497, 3405, 0, 4267, 0, 0, 0, 0, 0, 4533, 129, 3405, 0, 175, 0, 177, 0, 4533, 3999, 3405, 3405, 0, 0, 4183, 0, 0, 0, 0, 0, 3517, 4183, 4286, 0, 0, 0, 194,
    0, 0, 164, 0, 1446, 1703, 3397, 3496, 196, 0, 198, 0, 4552, 0, 0, 0, 0, 0, 4533, 130, 3405, 0, 1485, 1742, 3535, 3536, 4305, 0, 0, 0, 0, 9472, 0, 0, 0, 0,
    0, 9565, 0, 0, 213, 0, 214, 0, 216, 0, 4570, 4322, 0, 0, 0, 0, 230, 0, 231, 0, 4352, 0, 0, 0, 1281, 1538, 3397, 3405, 4183, 210, 0, 3405, 4331, 0, 0, 0, 0,
    238, 0, 0, 176, 0, 0, 4533, 129, 3405, 0, 0, 3397, 3397, 0, 0, 0, 3397, 3397, 3426, 3517, 4183, 4286, 0, 0, 0, 0, 0, 0, 132, 3405, 3397, 4322, 0, 0, 0, 0,
    0, 0, 0, 4608, 3405, 4331, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 155, 0, 178, 0, 4533, 3999, 3405, 3405, 0, 4183, 0, 0, 13056, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 4183,
    117, 3517, 4183, 4286, 0, 0, 0, 155, 0, 4510, 3999, 3967, 3968, 0, 155, 0, 178, 0, 0, 217, 4570, 4322, 0, 0, 0, 155, 178, 0, 0, 0, 4552, 0, 0, 0, 0, 0,
    7424, 0, 0, 0, 0, 0, 0, 3405, 4331, 0, 0, 0, 178, 0, 0, 0, 122, 0, 0, 0, 0, 134, 134, 4322, 0, 0, 0, 0, 0, 0, 199, 0, 4570, 3405, 4331, 0, 0, 0, 0, 199, 0,
    4552, 0, 0, 0, 0, 155, 0, 178, 0, 0, 0, 4570, 3405, 4331, 12032, 0, 0, 0, 0, 0, 0, 133, 133, 0, 843, 0, 0, 9472, 0, 0, 0, 0, 0, 9472, 0, 843, 9565, 0, 9472,
    0, 0, 9565, 0, 9565, 9565, 9565, 0, 9565, 9565, 9565, 9565, 1281, 1538, 0, 0, 3397, 73, 73, 0, 843, 0, 0, 0, 9728, 0, 0, 0, 0, 0, 0, 133, 3405, 3397, 0,
    9728, 0, 0, 0, 9728, 0, 0, 0, 165, 1446, 1703, 3397, 3496, 0, 0, 9984, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 2816, 3072, 2560, 2304, 2048, 0, 0, 0, 1538, 1538, 0,
    73, 0, 843, 78, 78, 3405, 78, 0, 0, 0, 5120, 5120, 0, 5120, 0, 0, 0, 1884, 0, 0, 0, 0, 0, 0, 5376, 5376, 10240, 0, 0, 0, 0, 10240, 0, 10240, 10240, 10240,
    0, 10240, 10345, 10345, 10345, 1281, 1538, 0, 0, 3397, 73, 73, 1281, 1538, 0, 3397, 0, 73, 0, 0, 0, 3937, 3937, 0, 0, 0, 3937, 0, 0, 0, 3397, 1387, 1645,
    3397, 3397, 3438, 73, 73, 3405, 4183, 4183, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 11520, 0, 0, 0, 0, 0, 11520, 0, 0, 0, 0, 11520, 0, 11520, 11520, 11520, 0,
    11520, 11520, 11520, 11520, 1281, 1538, 0, 0, 3397, 73, 73, 66, 67, 0, 70, 0, 73, 0, 0, 0, 4864, 4864, 0, 0, 0, 0, 0, 4477, 3967, 3968, 78, 70, 0, 0, 0, 78,
    70, 843, 70, 0, 70, 78, 70, 70, 0, 70, 70, 70, 70, 0, 70, 70, 0, 0, 78, 0, 70, 70, 0, 0, 0, 0, 66, 67, 70, 70, 70, 1281, 1538, 70, 70, 3397, 73, 73, 0, 66,
    66, 67, 67, 70, 73, 0, 843, 3405, 3405, 3441, 3405, 0, 78, 78, 0, 4183, 0, 0, 0, 0, 0, 80, 80, 0, 78, 78, 78, 0, 116, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 78,
    116, 116, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 130, 3405, 3397, 0, 66, 67, 70, 78, 116, 0, 0, 0, 0, 0, 0, 0, 14080, 0, 843, 0, 0, 0, 0, 11776, 0, 0, 0, 0, 0, 0,
    202, 0, 0, 0, 11008, 0, 1502, 1759, 3552, 3553, 0, 239, 4183, 0, 241, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 4477, 3405, 0, 3405, 4331, 0, 236, 0, 0, 0, 0, 0, 201,
    0, 0, 137, 1281, 1421, 1538, 1678, 3472, 73, 0, 0, 1281, 0, 1538, 3397, 0, 0, 0, 0, 1281, 1538, 3397, 3405, 4183, 0, 13824, 3474, 3405, 0, 4245, 0, 12800,
    0, 0, 0, 6144, 0, 0, 3405, 3397, 3405, 3497, 3405, 0, 4267, 0, 0, 173, 3517, 4183, 4286, 0, 192, 0, 0, 0, 0, 234, 1281, 1538, 3397, 204, 1485, 1742, 3535,
    3536, 4305, 0, 0, 0, 6144, 0, 129, 3405, 3397, 0, 4352, 233, 0, 0, 1281, 1538, 3397, 3405, 4183, 211, 0, 0, 11264, 0, 0, 0, 0, 0, 0, 0, 14592, 130, 3405, 0,
    0, 3397, 3397, 0, 0, 3405, 0, 3397, 3397, 0, 197, 0, 0, 4552, 0, 0, 0, 0, 1386, 1644, 0, 3471, 4322, 227, 0, 0, 0, 0, 0, 0, 78, 70, 162, 0, 0, 0, 1281,
    1538, 3397, 3397, 0, 89, 89, 3397, 3397, 3405, 138, 1281, 1281, 1538, 1538, 3397, 73, 0, 0, 1386, 0, 1644, 3471, 73, 0, 843, 0, 3405, 3405, 3405, 0, 4183,
    0, 0, 0, 0, 124, 0, 153, 0, 0, 0, 0, 131, 131, 3405, 0, 0, 3397, 3397, 0, 0, 0, 185, 1281, 1538, 3397, 0, 0, 4183, 12528, 0, 0, 0, 0, 0, 1281, 0, 0, 0,
    3405, 3475, 148, 4183, 0, 0, 0, 151, 139, 1281, 1281, 1538, 1538, 3397, 73, 0, 0, 1538, 0, 0, 0, 0, 0, 0, 129, 129, 6144, 0, 0, 0, 0, 129, 3405, 3397, 88,
    3397, 3405, 3397, 3397, 88, 3397, 0, 183, 0, 0, 1281, 1538, 3397, 0, 3397, 3426, 3430, 3397, 0, 3397, 3405, 3397, 3397, 0, 3397, 3397, 3397, 3397, 0, 0,
    163, 0, 0, 1281, 1538, 3397, 3397, 0, 90, 90, 3397, 3397, 3405, 174, 0, 0, 0, 0, 0, 129, 3405, 3397, 0, 120, 0, 0, 124, 0, 3405, 0, 0, 1795, 0, 5, 73, 0, 0,
    0, 0, 0, 0, 0, 0, 82, 140, 1281, 1281, 1538, 1538, 3397, 73, 0, 0, 1795, 1795, 1795, 0, 0, 1795, 0, 5, 0, 0, 0, 0, 0, 1281, 1538, 3397, 3397, 0, 0, 6144, 0,
    0, 0, 3405, 3397, 89, 3397, 3405, 3397, 3397, 89, 3397, 90, 3397, 3405, 3397, 3397, 90, 3397, 91, 3397, 3405, 3397, 3397, 91, 3397, 182, 0, 0, 0, 1466,
    1723, 3516, 3405, 3405, 3405, 0, 4183, 172, 0, 0, 0, 10752, 0, 1281, 1538, 3397, 243, 0, 0, 0, 0, 0, 0, 0, 4864, 119, 0, 0, 0, 0, 0, 3405, 0, 0, 1884, 1892,
    1895, 1795, 1795, 0, 0, 121, 0, 0, 4477, 3405, 0, 0, 124, 0, 157, 0, 0, 0, 0, 0, 1386, 1644, 3471, 3473, 3405, 4183, 4183, 0, 0, 0, 0, 157, 0, 0, 0, 3405,
    212, 0, 157, 0, 0, 0, 0, 0, 0, 3488, 3489, 4183, 0, 228, 0, 0, 0, 0, 0, 0, 3584, 0, 132, 3405, 0, 0, 3397, 3397, 0, 0, 184, 0, 1466, 1723, 3516, 3405, 4183,
    4183, 0, 0, 193, 0, 0, 0, 14848, 14848, 14848, 14848, 0, 115, 0, 0, 0, 0, 0, 4183, 0, 0, 199, 0, 0, 0, 13568, 0, 0, 0, 0, 3405, 0, 0, 4183, 0, 0, 199, 0,
    12544, 0, 3463, 0, 0, 3397, 3464, 0, 0, 82, 0, 0, 0, 0, 0, 0, 131, 3405, 3397, 152, 0, 0, 0, 0, 0, 0, 0, 5120, 0, 6144, 0, 0, 0, 0, 3405, 3397, 1281, 1538,
    3397, 3397, 3397, 73, 73, 0, 220, 0, 0, 1281, 1538, 3397, 3405, 4183, 0, 0, 4183, 0, 0, 229, 0, 0, 0, 0, 0, 1281, 1538, 0, 0, 219, 0, 0, 221, 1281, 1538,
    3397, 3405, 3405, 0, 4183, 150, 0, 0, 0, 0, 1502, 1759, 3552, 3553, 3405, 4183, 0, 0, 237, 0, 0, 0, 0, 1446, 1703, 3397, 3496, 10496, 0, 4183, 0, 0, 0, 0,
    0, 0, 4183, 0, 0, 0, 0, 3407, 3397, 0, 0, 0, 3407, 3397, 843, 3397, 3397, 81, 3397, 3397, 3397, 3397, 0, 88, 88, 3397, 3397, 3405, 3430, 3397, 0, 0, 3426,
    0, 3397, 3397, 0, 91, 91, 3397, 3397, 3405, 133, 3405, 0, 0, 3397, 3397, 0, 0, 84, 0, 0, 0, 0, 0, 0, 1538, 0, 0, 0, 14336, 0, 0, 0, 14336, 14336, 0, 14336,
    0, 0, 0, 14592, 0, 0, 0, 0, 0, 85, 14592, 0, 14677, 0, 0, 0, 14592, 0, 0, 0, 843, 14592, 0, 0, 0, 0, 14592, 0, 14592, 0, 14592, 14592, 14592, 14592, 1281,
    1538, 0, 0, 3397, 73, 73, 14848, 843, 0, 0, 0, 0, 0, 14848, 0, 0, 843, 0, 14848, 0, 0, 14848, 0, 0, 14848, 0, 0, 0, 14848, 0, 0, 0, 0, 14848, 14848, 1281,
    1538, 0, 0, 3397, 73, 73, 0, 0, 5632, 5632, 0, 5632, 0, 0, 86, 0, 0, 0, 0, 0, 0, 4183, 118, 1281, 1538, 1795, 0, 5, 73, 0, 0, 116, 0, 0, 0, 0, 0, 179, 0, 0,
    78, 1795, 1281, 1538, 0, 0, 3397, 73, 73
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    358, 122, 126, 239, 130, 134, 141, 137, 145, 149, 153, 157, 164, 161, 168, 172, 176, 181, 216, 219, 188, 192, 265, 202, 205, 209, 356, 213, 220, 239, 196,
    224, 228, 230, 239, 177, 219, 238, 197, 234, 244, 370, 249, 196, 256, 264, 370, 237, 197, 198, 239, 371, 194, 256, 263, 370, 237, 197, 296, 269, 274, 239,
    239, 240, 282, 240, 286, 338, 294, 184, 341, 300, 304, 308, 312, 316, 320, 239, 239, 239, 195, 239, 252, 324, 239, 270, 259, 239, 239, 278, 331, 239, 239,
    239, 290, 346, 239, 277, 335, 239, 289, 345, 239, 326, 239, 239, 345, 239, 327, 239, 245, 346, 239, 363, 239, 350, 239, 362, 245, 353, 367, 353, 1048576,
    16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 0, 68, 1048640, 268435520, 64, 64, 64, 64, 12288, 100667392, 100663364, 12288,
    536875008, 100663360, 268435520, 100667456, 536875072, 100663360, 100667456, 101716032, 100667456, 100667456, 4032, 536907840, 101716032, 4032, -2147483648,
    -2013265920, 370151496, 675319872, 109539328, 110579776, 675319872, -2013265856, 675319808, -2013265920, 370151496, 109539392, 379015232, 675319872,
    142377024, 142377024, 110587968, 410812480, 675319872, 675319872, 775983168, 16, 32, 4096, 4096, 4096, 4096, 16777216, 16777216, 4194304, 33554432,
    33554432, 0, 1024, 2048, 512, 256, 128, 32768, 0, 0, 8, 4194304, 4194304, 4194304, 65536, 4194304, 65536, 8417280, 8536064, 12288, 262144, 262208, 8409088,
    4096, 1310784, 3932224, 32, 4096, 16777216, 16777216, 1073741824, 4, 12288, 12288, 12288, 0, 32768, 65536, 8404992, 8404992, 8536064, 8388608, 8388608,
    8388608, 8388608, 12288, 4096, 4194304, 65536, 8404992, 12288, 32768, 0, 0, 0, 0, 16, 4096, 0, 0, 0, 256, 12288, 32768, 32768, 0, 0, 245760, 262144,
    4194304, 4194304, 4194304, 4194304, 0, 0, 3840, 4194304, 65536, 0, 0, 0, 1048648, 8, 4194304, 0, 0, 0, 8, 0, 8, 0, 0, 4194304, 0, 114688, 32, 8388608,
    16777216, 33554432, 32, 8192, 33554432, 0, 0, 4194304, 4194304, 256, 16, 0, 0, 0, 32768, 0, 33554472, 16785472, 4177920, 4177920, 33554476, 16781458,
    4194305, 16781466, 12566528, 33554492, 4194305, 4194305, 25170066, 12566528, 50335898, 4194305, 50335898, 8392858, 25170074, 37748777, 25170074, 16785306,
    50339738, 50339738, 1572864, 2097152, 0, 0, 114688, 2097152, 0, 131072, 262144, 524288, 2097152, 114688, 524288, 2097152, 0, 0, 16777216, 33554440,
    33554472, 8256, 16781330, 256, 512, 1024, 2048, 0, 0, 256, 512, 2048, 0, 98304, 0, 16, 16, 32, 64, 4096, 0, 16384, 98304, 0, 0, 0, 2048, 65536, 0, 16, 32,
    4096, 12288
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'BARE_URL_CHARS',
    'important',
    'STRING_CONTENT1',
    'STRING_CONTENT2',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'&quot;&quot;'&quot;,
    &quot;''''&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'amzn-mobi7'&quot;,
    &quot;'and'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'url('&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="$end - $result idiv 64"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 64 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 243 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>          <!-- ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                         'only' | 'or' | 'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 53">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(53, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(52, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 51">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(51, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'amzn-mobi7' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'amzn-mobi7' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(54, $input, $state)"/>      <!-- S | '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                         'not' | 'only' | 'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(49, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' | 'not' |
                                                                                          'only' | 'or' | 'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 55                                          (: '{' :)
                       or $state[$p:lk] = 3526">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(44, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'amzn-mobi7' | 'and' |
                                                                                              'not' | 'only' | 'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 27                                    (: '(' :)
                             or $state[$p:lk] = 1734">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(6, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>      <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/>  <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' |
                                                                                         '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 57                                            (: '}' :)
                     or $state[$p:lk] = 3654">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(55, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(57, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production import (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>      <!-- S | '"' | "'" | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-import-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production import (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-import-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse import.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-import" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '@import' -->
    <xsl:variable name="state" select="p:parse-import-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-import-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'import', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>      <!-- S | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_atrule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-simple_atrule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 40">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-QUOTED_STRING($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-simple_atrule-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '*/' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'COMMENT', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/>            <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consumeT(24, $input, $state)"/>            <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '*/' -->
    <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/>            <!-- '*/' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(32, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(47, $input, $state)"/>          <!-- IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION | '"' |
                                                                                         "'" | '-' | 'url(' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 54">                                        <!-- 'url(' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-URL($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>      <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>      <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>      <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>      <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>      <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>      <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(60, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1606">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1670">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 17990                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 22150                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 25350">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 7)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 57                                          (: '}' :)
                       or $state[$p:lk] = 390                                         (: S S :)
                       or $state[$p:lk] = 1286                                        (: S COMMA :)
                       or $state[$p:lk] = 2246                                        (: S '/*' :)
                       or $state[$p:lk] = 2374                                        (: S ';' :)
                       or $state[$p:lk] = 3654                                        (: S '}' :)
                       or $state[$p:lk] = 148230">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(60, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1606">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1670">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 17990                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 22150                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 25350">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 7)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 7, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 7, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 57                                          (: '}' :)
                       or $state[$p:lk] = 390                                         (: S S :)
                       or $state[$p:lk] = 1286                                        (: S COMMA :)
                       or $state[$p:lk] = 2246                                        (: S '/*' :)
                       or $state[$p:lk] = 2374                                        (: S ';' :)
                       or $state[$p:lk] = 3654                                        (: S '}' :)
                       or $state[$p:lk] = 148230">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(60, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1606">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1670">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 17990                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 22150                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 25350">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 9)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 57                                          (: '}' :)
                       or $state[$p:lk] = 390                                         (: S S :)
                       or $state[$p:lk] = 1286                                        (: S COMMA :)
                       or $state[$p:lk] = 2246                                        (: S '/*' :)
                       or $state[$p:lk] = 2374                                        (: S ';' :)
                       or $state[$p:lk] = 3654                                        (: S '}' :)
                       or $state[$p:lk] = 148230">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(60, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                          DIMENSION | '"' | "'" | '-' | '/*' | ';' | 'url(' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(50, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' |
                                                                                                ':' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1606">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1670">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 17990                                     (: S '&quot;' STRING_CONTENT1 :)
                         or $state[$p:lk] = 22150                                     (: S &quot;'&quot; STRING_CONTENT2 :)
                         or $state[$p:lk] = 25350">                                 <!-- S IDENT S -->
              <xsl:variable name="state" select="p:memoized($state, 9)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-value($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 9, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 9, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-5($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = -2
                       or $state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 12                                          (: IDENT :)
                       or $state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 25                                          (: '&quot;' :)
                       or $state[$p:lk] = 26                                          (: &quot;'&quot; :)
                       or $state[$p:lk] = 28                                          (: ')' :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 37                                          (: ';' :)
                       or $state[$p:lk] = 57                                          (: '}' :)
                       or $state[$p:lk] = 390                                         (: S S :)
                       or $state[$p:lk] = 1286                                        (: S COMMA :)
                       or $state[$p:lk] = 2246                                        (: S '/*' :)
                       or $state[$p:lk] = 2374                                        (: S ';' :)
                       or $state[$p:lk] = 3654                                        (: S '}' :)
                       or $state[$p:lk] = 148230">                                  <!-- S IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(41, $input, $state)"/>  <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 390">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 24966">                                   <!-- S S S -->
            <xsl:variable name="state" select="p:memoized($state, 8)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-value($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] != -1
                    and $state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 1286                                         (: S COMMA :)
                    and $state[$p:lk] != 82310">                                    <!-- S S COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-values-3($input, $state)"/>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-values-4($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-values-5($input, $state)"/>
          <xsl:sequence select="p:parse-values-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(41, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 390">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(36, $input, $state)"/> <!-- S | IDENT | COMMA | '"' | "'" | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 24966">                                 <!-- S S S -->
              <xsl:variable name="state" select="p:memoized($state, 8)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
                  <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/> <!-- COMMA -->
                  <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-value($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 8, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 8, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-values-2($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 20                                         (: COMMA :)
                      and $state[$p:lk] != 1286                                       (: S COMMA :)
                      and $state[$p:lk] != 82310">                                  <!-- S S COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:try-values-3($input, $state)"/>
            <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>    <!-- COMMA -->
            <xsl:variable name="state" select="p:try-values-4($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-value($input, $state)
            "/>
            <xsl:variable name="state" select="p:try-values-5($input, $state)"/>
            <xsl:sequence select="p:try-values-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-values-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:try-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:try-values-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consumeT(3, $input, $state)"/>       <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 281">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 346">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 102681                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 106842">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 6)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 2316">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consume(36, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' | 'url(' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/> <!-- important | S | IDENT | COMMA | '"' | "'" | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 281">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 346">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 102681                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 106842">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 6)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 6, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 6, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 2316">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:try-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>    <!-- ':' -->
            <xsl:sequence select="p:try-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consumeT(36, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:try-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>       <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-values($input, $state)
    "/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 56">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(25, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (12,                                          (: IDENT :)
                                         29)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3596,                                  (: IDENT '|' :)
                                               3613)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(25, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 396                                           (: IDENT S :)
                     or $state[$p:lk] = 824                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1804                                          (: IDENT ')' :)
                     or $state[$p:lk] = 52748                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 52765">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 15">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 33">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 44">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(2, $input, $state)"/>              <!-- BARE_URL_CHARS -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'BARE_URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing BARE_URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-BARE_URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>             <!-- BARE_URL_CHARS -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>      <!-- BARE_URL_CHARS | S -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production URL (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-URL-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(54, $input, $state)"/>             <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'URL', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing URL.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-URL" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(54, $input, $state)"/>            <!-- 'url(' -->
    <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>          <!-- BARE_URL_CHARS | S | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25                                            (: '&quot;' :)
                     or $state[$p:l1] = 26">                                        <!-- "'" -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-QUOTED_STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:try-URL-1($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-BARE_URL($input, $state)
          "/>
          <xsl:variable name="state" select="p:try-URL-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(56, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | ')' | '-' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 18">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 54">                                      <!-- 'url(' -->
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-URL($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 32">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(32, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 14">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(14, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 12">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(12, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 20">                                      <!-- COMMA -->
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-QUOTED_STRING($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Try parsing the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 18">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consumeT(18, $input, $state)"/>  <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>  <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 54">                                    <!-- 'url(' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-URL($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>  <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 32">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>  <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 23">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>  <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/>  <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 12">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>  <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 20">                                    <!-- COMMA -->
              <xsl:variable name="state" select="p:consumeT(20, $input, $state)"/>  <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-QUOTED_STRING($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:try-expression-2($input, $state)"/>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 28">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-expression-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | '-' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>      <!-- S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA | DIMENSION |
                                                                                         '"' | "'" | '-' | 'url(' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>            <!-- FUNCTION -->
    <xsl:variable name="state" select="p:try-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consumeT(28, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 36">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(36, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'QUOTED_STRING', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing QUOTED_STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-QUOTED_STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(44, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(42, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 56                                            (: '|' :)
                     or $state[$p:lk] = 3596">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 45">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 11">                                  <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 38">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(38, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-QUOTED_STRING($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(45, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 29">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(61, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 56                                            (: '|' :)
                     or $state[$p:lk] = 3613">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- '*' -->
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 56">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(56, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(61, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         '/*' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 56                                            (: '|' :)
                     or $state[$p:lk] = 3596">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 33                                         (: '.' :)
                      and $state[$p:l1] != 36                                         (: ':' :)
                      and $state[$p:l1] != 39                                         (: '@' :)
                      and $state[$p:l1] != 44">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 15">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(15, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 44">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 36">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 39">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 44">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 36">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 39">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(58, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 33                                         (: '.' :)
                      and $state[$p:l1] != 36                                         (: ':' :)
                      and $state[$p:l1] != 39                                         (: '@' :)
                      and $state[$p:l1] != 44">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 29                                            (: '*' :)
                     or $state[$p:l1] = 56">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 56">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(25, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (12,                                    (: IDENT :)
                                               29)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(59, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | '/*' |
                                                                                            ':' | '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (3596,                            (: IDENT '|' :)
                                                     3613)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(25, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 396                                     (: IDENT S :)
                           or $state[$p:lk] = 824                                     (: '|' IDENT :)
                           or $state[$p:lk] = 972                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1164                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1228                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1292                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1356                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1420                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1740                                    (: IDENT '(' :)
                           or $state[$p:lk] = 2124                                    (: IDENT '.' :)
                           or $state[$p:lk] = 2252                                    (: IDENT '/*' :)
                           or $state[$p:lk] = 2316                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2508                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2828                                    (: IDENT '[' :)
                           or $state[$p:lk] = 3532                                    (: IDENT '{' :)
                           or $state[$p:lk] = 52748                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 52765">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(53, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 35                                          (: '/*' :)
                       or $state[$p:lk] = 55                                          (: '{' :)
                       or $state[$p:lk] = 3526">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 35">                                       <!-- '/*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 390">                            <!-- S S -->
                    <xsl:variable name="state" select="p:lookahead3(37, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 774">                            <!-- S IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1606">                           <!-- S '"' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1670">                           <!-- S "'" -->
                    <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3654">                           <!-- S '}' -->
                    <xsl:variable name="state" select="p:lookahead3(64, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '"' | "'" | '(' | '*' | '.' |
                                                                                                '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                '@namespace' | '[' | '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 57                                       (: '}' :)
                        and $state[$p:lk] != 2246                                     (: S '/*' :)
                        and $state[$p:lk] != 106054                                   (: S '}' '&quot;' :)
                        and $state[$p:lk] != 110150                                   (: S '}' &quot;'&quot; :)
                        and $state[$p:lk] != 143750">                               <!-- S S '/*' -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 2246                                       (: S '/*' :)
                      and $state[$p:lk] != 143750">                                 <!-- S S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/>     <!-- S -->
            <xsl:sequence select="p:try-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 421">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2277">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3685">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@namespace' | '[' |
                                                                                                '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 57                                       (: '}' :)
                        and $state[$p:lk] != 390                                      (: S S :)
                        and $state[$p:lk] != 774                                      (: S IDENT :)
                        and $state[$p:lk] != 805                                      (: ';' IDENT :)
                        and $state[$p:lk] != 1606                                     (: S '&quot;' :)
                        and $state[$p:lk] != 1637                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 1670                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 1701                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 2246                                     (: S '/*' :)
                        and $state[$p:lk] != 2374                                     (: S ';' :)
                        and $state[$p:lk] != 2405                                     (: ';' ';' :)
                        and $state[$p:lk] != 3654                                     (: S '}' :)
                        and $state[$p:lk] != 49573                                    (: ';' S IDENT :)
                        and $state[$p:lk] != 102821                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 106917                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 151973">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 2)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 774">                  <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 1606">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 1670">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 2246">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3654">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@namespace' | '[' | '|' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (390,                     (: S S :)
                                                             2374)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 57                             (: '}' :)
                                  and $state[$p:lk] != 143750                         (: S S '/*' :)
                                  and $state[$p:lk] != 151942">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 3)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 143750                          (: S S '/*' :)
                                   or $state[$p:lk] = 151942">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 396">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 2316">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 281">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 346">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 57">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 805                                        (: ';' IDENT :)
                      and $state[$p:lk] != 1637                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 1701                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 2374                                       (: S ';' :)
                      and $state[$p:lk] != 2405                                       (: ';' ';' :)
                      and $state[$p:lk] != 49573                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 102821                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 106917                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 151973">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(37, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 774">                        <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 1606">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 1670">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 2246">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3654">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@namespace' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (390,                           (: S S :)
                                                       2374)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 57                                   (: '}' :)
                            and $state[$p:lk] != 143750                               (: S S '/*' :)
                            and $state[$p:lk] != 151942">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 3)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 143750                                (: S S '/*' :)
                             or $state[$p:lk] = 151942">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 396">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 2316">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 281">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 346">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 57">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 4th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-rule-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 37">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 421">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2277">                           <!-- ';' '/*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3685">                           <!-- ';' '}' -->
                    <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                '@' | '@charset' | '@import' | '@media' | '@namespace' | '[' |
                                                                                                '|' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 12                                       (: IDENT :)
                        and $state[$p:lk] != 25                                       (: '&quot;' :)
                        and $state[$p:lk] != 26                                       (: &quot;'&quot; :)
                        and $state[$p:lk] != 35                                       (: '/*' :)
                        and $state[$p:lk] != 57                                       (: '}' :)
                        and $state[$p:lk] != 390                                      (: S S :)
                        and $state[$p:lk] != 774                                      (: S IDENT :)
                        and $state[$p:lk] != 805                                      (: ';' IDENT :)
                        and $state[$p:lk] != 1606                                     (: S '&quot;' :)
                        and $state[$p:lk] != 1637                                     (: ';' '&quot;' :)
                        and $state[$p:lk] != 1670                                     (: S &quot;'&quot; :)
                        and $state[$p:lk] != 1701                                     (: ';' &quot;'&quot; :)
                        and $state[$p:lk] != 2246                                     (: S '/*' :)
                        and $state[$p:lk] != 2374                                     (: S ';' :)
                        and $state[$p:lk] != 2405                                     (: ';' ';' :)
                        and $state[$p:lk] != 3654                                     (: S '}' :)
                        and $state[$p:lk] != 49573                                    (: ';' S IDENT :)
                        and $state[$p:lk] != 102821                                   (: ';' S '&quot;' :)
                        and $state[$p:lk] != 106917                                   (: ';' S &quot;'&quot; :)
                        and $state[$p:lk] != 151973">                               <!-- ';' S ';' -->
              <xsl:variable name="state" select="p:memoized($state, 2)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                  <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 6">                          <!-- S -->
                        <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 774">                  <!-- S IDENT -->
                              <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 1606">                 <!-- S '"' -->
                              <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 1670">                 <!-- S "'" -->
                              <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 2246">                 <!-- S '/*' -->
                              <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 3654">                 <!-- S '}' -->
                              <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' |
                                                                                                          '/*' | ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                          '@namespace' | '[' | '|' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] = (390,                     (: S S :)
                                                             2374)">                <!-- S ';' -->
                              <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 12                             (: IDENT :)
                                  and $state[$p:lk] != 25                             (: '&quot;' :)
                                  and $state[$p:lk] != 26                             (: &quot;'&quot; :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 57                             (: '}' :)
                                  and $state[$p:lk] != 143750                         (: S S '/*' :)
                                  and $state[$p:lk] != 151942">                     <!-- S S ';' -->
                        <xsl:variable name="state" select="p:memoized($state, 3)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1
                                   or $state[$p:lk] = 143750                          (: S S '/*' :)
                                   or $state[$p:lk] = 151942">                      <!-- S S ';' -->
                        <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:l1] eq 12">                         <!-- IDENT -->
                        <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/> <!-- S | ':' -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 396">                  <!-- IDENT S -->
                              <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:when test="$state[$p:lk] eq 2316">                 <!-- IDENT ':' -->
                              <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                                          PLUS | DIMENSION | '"' | "'" | '-' | 'url(' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 25">                         <!-- '"' -->
                        <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 281">                  <!-- '"' STRING_CONTENT1 -->
                              <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] eq 26">                         <!-- "'" -->
                        <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:variable name="state" as="item()+">
                          <xsl:choose>
                            <xsl:when test="$state[$p:lk] eq 346">                  <!-- "'" STRING_CONTENT2 -->
                              <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                              <xsl:sequence select="$state"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="$state"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] != 6                              (: S :)
                                  and $state[$p:lk] != 35                             (: '/*' :)
                                  and $state[$p:lk] != 37                             (: ';' :)
                                  and $state[$p:lk] != 57">                         <!-- '}' -->
                        <xsl:variable name="state" select="p:memoized($state, 4)"/>
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] != 0">
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:variable name="backtrack" select="$state"/>
                            <xsl:variable name="state" select="p:strip-result($state)"/>
                            <xsl:variable name="state" select="
                              if ($state[$p:error]) then
                                $state
                              else
                                p:try-declaration($input, $state)
                            "/>
                            <xsl:choose>
                              <xsl:when test="not($state[$p:error])">
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = -1">
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-declaration($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($state, $state, 2, $backtrack[$p:e0], -1, -3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = -3">
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 805                                        (: ';' IDENT :)
                      and $state[$p:lk] != 1637                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 1701                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 2374                                       (: S ';' :)
                      and $state[$p:lk] != 2405                                       (: ';' ';' :)
                      and $state[$p:lk] != 49573                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 102821                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 106917                                     (: ';' S &quot;'&quot; :)
                      and $state[$p:lk] != 151973">                                 <!-- ';' S ';' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/>    <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 774">                        <!-- S IDENT -->
                        <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 1606">                       <!-- S '"' -->
                        <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 1670">                       <!-- S "'" -->
                        <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 2246">                       <!-- S '/*' -->
                        <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- CommentContents -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 3654">                       <!-- S '}' -->
                        <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                    ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                    '@namespace' | '[' | '|' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] = (390,                           (: S S :)
                                                       2374)">                      <!-- S ';' -->
                        <xsl:variable name="state" select="p:lookahead3(38, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 12                                   (: IDENT :)
                            and $state[$p:lk] != 25                                   (: '&quot;' :)
                            and $state[$p:lk] != 26                                   (: &quot;'&quot; :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 57                                   (: '}' :)
                            and $state[$p:lk] != 143750                               (: S S '/*' :)
                            and $state[$p:lk] != 151942">                           <!-- S S ';' -->
                  <xsl:variable name="state" select="p:memoized($state, 3)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 3, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1
                             or $state[$p:lk] = 143750                                (: S S '/*' :)
                             or $state[$p:lk] = 151942">                            <!-- S S ';' -->
                  <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '/*' | ';' | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 12">                               <!-- IDENT -->
                  <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/> <!-- S | ':' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 396">                        <!-- IDENT S -->
                        <xsl:variable name="state" select="p:lookahead3(12, $input, $state)"/> <!-- ':' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:lk] eq 2316">                       <!-- IDENT ':' -->
                        <xsl:variable name="state" select="p:lookahead3(51, $input, $state)"/> <!-- S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                                    DIMENSION | '"' | "'" | '-' | 'url(' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 25">                               <!-- '"' -->
                  <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 281">                        <!-- '"' STRING_CONTENT1 -->
                        <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- '"' -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] eq 26">                               <!-- "'" -->
                  <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:lk] eq 346">                        <!-- "'" STRING_CONTENT2 -->
                        <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- "'" -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] != 6                                    (: S :)
                            and $state[$p:lk] != 35                                   (: '/*' :)
                            and $state[$p:lk] != 37                                   (: ';' :)
                            and $state[$p:lk] != 57">                               <!-- '}' -->
                  <xsl:variable name="state" select="p:memoized($state, 4)"/>
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] != 0">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="backtrack" select="$state"/>
                      <xsl:variable name="state" select="p:strip-result($state)"/>
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-declaration($input, $state)
                      "/>
                      <xsl:choose>
                        <xsl:when test="not($state[$p:error])">
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -1, -1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:sequence select="p:memoize($backtrack, $state, 4, $backtrack[$p:e0], -2, -2)"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = -1">
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:try-rule-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>        <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(35, $input, $state)"/>  <!-- S | IDENT | '"' | "'" | '}' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 390">                              <!-- S S -->
                  <xsl:variable name="state" select="p:lookahead3(35, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] eq 35">                                     <!-- '/*' -->
            <xsl:variable name="state" select="p:lookahead2(5, $input, $state)"/>   <!-- CommentContents -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:lk] eq 1571">                             <!-- '/*' CommentContents -->
                  <xsl:variable name="state" select="p:lookahead3(11, $input, $state)"/> <!-- '*/' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:lk] = 24966                                       (: S S S :)
                       or $state[$p:lk] = 124451">                                  <!-- '/*' CommentContents '*/' -->
            <xsl:variable name="state" select="p:memoized($state, 1)"/>
            <xsl:choose>
              <xsl:when test="$state[$p:lk] != 0">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="backtrack" select="$state"/>
                <xsl:variable name="state" select="p:strip-result($state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 35">                            <!-- '/*' -->
                      <xsl:variable name="state" select="
                        if ($state[$p:error]) then
                          $state
                        else
                          p:try-COMMENT($input, $state)
                      "/>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:try-rule-3($input, $state)"/>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:try-declaration($input, $state)
                "/>
                <xsl:variable name="state" select="p:try-rule-4($input, $state)"/>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:l1] = 37">                            <!-- ';' -->
                      <xsl:variable name="state" select="p:consumeT(37, $input, $state)"/> <!-- ';' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:l1] eq 6">                            <!-- S -->
                      <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                      <xsl:variable name="state" as="item()+">
                        <xsl:choose>
                          <xsl:when test="$state[$p:lk] eq 390">                    <!-- S S -->
                            <xsl:variable name="state" select="p:lookahead3(35, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 774">                    <!-- S IDENT -->
                            <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1606">                   <!-- S '"' -->
                            <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 1670">                   <!-- S "'" -->
                            <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:when test="$state[$p:lk] eq 3654">                   <!-- S '}' -->
                            <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' |
                                                                                                        ':' | '@' | '@charset' | '@import' | '@media' |
                                                                                                        '@namespace' | '[' | '|' | '}' -->
                            <xsl:sequence select="$state"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:sequence select="$state"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] != 12                               (: IDENT :)
                                and $state[$p:lk] != 25                               (: '&quot;' :)
                                and $state[$p:lk] != 26                               (: &quot;'&quot; :)
                                and $state[$p:lk] != 35                               (: '/*' :)
                                and $state[$p:lk] != 57                               (: '}' :)
                                and $state[$p:lk] != 2246">                         <!-- S '/*' -->
                      <xsl:variable name="state" select="p:memoized($state, 5)"/>
                      <xsl:choose>
                        <xsl:when test="$state[$p:lk] != 0">
                          <xsl:sequence select="$state"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:variable name="backtrack" select="$state"/>
                          <xsl:variable name="state" select="p:strip-result($state)"/>
                          <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                          <xsl:choose>
                            <xsl:when test="not($state[$p:error])">
                              <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:error]">
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] = -1
                                 or $state[$p:lk] = 2246">                          <!-- S '/*' -->
                      <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="not($state[$p:error])">
                    <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = -2
                     or $state[$p:lk] = 57                                            (: '}' :)
                     or $state[$p:lk] = 3654                                          (: S '}' :)
                     or $state[$p:lk] = 233862">                                    <!-- S S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-4($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(37, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(37, $input, $state)"/>    <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 6">                                  <!-- S -->
                <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '/*' | '}' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] eq 390">                          <!-- S S -->
                      <xsl:variable name="state" select="p:lookahead3(35, $input, $state)"/> <!-- S | IDENT | '"' | "'" | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 774">                          <!-- S IDENT -->
                      <xsl:variable name="state" select="p:lookahead3(20, $input, $state)"/> <!-- S | ':' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1606">                         <!-- S '"' -->
                      <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 1670">                         <!-- S "'" -->
                      <xsl:variable name="state" select="p:lookahead3(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:when test="$state[$p:lk] eq 3654">                         <!-- S '}' -->
                      <xsl:variable name="state" select="p:lookahead3(63, $input, $state)"/> <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' |
                                                                                                  '@' | '@charset' | '@import' | '@media' | '@namespace' | '[' |
                                                                                                  '|' | '}' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] != 12                                     (: IDENT :)
                          and $state[$p:lk] != 25                                     (: '&quot;' :)
                          and $state[$p:lk] != 26                                     (: &quot;'&quot; :)
                          and $state[$p:lk] != 35                                     (: '/*' :)
                          and $state[$p:lk] != 57                                     (: '}' :)
                          and $state[$p:lk] != 2246">                               <!-- S '/*' -->
                <xsl:variable name="state" select="p:memoized($state, 5)"/>
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] != 0">
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:variable name="backtrack" select="$state"/>
                    <xsl:variable name="state" select="p:strip-result($state)"/>
                    <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- S -->
                    <xsl:choose>
                      <xsl:when test="not($state[$p:error])">
                        <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -1, -1)"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="p:memoize($backtrack, $state, 5, $backtrack[$p:e0], -2, -2)"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = -1
                           or $state[$p:lk] = 2246">                                <!-- S '/*' -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 5th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | '/*' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 35">                                     <!-- '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-COMMENT($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 6th loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-6">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>      <!-- S | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-rule-6($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(55, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-5($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-6($input, $state)"/>
    <xsl:variable name="state" select="p:consume(57, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(62, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40                                      (: '@charset' :)
                           or $state[$p:l1] = 43">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 41">                                  <!-- '@import' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-import($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 42">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
          <xsl:sequence select="p:parse-css-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   : Memoize the backtracking result that was computed at decision point
   : $dpi for input position $e0. Reconstruct state from the parameters.
   :
   : @param $state the lexer state to be restored.
   : @param $update the lexer state containing updates.
   : @param $dpi the decision point id.
   : @param $e0 the input position.
   : @param $v the id of the successful alternative.
   : @param $lk the new lookahead code.
   : @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 16 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 16 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>