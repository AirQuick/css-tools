<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Wed May 17, 2017 01:13 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -xslt -main -tree -ll 3 -backtrack -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 9, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
    31, 31, 31, 31, 32, 33, 34, 35, 31, 9, 36, 37, 38, 39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 49, 31, 50, 51, 52, 53, 54, 31, 55, 56, 57, 58, 59, 60,
    61, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 196, 208, 180, 224, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 62, 1, 0, 2, 3, 0, 0, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 9, 36, 37, 38,
    39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35,
    31, 49, 31, 50, 51, 52, 53, 54, 31, 55, 56, 57, 58, 59, 60, 61, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 31, 31
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 542, 31, 32, 33, 34
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2016, 2019, 2027, 2033, 2589, 2034, 2035, 2428, 2845, 2035, 2035, 3237, 2725, 2743, 2983, 2501, 2743, 2044, 2504,
    2744, 3637, 2934, 3608, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2428, 3642, 2035, 2035, 2428, 3100,
    2743, 2983, 2345, 2743, 3969, 2504, 2744, 2840, 2934, 3337, 2934, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2016, 2019, 2027, 2033, 2589, 2034, 2035,
    2330, 3681, 2035, 2035, 2330, 3509, 2111, 3704, 2805, 2111, 2333, 2107, 2112, 3676, 2090, 2103, 2090, 2120, 2125, 2035, 2035, 2035, 2035, 2035, 2035, 2138,
    2035, 2035, 2148, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035,
    2035, 2035, 2035, 2035, 2082, 2138, 2190, 2201, 2215, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 2231, 2035, 2035, 2207, 2035, 2035, 2220, 2937, 2206,
    2035, 2206, 2035, 2220, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2612, 2245, 2253, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035,
    2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 3284, 2035, 3204, 2164, 2035, 2035, 2035, 2737,
    2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2035,
    3204, 2164, 2035, 2939, 2035, 2737, 2939, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035,
    2035, 2035, 2035, 2138, 2035, 2035, 3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310,
    2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2383, 2138, 4017, 2266, 3596, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3815, 2035, 2035, 2696, 2978,
    2035, 2279, 2080, 2695, 2978, 2695, 3744, 2293, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2307, 3204, 2319, 2035, 2035, 2341, 3954, 2035, 2193,
    2035, 2827, 2156, 2035, 3822, 2035, 2035, 2369, 2937, 3821, 2035, 3821, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2692, 2353, 2035, 2687, 2364, 2164,
    2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2381, 2310, 3168, 2310, 3782, 3209, 3214, 2035, 2035, 2035, 2035, 2035,
    2035, 2391, 3562, 3219, 3204, 2399, 2035, 2035, 2035, 2062, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153,
    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2407, 2413, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153,
    2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2436, 2442, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592,
    2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2462, 2455, 2475, 2470, 2483, 3106, 2140, 2035,
    3259, 3905, 2035, 2069, 3237, 2725, 2068, 2428, 2501, 2496, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2138,
    3530, 2512, 2520, 2164, 2035, 2536, 2533, 2737, 2535, 2035, 2035, 3592, 2035, 2035, 2311, 2978, 2035, 2153, 2080, 2310, 2978, 2310, 3744, 2258, 2423, 2035,
    2035, 2035, 2035, 2035, 2035, 2544, 2547, 2555, 2563, 2576, 2597, 2035, 2035, 2626, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2978, 2035, 2153, 2080, 2310,
    2978, 2310, 3744, 2258, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2607, 2620, 2659, 2140, 3658, 3585, 2646, 3290, 2069, 3354, 2667, 2675, 2130,
    2704, 2752, 2768, 2776, 2784, 2792, 2800, 2813, 2835, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2607, 2620, 2659, 2140, 3658, 3524, 2646,
    3290, 2069, 2182, 3067, 2675, 3686, 2863, 2752, 2871, 2776, 2784, 2874, 2800, 3730, 2835, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2607,
    2620, 2659, 2140, 3658, 3808, 2646, 3290, 2069, 3319, 2882, 2675, 2095, 2895, 2752, 2890, 2903, 2784, 2911, 2800, 2919, 2835, 2488, 2858, 2035, 2035, 2035,
    2035, 2035, 2035, 2138, 2035, 2607, 2620, 2659, 2140, 3658, 3524, 2646, 3290, 2069, 2182, 3067, 2675, 3686, 2927, 2752, 2947, 2776, 2784, 2951, 2800, 3844,
    2835, 2959, 2858, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2607, 2620, 2659, 2140, 3658, 3808, 2646, 3290, 2069, 3319, 2882, 2675, 2095, 2895, 2752,
    2890, 2776, 2784, 2911, 2800, 2919, 2835, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2607, 2620, 2659, 2140, 3658, 3524, 2646, 3290, 2069,
    2182, 3067, 2675, 3686, 2863, 2752, 2871, 2776, 2784, 2874, 2800, 3730, 2973, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 2991, 3001, 2965, 2271, 3006, 2164,
    2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035,
    2035, 3014, 3017, 2035, 3028, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153,
    2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2171, 2035, 3204, 2164, 3060, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153,
    2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 2223, 3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592,
    2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2326, 2138, 2035, 2356, 3204, 2164, 2035, 2035,
    2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 3264, 3252,
    3080, 3075, 3868, 2820, 2140, 3389, 2681, 2646, 3671, 2069, 2182, 3067, 3088, 3686, 2863, 2752, 2871, 2776, 2784, 2874, 2800, 3730, 2835, 2488, 2858, 2035,
    2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428, 3966, 3905, 2035, 2069, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 2504, 2426, 2344,
    2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 3052, 3749, 3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035,
    2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 3792, 3114, 3127, 3122, 3141, 3630, 2036, 3183, 3155, 3034,
    2035, 3793, 3787, 3135, 3149, 2282, 2757, 3163, 2285, 2760, 3181, 3623, 3163, 3191, 3199, 3227, 3232, 2035, 2035, 2035, 2035, 2035, 2177, 2138, 2583, 2035,
    3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035,
    2035, 2035, 2035, 2138, 3278, 2035, 3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310,
    2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3245, 3868, 2820, 2140, 3389, 2681, 2646, 3671, 2069, 3556, 3067, 3088, 3272, 2863, 2752,
    2871, 2776, 3298, 2874, 2800, 3730, 3306, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 3868, 2820, 2140, 3389, 2681, 2646, 3671, 2069,
    2182, 3067, 3088, 3686, 2863, 2752, 2871, 2776, 2784, 2874, 2800, 3730, 3314, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 3868, 2820,
    2140, 3420, 3046, 2646, 3932, 3919, 2182, 3067, 3327, 3686, 2863, 2752, 2871, 2776, 2784, 2874, 2800, 3730, 2835, 2525, 2858, 2035, 2035, 2035, 2035, 2035,
    3264, 3252, 3080, 3075, 3868, 2820, 2140, 3389, 2681, 2646, 3349, 2069, 2182, 3067, 3088, 4043, 2863, 2752, 2871, 2776, 2784, 2874, 2800, 3730, 2835, 2488,
    2858, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 3868, 2820, 2140, 3433, 2681, 2646, 3932, 2069, 3362, 3067, 3370, 3686, 2863, 3384, 3397, 2776,
    2784, 2874, 3408, 3730, 2835, 2488, 3428, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 3868, 2820, 2140, 3469, 2681, 2646, 2237, 2069, 2182, 3067,
    3441, 3686, 3449, 2752, 2871, 2776, 2784, 2874, 3464, 3730, 2835, 2488, 2858, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428,
    3966, 3905, 2035, 2299, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252,
    3080, 3075, 2731, 2718, 2140, 3020, 3094, 3905, 2993, 2069, 3237, 2725, 2632, 2428, 2501, 3456, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2568, 2423, 2035,
    2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428, 3966, 3905, 2035, 2069, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 3341, 2426, 2344,
    2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428, 3966, 3905, 3492, 2850, 3237, 2725, 2068, 2428,
    2501, 2934, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 3477, 3333, 3905,
    2599, 3485, 3503, 2725, 3960, 3726, 2501, 2934, 3262, 3768, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3517,
    2056, 2718, 2140, 3538, 3376, 3905, 2035, 3549, 3237, 2725, 3570, 2428, 2501, 2934, 3262, 3892, 2426, 2344, 2934, 3337, 2077, 2447, 2423, 2035, 2035, 2035,
    2035, 2035, 3264, 3252, 3080, 3578, 2731, 2718, 2140, 3604, 2638, 3905, 2035, 2069, 3237, 2050, 2068, 2373, 2501, 3616, 3653, 2504, 2426, 2344, 3666, 3337,
    2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 3400, 3966, 3905, 3854, 2069, 3237, 2725, 3040, 3694, 2501, 2934,
    3262, 2504, 2426, 2344, 3712, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 3720, 3738, 3905, 3700, 3757,
    3237, 2725, 2068, 2428, 2501, 3776, 3262, 2504, 3801, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3830, 2731, 2718,
    2140, 2428, 3966, 3905, 2035, 2069, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 2504, 3838, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035,
    3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428, 3966, 3905, 3852, 3919, 3237, 3862, 2068, 2428, 3889, 2934, 3541, 2504, 2426, 3764, 3882, 3900, 3913, 2418,
    3927, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3940, 3948, 2718, 2140, 2428, 3966, 3905, 2035, 2069, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 2504,
    2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 3495, 3966, 3905, 3645, 2069, 3237, 2725,
    2711, 2428, 2501, 2934, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428,
    3966, 3905, 2035, 3919, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 3264, 3252,
    3080, 3075, 2731, 2718, 2140, 2428, 3966, 3905, 2035, 2069, 3237, 2725, 3977, 2428, 2501, 2934, 3262, 2504, 2426, 2344, 2934, 3337, 2077, 2418, 2423, 2035,
    2035, 2035, 2035, 2035, 3264, 3252, 3080, 3075, 2731, 2718, 2140, 2428, 3966, 3874, 2035, 2069, 3237, 2725, 2068, 2428, 2501, 2934, 3262, 2504, 2426, 2344,
    2934, 3337, 2077, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 2035, 3985, 3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035,
    2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 3995, 3993, 4049, 3173, 3204, 2164, 2035, 2035, 2035, 2737,
    2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2138, 4003, 2035,
    4010, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310, 2035, 2153, 2035, 2035, 2035, 2035,
    2035, 2035, 2035, 2138, 3414, 4020, 3204, 2164, 2035, 2035, 2035, 2737, 2035, 2035, 2035, 3592, 2035, 2035, 2311, 2035, 2035, 2153, 2937, 2310, 2035, 2310,
    2035, 2153, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2016, 2019, 2027, 4028, 4036, 2034, 2035, 2428, 3905, 2035, 2035, 2428, 2653, 2743, 2983, 2345, 2743,
    3969, 2504, 2981, 2840, 2934, 3337, 2934, 2418, 2423, 2035, 2035, 2035, 2035, 2035, 0, 1327, 1329, 1329, 1329, 1329, 0, 0, 0, 1329, 1329, 1329, 1329, 1329,
    1329, 1329, 1329, 1329, 1329, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 2852, 0, 72, 0, 106, 0, 39, 39, 40, 40, 2858, 2858, 2852, 2852, 2852, 72, 39, 40, 0, 22604,
    78, 0, 3896, 0, 0, 0, 0, 0, 2852, 2858, 0, 3896, 0, 0, 161, 161, 0, 0, 0, 0, 0, 0, 39, 0, 3976, 0, 0, 0, 196, 0, 0, 0, 0, 0, 2963, 104, 0, 0, 2917, 0, 0, 0,
    107, 109, 2927, 3976, 0, 0, 0, 0, 0, 0, 0, 2917, 0, 107, 109, 3976, 0, 196, 0, 0, 196, 196, 0, 0, 0, 0, 0, 2963, 148, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 3896,
    69, 69, 0, 0, 2852, 0, 39, 40, 0, 0, 0, 0, 0, 0, 141, 3469, 0, 0, 2858, 44, 44, 44, 44, 0, 0, 0, 9216, 0, 9216, 0, 0, 0, 0, 11008, 0, 0, 0, 0, 2852, 2942,
    0, 0, 39, 39, 39, 0, 0, 0, 0, 0, 0, 3328, 0, 0, 39, 0, 39, 39, 0, 0, 0, 0, 0, 3072, 40, 0, 0, 39, 39, 0, 0, 2852, 0, 3072, 40, 0, 0, 0, 0, 0, 0, 4864, 4864,
    0, 0, 3072, 3072, 40, 40, 0, 0, 0, 0, 4213, 0, 90, 90, 0, 61, 0, 61, 61, 56, 56, 56, 61, 61, 0, 0, 2852, 0, 39, 40, 0, 0, 161, 0, 0, 0, 40, 0, 40, 40, 0, 0,
    0, 0, 0, 8704, 8704, 8704, 0, 39, 3072, 0, 0, 0, 0, 0, 37, 0, 105, 0, 131, 0, 0, 39, 3072, 0, 0, 161, 0, 0, 0, 0, 5888, 2852, 2858, 121, 0, 0, 6400, 0, 0,
    0, 0, 0, 39, 40, 0, 0, 0, 3328, 2858, 44, 44, 44, 44, 0, 0, 0, 9472, 0, 0, 0, 0, 0, 2917, 0, 0, 0, 171, 0, 0, 0, 3328, 0, 0, 0, 0, 0, 39, 40, 2858, 0, 0,
    44, 6656, 0, 0, 0, 0, 0, 68, 0, 0, 6656, 6656, 0, 0, 2852, 0, 39, 40, 3328, 0, 0, 0, 0, 0, 2852, 0, 106, 768, 161, 0, 0, 0, 0, 0, 0, 40, 0, 6912, 45, 0, 50,
    0, 0, 0, 6912, 0, 0, 2858, 22604, 22604, 8526, 22604, 8448, 0, 4608, 0, 4608, 4608, 0, 4608, 4608, 0, 0, 2852, 0, 39, 40, 3896, 0, 161, 0, 0, 161, 161, 0,
    0, 0, 0, 0, 2852, 0, 0, 7424, 5120, 7424, 5120, 5120, 0, 5120, 5120, 0, 0, 2852, 0, 39, 40, 3896, 0, 161, 0, 211, 35, 44, 0, 0, 0, 0, 41, 35, 0, 0, 0, 0, 0,
    35, 41, 0, 7742, 0, 7746, 7742, 35, 35, 35, 0, 35, 0, 35, 35, 7746, 7746, 0, 2852, 2852, 0, 39, 40, 3896, 0, 209, 0, 0, 3896, 158, 0, 0, 161, 0, 0, 0, 0,
    39, 40, 2858, 3896, 0, 0, 0, 0, 63, 0, 63, 63, 7936, 7936, 7936, 63, 63, 0, 0, 2852, 0, 39, 40, 3896, 0, 209, 210, 0, 0, 86, 0, 0, 0, 0, 0, 0, 86, 0, 63, 0,
    46, 48, 48, 48, 48, 0, 0, 0, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 8240, 8240, 0, 0, 2852, 0, 39, 40, 3896, 11520, 161, 0, 0, 0, 0, 2858, 77, 0, 77, 77,
    0, 0, 0, 11008, 0, 11008, 0, 0, 0, 44, 44, 44, 1327, 0, 0, 7168, 0, 0, 0, 0, 0, 0, 89, 89, 0, 3648, 0, 3648, 3648, 0, 0, 0, 0, 56, 0, 56, 56, 3648, 3648, 0,
    2852, 2886, 0, 39, 40, 0, 38912, 77, 38912, 3896, 0, 0, 0, 0, 91, 2852, 2858, 2858, 0, 0, 2852, 0, 106, 108, 110, 2928, 44, 44, 0, 3953, 0, 0, 39, 39, 40,
    40, 0, 2858, 2891, 44, 44, 44, 44, 0, 129, 0, 39, 133, 40, 134, 2858, 2951, 3977, 0, 0, 0, 4236, 3702, 2852, 2858, 2858, 0, 0, 2918, 0, 0, 0, 0, 6656, 0, 0,
    6656, 0, 0, 0, 0, 0, 39, 3072, 0, 0, 150, 0, 152, 0, 154, 155, 2972, 3896, 0, 0, 0, 0, 93, 2852, 2858, 2858, 2858, 44, 44, 44, 44, 0, 0, 39, 39, 40, 40,
    2858, 2858, 2852, 2852, 2852, 0, 39, 40, 0, 44, 44, 0, 3896, 0, 0, 0, 0, 0, 0, 0, 2852, 3997, 0, 0, 4256, 161, 0, 0, 0, 0, 73, 74, 43, 79, 0, 0, 0, 0, 0,
    2984, 169, 0, 170, 0, 172, 0, 174, 175, 2992, 4017, 0, 0, 4276, 161, 181, 0, 0, 0, 0, 0, 3002, 0, 187, 0, 188, 0, 190, 191, 3008, 4033, 0, 0, 4096, 197, 0,
    0, 0, 0, 107, 109, 2927, 0, 0, 2852, 0, 201, 0, 202, 203, 2858, 2858, 2891, 44, 44, 44, 44, 0, 0, 39, 39, 40, 40, 3328, 3328, 4044, 0, 0, 161, 206, 0, 0, 0,
    0, 132, 39, 40, 2858, 44, 44, 0, 0, 0, 0, 0, 2935, 2936, 0, 212, 0, 0, 213, 161, 0, 0, 0, 0, 154, 155, 2972, 3896, 0, 0, 2984, 0, 0, 0, 0, 0, 190, 191,
    3008, 130, 0, 39, 133, 40, 134, 2858, 2951, 0, 0, 2984, 104, 0, 130, 0, 0, 0, 154, 155, 2972, 3896, 173, 174, 175, 2992, 4017, 0, 0, 4276, 104, 130, 0, 0,
    0, 190, 191, 3008, 0, 2852, 130, 0, 0, 202, 203, 2858, 0, 0, 153, 0, 154, 155, 2972, 3896, 0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 4352, 0, 0, 2984, 0, 0, 0, 0,
    153, 0, 190, 191, 3008, 153, 39, 40, 3896, 0, 209, 0, 0, 0, 0, 8704, 0, 8704, 8704, 4044, 11264, 0, 161, 206, 0, 0, 0, 0, 161, 0, 0, 0, 0, 0, 2852, 0, 72,
    0, 38, 0, 0, 0, 0, 0, 0, 91, 91, 0, 44, 0, 0, 8704, 0, 8704, 0, 0, 2852, 0, 39, 40, 0, 44, 0, 0, 0, 8960, 0, 0, 0, 0, 0, 2852, 0, 91, 8960, 8960, 0, 0,
    2852, 0, 39, 40, 43, 44, 44, 0, 3896, 0, 0, 0, 0, 92, 2852, 2858, 2858, 96, 0, 2918, 0, 0, 0, 0, 10752, 0, 10752, 10752, 0, 0, 2304, 2560, 2048, 1792, 1536,
    0, 0, 39, 133, 40, 134, 2858, 2951, 0, 2852, 0, 2858, 2852, 2852, 2852, 2852, 0, 2852, 0, 2852, 2852, 3977, 0, 0, 0, 4236, 0, 2852, 2858, 2858, 97, 100,
    2852, 0, 0, 0, 39, 0, 40, 0, 2858, 2858, 44, 44, 44, 44, 0, 37, 44, 0, 0, 0, 0, 43, 37, 0, 37, 0, 43, 37, 37, 37, 37, 0, 37, 0, 37, 37, 0, 131, 73, 73, 74,
    74, 43, 43, 37, 37, 2852, 71, 73, 74, 79, 0, 0, 0, 0, 0, 37, 43, 43, 0, 0, 37, 0, 105, 79, 0, 0, 0, 162, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 13312, 13312,
    13312, 162, 161, 0, 0, 0, 0, 0, 37, 0, 0, 0, 37, 0, 0, 0, 73, 74, 43, 79, 0, 0, 162, 162, 0, 0, 0, 0, 2852, 0, 39, 40, 0, 0, 768, 0, 0, 768, 768, 0, 0, 0,
    0, 0, 6912, 6912, 6912, 0, 73, 74, 79, 0, 162, 0, 0, 162, 162, 0, 0, 0, 0, 2852, 2852, 0, 0, 57, 2852, 57, 2858, 2852, 2852, 2852, 2852, 44, 0, 0, 0, 0,
    2858, 2852, 0, 2858, 0, 0, 2852, 0, 0, 0, 0, 0, 2852, 2858, 142, 0, 0, 0, 0, 2963, 0, 0, 0, 53, 0, 53, 0, 0, 0, 51, 0, 51, 0, 0, 0, 0, 4213, 3702, 3671,
    3672, 161, 181, 0, 0, 10240, 0, 0, 3002, 4044, 0, 0, 161, 206, 0, 207, 208, 4044, 0, 205, 161, 206, 0, 0, 0, 0, 2852, 2942, 104, 0, 3977, 0, 0, 0, 4236, 89,
    2852, 2858, 2858, 98, 0, 2852, 0, 0, 0, 39, 40, 2858, 3896, 178, 0, 0, 11776, 0, 0, 0, 4213, 0, 0, 0, 0, 2852, 2942, 127, 0, 0, 123, 0, 0, 2852, 2942, 0,
    128, 3977, 0, 0, 139, 4236, 89, 2852, 2858, 2858, 99, 0, 2852, 72, 0, 3997, 0, 159, 4256, 161, 0, 0, 0, 0, 4181, 2852, 0, 0, 166, 0, 2984, 0, 0, 0, 0, 0,
    2852, 0, 92, 4033, 0, 0, 4096, 197, 198, 0, 0, 0, 55, 0, 55, 0, 0, 0, 84, 4181, 2852, 0, 89, 212, 10496, 0, 213, 161, 0, 0, 0, 0, 4181, 2852, 0, 89, 3977,
    0, 0, 0, 4236, 90, 2852, 2858, 0, 151, 0, 0, 154, 155, 2972, 3896, 0, 0, 0, 161, 0, 0, 165, 4033, 194, 0, 4096, 197, 0, 0, 0, 0, 4181, 2852, 0, 90, 80, 0,
    0, 0, 0, 2852, 0, 89, 5888, 0, 0, 0, 0, 2852, 2858, 0, 0, 115, 0, 0, 0, 0, 0, 2852, 0, 93, 122, 0, 0, 125, 2852, 2852, 0, 0, 0, 107, 0, 109, 0, 2927, 58,
    2852, 58, 2858, 2852, 2852, 2852, 2852, 3671, 2858, 0, 0, 2918, 0, 0, 0, 0, 7936, 0, 7936, 7936, 81, 0, 83, 0, 0, 2852, 0, 0, 0, 132, 0, 0, 0, 5888, 0, 0,
    2852, 2858, 0, 0, 124, 0, 2852, 2942, 0, 0, 0, 52, 6912, 52, 6912, 6912, 3896, 138, 0, 0, 0, 0, 2852, 2858, 59, 2852, 59, 2858, 2852, 2852, 2852, 2852,
    3671, 2858, 0, 0, 2918, 103, 0, 0, 39, 39, 40, 40, 0, 0, 2852, 0, 39, 3072, 0, 82, 0, 0, 0, 2852, 0, 0, 132, 39, 40, 2858, 3896, 0, 0, 0, 161, 0, 164, 0, 0,
    131, 0, 0, 73, 74, 43, 43, 2858, 44, 44, 44, 44, 0, 0, 106, 0, 132, 39, 40, 2858, 0, 0, 0, 0, 0, 0, 93, 93, 0, 167, 2852, 0, 106, 0, 0, 0, 0, 4181, 3671,
    3672, 3648, 3896, 0, 195, 0, 161, 0, 0, 0, 0, 4213, 0, 0, 0, 0, 189, 107, 109, 2927, 44, 44, 0, 0, 0, 0, 0, 2963, 0, 0, 0, 143, 0, 0, 146, 2852, 0, 0, 0,
    116, 0, 0, 0, 0, 0, 2917, 0, 149, 3896, 0, 0, 0, 161, 0, 0, 199, 0, 0, 12544, 0, 0, 2852, 0, 0, 0, 145, 0, 2852, 0, 0, 0, 202, 203, 2858, 2910, 2858, 2911,
    0, 0, 2852, 0, 0, 0, 161, 161, 0, 0, 0, 0, 0, 10752, 10752, 10752, 0, 5888, 0, 0, 0, 2852, 2858, 0, 0, 132, 0, 0, 39, 40, 2858, 3896, 179, 0, 0, 3896, 0, 0,
    0, 161, 163, 0, 0, 0, 768, 768, 0, 0, 0, 0, 37, 37, 0, 0, 0, 0, 0, 37, 43, 0, 161, 161, 0, 183, 0, 0, 185, 2852, 3671, 2858, 0, 0, 2918, 104, 0, 0, 39, 39,
    3072, 3072, 0, 0, 0, 0, 5632, 39, 40, 3328, 0, 60, 2852, 60, 2858, 2852, 2852, 2852, 2852, 161, 161, 182, 0, 0, 184, 0, 2852, 0, 153, 0, 202, 203, 2858, 0,
    12032, 0, 0, 0, 0, 0, 0, 92, 92, 0, 132, 39, 39, 40, 40, 2858, 2858, 2852, 2852, 2886, 0, 39, 40, 2858, 44, 44, 0, 3896, 114, 3896, 0, 0, 0, 161, 0, 9984,
    0, 0, 132, 0, 39, 40, 2858, 3896, 0, 12800, 0, 200, 2852, 0, 0, 0, 39, 40, 2858, 44, 44, 0, 3896, 0, 3896, 0, 0, 161, 161, 9728, 0, 0, 0, 5888, 0, 2852,
    2858, 0, 161, 0, 1024, 161, 161, 0, 0, 0, 0, 4213, 0, 89, 89, 0, 2881, 0, 2883, 2881, 2852, 2852, 2852, 2883, 2883, 2852, 2852, 2852, 0, 39, 40, 3328, 44,
    44, 0, 3896, 0, 0, 0, 0, 89, 2852, 2858, 2858, 0, 0, 2852, 0, 0, 0, 106, 0, 3896, 0, 12288, 0, 0, 0, 2852, 2858, 0, 0, 13056, 0, 0, 0, 13056, 13056, 0, 44,
    0, 0, 0, 0, 0, 13312, 0, 0, 0, 13568, 13568, 0, 0, 0, 0, 13568, 13568, 0, 0, 2852, 0, 39, 40, 40, 40, 0, 0, 0, 0, 0, 0, 5376, 5376, 1329, 1329, 0, 0, 2852,
    0, 39, 40, 0, 0, 2858, 44, 44, 44, 1327, 0, 0, 144, 0, 0, 2963, 0, 0, 0, 54, 13312, 13366, 13312, 13312
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    107, 185, 120, 117, 124, 128, 132, 136, 140, 149, 188, 182, 155, 159, 194, 292, 169, 198, 179, 191, 194, 233, 202, 205, 195, 142, 144, 151, 193, 175, 194,
    198, 223, 227, 230, 238, 197, 223, 150, 230, 237, 196, 223, 150, 230, 238, 198, 150, 162, 249, 145, 164, 165, 238, 253, 217, 260, 264, 268, 272, 219, 276,
    194, 194, 213, 215, 194, 279, 211, 194, 283, 194, 194, 289, 211, 194, 194, 242, 194, 194, 194, 172, 211, 241, 245, 194, 194, 208, 240, 244, 194, 194, 208,
    239, 243, 194, 194, 113, 240, 245, 194, 113, 285, 194, 256, 110, 194, 1024, 2097152, 33554432, 0, 0, 256, 0, 0, 2048, 4096, 16, 16, 5120, 67109888, 8388624,
    33554448, 134217744, 3088, 3088, 3088, 992, 1140868096, 992, 1140868112, 1140868112, 268435472, 541830164, 285212688, 541834260, 575384596, 1140868112,
    1142834192, 1176388624, -1572094948, -1572094948, 1024, 1024, 2097152, 2097152, 2048, 2048, 16384, 1024, 2097152, 2048, 2048, 5120, 5120, 16, 134217728,
    256, 512, 128, 64, 32, 16384, 0, 0, 4, 0, 8, 4, 1028, 4207616, 5124, 0, 0, 6144, 32768, 4202496, 1028, 5124, 2048, 2048, 5120, 8388608, 8388608, 8388624, 0,
    0, 3072, 5120, 5120, 5120, 8388608, 8388608, 16384, 0, 0, 0, 0, 8, 1024, 2097152, 2097152, 4194304, 4194304, 4194304, 4194304, 1028, 5124, 0, 0, 6144,
    131072, 0, 0, 0, 1, 0, 0, 0, 1, 1, 525283, 786947, 2097152, 2097152, 2097152, 2097152, 2048, 2048, 5120, 16384, 0, 0, 32768, 4202496, 4202496, 4268032, 4,
    4, 0, 0, 0, 32, 64, 128, 256, 0, 0, 0, 4, 0, 0, 8, 16, 1024, 524288, 0, 4096, 0, 256, 1, 3, 5, 2, 524288, 1, 1048577, 1048581, 1032, 524802, 525320, 524803,
    1573379, 260097, 1, 522241, 786947, 1048581, 1048583, 0, 14336, 16384, 98304, 480, 0, 0, 0, 32, 256, 6144, 8192, 16384, 32768, 4203520, 4268032, 4268032
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    &quot;'!important'&quot;,
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'STRING',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    &quot;'+'&quot;,
    &quot;'&gt;'&quot;,
    &quot;','&quot;,
    &quot;'~'&quot;,
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'and'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="$end - $result idiv 64"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 64 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 213 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(32, $input, $state)"/>            <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1W(9, $input, $state)"/>          <!-- S^WS | CommentContents | '/*' -->
    <xsl:variable name="state" select="p:consumeT(23, $input, $state)"/>            <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1W(11, $input, $state)"/>         <!-- S^WS | '*/' | '/*' -->
    <xsl:variable name="state" select="p:consumeT(27, $input, $state)"/>            <!-- '*/' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Try parsing Ignore.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-Ignore" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S^WS -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- S^WS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-COMMENT($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>          <!-- IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 30">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 41">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- NOT -->
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- '@' -->
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>         <!-- S^WS | IDENT | STRING | '/*' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(10, $input, $state)"/>         <!-- S^WS | ')' | '/*' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(26, $input, $state)"/>     <!-- S^WS | '(' | ',' | '/*' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' |
                                                                                         'only' | 'or' | 'screen' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 50">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 24">                                <!-- '(' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1W(24, $input, $state)"/>         <!-- S^WS | ',' | '/*' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' |
                                                                                         'or' | 'screen' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(23, $input, $state)"/>     <!-- S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '[' | '|' | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 52">                                      <!-- '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-query_declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(50, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/>         <!-- S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '[' | '|' -->
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(38, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/>         <!-- S^WS | IDENT | STRING | '/*' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1W(13, $input, $state)"/>         <!-- S^WS | '/*' | ';' -->
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(29, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(32, $input, $state)"/>     <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                         PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2W(33, $input, $state)"/> <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                           PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' |
                                                                                           ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 34                                          (: ';' :)
                       or $state[$p:lk] = 52                                          (: '}' :)
                       or $state[$p:lk] = 2122                                        (: IDENT ':' :)
                       or $state[$p:lk] = 2123">                                    <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 31">                                <!-- '/' -->
                  <xsl:variable name="state" select="p:consume(31, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                               PERCENTAGE | PLUS | COMMA | DIMENSION | '-' | '/*' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(27, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2W(33, $input, $state)"/> <!-- URL | important | S^WS | IDENT | STRING | FUNCTION | NUMBER | HEX |
                                                                                           PERCENTAGE | PLUS | COMMA | DIMENSION | ')' | '-' | '/' | '/*' |
                                                                                           ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 2122                                       (: IDENT ':' :)
                      and $state[$p:lk] != 2123">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/> <!-- S^WS | '/*' | ':' -->
            <xsl:variable name="state" select="p:consume(33, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1W(12, $input, $state)"/>         <!-- S^WS | '/*' | ':' -->
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" select="p:whitespace($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- GREATER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- TILDE -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consume(17, $input, $state)"/>   <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consume(16, $input, $state)"/>   <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 2">                                     <!-- URL -->
              <xsl:variable name="state" select="p:consume(2, $input, $state)"/>    <!-- URL -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 29">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consume(29, $input, $state)"/>   <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consume(22, $input, $state)"/>   <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 13">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consume(13, $input, $state)"/>   <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 11">                                    <!-- STRING -->
              <xsl:variable name="state" select="p:consume(11, $input, $state)"/>   <!-- STRING -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 10">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consume(10, $input, $state)"/>   <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="p:consume(19, $input, $state)"/>   <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | ')' | '-' | '/*' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 25">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Try parsing the 1st loop of production expression (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(25, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' | '/*' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 17">                                    <!-- PLUS -->
              <xsl:variable name="state" select="p:consumeT(17, $input, $state)"/>  <!-- PLUS -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 16">                                    <!-- PERCENTAGE -->
              <xsl:variable name="state" select="p:consumeT(16, $input, $state)"/>  <!-- PERCENTAGE -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 2">                                     <!-- URL -->
              <xsl:variable name="state" select="p:consumeT(2, $input, $state)"/>   <!-- URL -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HEX -->
              <xsl:variable name="state" select="p:consumeT(15, $input, $state)"/>  <!-- HEX -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 29">                                    <!-- '-' -->
              <xsl:variable name="state" select="p:consumeT(29, $input, $state)"/>  <!-- '-' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- DIMENSION -->
              <xsl:variable name="state" select="p:consumeT(22, $input, $state)"/>  <!-- DIMENSION -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 13">                                    <!-- NUMBER -->
              <xsl:variable name="state" select="p:consumeT(13, $input, $state)"/>  <!-- NUMBER -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 11">                                    <!-- STRING -->
              <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/>  <!-- STRING -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 10">                                    <!-- IDENT -->
              <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>  <!-- IDENT -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="p:consumeT(19, $input, $state)"/>  <!-- COMMA -->
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1W(28, $input, $state)"/>     <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | ')' | '-' | '/*' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 25">                                      <!-- ')' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:try-expression-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:try-expression-1($input, $state)"/>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>            <!-- FUNCTION -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:try-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>            <!-- ')' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/>            <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consumeT(33, $input, $state)"/>      <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- IDENT | '*' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/>    <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3274">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 42">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(35, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- IDENT | STRING -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>           <!-- ']' -->
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(41, $input, $state)"/>            <!-- '[' -->
    <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>          <!-- IDENT | '*' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/>    <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3274">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>            <!-- IDENT -->
    <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>          <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 42">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consumeT(7, $input, $state)"/> <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consumeT(8, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consumeT(9, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consumeT(35, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/> <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(6, $input, $state)"/> <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- IDENT | STRING -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>           <!-- ']' -->
    <xsl:variable name="state" select="p:consumeT(42, $input, $state)"/>            <!-- ']' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:consumeT(30, $input, $state)"/>            <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/>            <!-- IDENT -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 51">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 51">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consumeT(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- '|' -->
    <xsl:variable name="state" select="p:consumeT(51, $input, $state)"/>            <!-- '|' -->
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2W(31, $input, $state)"/>   <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | ')' | '*' |
                                                                                         '.' | '/*' | ':' | '[' | '{' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3274,                                  (: IDENT '|' :)
                                               3290)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(8, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 44234                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 44250                                         (: '*' '|' IDENT :)
                     or $state[$p:lk] = 109770                                        (: IDENT '|' '*' :)
                     or $state[$p:lk] = 109786">                                    <!-- '*' '|' '*' -->
          <xsl:variable name="state" select="p:memoized($state, 2)"/>
          <xsl:choose>
            <xsl:when test="$state[$p:lk] != 0">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="backtrack" select="$state"/>
              <xsl:variable name="state" select="p:strip-result($state)"/>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:try-namespace_prefix($input, $state)
              "/>
              <xsl:choose>
                <xsl:when test="not($state[$p:error])">
                  <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -1, -1)"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="p:memoize($backtrack, $state, 2, $backtrack[$p:e0], -2, -2)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = -1
                     or $state[$p:lk] = 51">                                        <!-- '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- IDENT | '*' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-element_name($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- '*' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' | '.' |
                                                                                         '/*' | ':' | '[' | '{' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 14">                                   <!-- HASH -->
              <xsl:variable name="state" select="p:lookahead2W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' | '.' |
                                                                                           '/*' | ':' | '[' | '{' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1934">                           <!-- HASH '.' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2126">                           <!-- HASH ':' -->
                    <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2638">                           <!-- HASH '[' -->
                    <xsl:variable name="state" select="p:lookahead3(15, $input, $state)"/> <!-- IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3214">                           <!-- HASH '{' -->
                    <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3278">                           <!-- HASH '|' -->
                    <xsl:variable name="state" select="p:lookahead3(8, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (654,                               (: HASH IDENT :)
                                                   910,                               (: HASH HASH :)
                                                   1678)">                          <!-- HASH '*' -->
                    <xsl:variable name="state" select="p:lookahead3W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' |
                                                                                                 '.' | '/*' | ':' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1102,                              (: HASH PLUS :)
                                                   1166,                              (: HASH GREATER :)
                                                   1230,                              (: HASH COMMA :)
                                                   1294)">                          <!-- HASH TILDE -->
                    <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 30">                                   <!-- '.' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- IDENT -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 670">                            <!-- '.' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' |
                                                                                                 '.' | '/*' | ':' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 33">                                   <!-- ':' -->
              <xsl:variable name="state" select="p:lookahead2(14, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 673">                            <!-- ':' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' |
                                                                                                 '.' | '/*' | ':' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 801">                            <!-- ':' FUNCTION -->
                    <xsl:variable name="state" select="p:lookahead3W(25, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE |
                                                                                                 PLUS | COMMA | DIMENSION | '-' | '/*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2145">                           <!-- ':' ':' -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- IDENT | FUNCTION -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 41">                                   <!-- '[' -->
              <xsl:variable name="state" select="p:lookahead2(15, $input, $state)"/> <!-- IDENT | '*' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 681">                            <!-- '[' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH |
                                                                                                SUBSTRINGMATCH | '=' | ']' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1705">                           <!-- '[' '*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3305">                           <!-- '[' '|' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 10                                       (: IDENT :)
                        and $state[$p:lk] != 17                                       (: PLUS :)
                        and $state[$p:lk] != 18                                       (: GREATER :)
                        and $state[$p:lk] != 19                                       (: COMMA :)
                        and $state[$p:lk] != 20                                       (: TILDE :)
                        and $state[$p:lk] != 26                                       (: '*' :)
                        and $state[$p:lk] != 50                                       (: '{' :)
                        and $state[$p:lk] != 51">                                   <!-- '|' -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 14">                          <!-- HASH -->
                        <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/> <!-- HASH -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 30">                          <!-- '.' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-class($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 41">                          <!-- '[' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-attrib($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-pseudo($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 30">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 41">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(14, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 30">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 41">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1W(30, $input, $state)"/>     <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' | '.' |
                                                                                         '/*' | ':' | '[' | '{' | '|' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 14">                                   <!-- HASH -->
              <xsl:variable name="state" select="p:lookahead2W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' | '.' |
                                                                                           '/*' | ':' | '[' | '{' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 1934">                           <!-- HASH '.' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2126">                           <!-- HASH ':' -->
                    <xsl:variable name="state" select="p:lookahead3(14, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2638">                           <!-- HASH '[' -->
                    <xsl:variable name="state" select="p:lookahead3(15, $input, $state)"/> <!-- IDENT | '*' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3214">                           <!-- HASH '{' -->
                    <xsl:variable name="state" select="p:lookahead3W(17, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3278">                           <!-- HASH '|' -->
                    <xsl:variable name="state" select="p:lookahead3(8, $input, $state)"/> <!-- IDENT | '*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (654,                               (: HASH IDENT :)
                                                   910,                               (: HASH HASH :)
                                                   1678)">                          <!-- HASH '*' -->
                    <xsl:variable name="state" select="p:lookahead3W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' |
                                                                                                 '.' | '/*' | ':' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] = (1102,                              (: HASH PLUS :)
                                                   1166,                              (: HASH GREATER :)
                                                   1230,                              (: HASH COMMA :)
                                                   1294)">                          <!-- HASH TILDE -->
                    <xsl:variable name="state" select="p:lookahead3W(22, $input, $state)"/> <!-- S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '[' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 30">                                   <!-- '.' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- IDENT -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 670">                            <!-- '.' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' |
                                                                                                 '.' | '/*' | ':' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 33">                                   <!-- ':' -->
              <xsl:variable name="state" select="p:lookahead2(14, $input, $state)"/> <!-- IDENT | FUNCTION | ':' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 673">                            <!-- ':' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3W(30, $input, $state)"/> <!-- S^WS | IDENT | HASH | PLUS | GREATER | COMMA | TILDE | '*' |
                                                                                                 '.' | '/*' | ':' | '[' | '{' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 801">                            <!-- ':' FUNCTION -->
                    <xsl:variable name="state" select="p:lookahead3W(25, $input, $state)"/> <!-- URL | S^WS | IDENT | STRING | NUMBER | HEX | PERCENTAGE |
                                                                                                 PLUS | COMMA | DIMENSION | '-' | '/*' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 2145">                           <!-- ':' ':' -->
                    <xsl:variable name="state" select="p:lookahead3(7, $input, $state)"/> <!-- IDENT | FUNCTION -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 41">                                   <!-- '[' -->
              <xsl:variable name="state" select="p:lookahead2(15, $input, $state)"/> <!-- IDENT | '*' | '|' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 681">                            <!-- '[' IDENT -->
                    <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH |
                                                                                                SUBSTRINGMATCH | '=' | ']' | '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 1705">                           <!-- '[' '*' -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- '|' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:when test="$state[$p:lk] eq 3305">                           <!-- '[' '|' -->
                    <xsl:variable name="state" select="p:lookahead3(0, $input, $state)"/> <!-- IDENT -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] != 10                                       (: IDENT :)
                        and $state[$p:lk] != 17                                       (: PLUS :)
                        and $state[$p:lk] != 18                                       (: GREATER :)
                        and $state[$p:lk] != 19                                       (: COMMA :)
                        and $state[$p:lk] != 20                                       (: TILDE :)
                        and $state[$p:lk] != 26                                       (: '*' :)
                        and $state[$p:lk] != 50                                       (: '{' :)
                        and $state[$p:lk] != 51">                                   <!-- '|' -->
              <xsl:variable name="state" select="p:memoized($state, 1)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 14">                          <!-- HASH -->
                        <xsl:variable name="state" select="p:consumeT(14, $input, $state)"/> <!-- HASH -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 30">                          <!-- '.' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-class($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 41">                          <!-- '[' -->
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-attrib($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="state" select="
                          if ($state[$p:error]) then
                            $state
                          else
                            p:try-pseudo($input, $state)
                        "/>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 1, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10                                            (: IDENT :)
                     or $state[$p:l1] = 26                                            (: '*' :)
                     or $state[$p:l1] = 51">                                        <!-- '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 50">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 17                                    (: PLUS :)
                             or $state[$p:l1] = 18                                    (: GREATER :)
                             or $state[$p:l1] = 20">                                <!-- TILDE -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-combinator($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '[' | '|' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 19">                                     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(19, $input, $state)"/>     <!-- COMMA -->
            <xsl:variable name="state" select="p:lookahead1W(22, $input, $state)"/> <!-- S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '[' | '|' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-selector($input, $state)
            "/>
            <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(18, $input, $state)"/>     <!-- S^WS | IDENT | STRING | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 34">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2W(17, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 674                                        (: ';' IDENT :)
                      and $state[$p:lk] != 738">                                    <!-- ';' STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(34, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1W(16, $input, $state)"/> <!-- S^WS | IDENT | STRING | '/*' -->
            <xsl:variable name="state" select="p:whitespace($input, $state)"/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1W(17, $input, $state)"/>       <!-- S^WS | IDENT | STRING | '/*' | '}' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:whitespace($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(50, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1W(29, $input, $state)"/>     <!-- END | S^WS | IDENT | HASH | '*' | '.' | '/*' | ':' | '@charset' |
                                                                                         '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 1">                                       <!-- END -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 37                                    (: '@charset' :)
                             or $state[$p:l1] = 38                                    (: '@import' :)
                             or $state[$p:l1] = 40">                                <!-- '@namespace' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-simple_atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 39">                                <!-- '@media' -->
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:whitespace($input, $state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-rule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume whitespace.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:whitespace" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="end" select="$state[$p:b1]"/>
    <xsl:choose>
      <xsl:when test="$begin eq $end">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="whitespace">
          <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
        </xsl:variable>
        <xsl:sequence select="
          0,
          $state[$p:b0],
          $end,
          subsequence($state, $p:e0 + 1),
          $whitespace/node()
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Use p:match to fetch the next token, but skip any leading
   ! whitespace.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start.
   ! @param $token-set the valid token set id.
   ! @return a sequence of three values: the token code of the result
   ! token, with input string positions of token begin and end.
  -->
  <xsl:function name="p:matchW">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="match" select="p:match($input, $begin, $token-set)"/>
    <xsl:choose>
      <xsl:when test="$match[1] = 4">                                               <!-- S^WS -->
        <xsl:sequence select="p:matchW($input, $match[3], $token-set)"/>
      </xsl:when>
      <xsl:when test="$match[1] = 32">                                              <!-- '/*' -->
        <xsl:variable name="memo">
          <xsl:element name="memo"/>
        </xsl:variable>
        <xsl:variable name="state" select="p:try-Ignore($input, (0, $begin, $begin, $match, 0, 0, 0, 0, 0, 0, false(), $memo/node()))"/>
        <xsl:sequence select="p:matchW($input, $state[$p:e0], $token-set)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$match"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:matchW($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:matchW($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3 with whitespace skipping.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3W" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:matchW($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   : Memoize the backtracking result that was computed at decision point
   : $dpi for input position $e0. Reconstruct state from the parameters.
   :
   : @param $state the lexer state to be restored.
   : @param $update the lexer state containing updates.
   : @param $dpi the decision point id.
   : @param $e0 the input position.
   : @param $v the id of the successful alternative.
   : @param $lk the new lookahead code.
   : @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 4 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 4 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse start symbol atrule from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-atrule" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-atrule($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse start symbol negation from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-negation" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-negation($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>