<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Tue May 16, 2017 15:47 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> 
     see http://bottlecaps.de/rex/ -->
<!-- REx command line: CSS3.ebnf -tree -main -xslt -ll 3 -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="14"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 9, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
    31, 31, 31, 31, 32, 33, 34, 35, 31, 9, 36, 37, 38, 39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 49, 31, 50, 51, 52, 53, 54, 31, 55, 56, 57, 58, 59, 60,
    61, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 196, 208, 180, 224, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
    203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 62, 1, 0, 2, 3, 0, 0, 62, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 9, 36, 37, 38,
    39, 40, 41, 31, 42, 43, 31, 44, 45, 46, 47, 48, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 33, 34, 35,
    31, 49, 31, 50, 51, 52, 53, 54, 31, 55, 56, 57, 58, 59, 60, 61, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 31, 31
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 566, 567
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647,
    3647, 3647, 3647, 3647, 3647, 3647, 2016, 4249, 2822, 2029, 2050, 2058, 2035, 3707, 2350, 3522, 2078, 2097, 2127, 2526, 3235, 2962, 2139, 3236, 2269, 2151,
    3646, 2272, 3183, 2019, 2162, 2089, 2273, 4134, 2180, 2684, 3647, 3647, 2041, 4249, 2822, 2029, 2050, 2058, 2035, 3647, 2350, 3522, 2078, 2064, 2127, 2526,
    3235, 3094, 2786, 3236, 2269, 3767, 3646, 2272, 2326, 2019, 2162, 2215, 2273, 2183, 2180, 2684, 3647, 3647, 2016, 4249, 2822, 2029, 2050, 2058, 2035, 3707,
    2350, 3522, 2078, 2193, 2201, 2526, 3235, 2834, 2211, 3236, 3866, 2224, 2235, 2244, 2402, 3864, 2253, 3751, 2245, 2284, 2281, 2260, 3647, 3647, 3861, 3647,
    3647, 3647, 3647, 3647, 3647, 2292, 2365, 2236, 2325, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648,
    2385, 3647, 3647, 3647, 3861, 3647, 2317, 2108, 2103, 2313, 3647, 2334, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2809, 2385, 3647, 2131, 3647, 3647, 3164,
    2420, 2129, 2385, 3647, 3165, 2129, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 2042, 4309, 3901, 2358, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185,
    2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 3214, 3798, 3647, 3647, 2292, 2365, 3647,
    3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 3647,
    3647, 3647, 3647, 2292, 2365, 3647, 3009, 3841, 3766, 3009, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647,
    3647, 3647, 3861, 3647, 3647, 3647, 3647, 3647, 3647, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648,
    2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 2771, 2381, 2376, 2767, 3647, 2394, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 3028, 2401, 3647,
    2596, 2411, 3647, 2599, 2685, 3648, 2410, 3647, 2600, 3026, 2419, 2684, 3647, 3647, 3747, 3647, 3647, 3647, 3562, 2428, 2443, 2292, 2464, 3647, 3647, 2949,
    2476, 3647, 2945, 2185, 2490, 4245, 4219, 3647, 3040, 2069, 2420, 3648, 2501, 3040, 2070, 3333, 2385, 3647, 3647, 3647, 3680, 3293, 3294, 3647, 2511, 3684,
    3294, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2346, 3648, 2341, 3647, 4140, 2542, 2650, 2539, 3647, 3647,
    3132, 3647, 3782, 3784, 3838, 3819, 3824, 2552, 3090, 3647, 3647, 3422, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647,
    4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 2468, 2479, 2482, 3403, 2292, 2700, 3647, 2467, 2703, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647,
    3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 2585, 2568, 2575, 2580, 2292, 2849, 3647, 2584, 2852, 3766, 3647,
    3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 2593, 2143, 2608, 2629, 2635, 2621, 2615, 2643,
    3308, 3180, 3665, 3961, 2667, 3647, 2983, 2962, 2139, 2984, 2269, 2678, 3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3861, 3647,
    3647, 2203, 3579, 3994, 2693, 2292, 2365, 3647, 4299, 3841, 3766, 2265, 3647, 2185, 2385, 3647, 2544, 2411, 3647, 4139, 2685, 3648, 2299, 3647, 4140, 3026,
    2559, 2684, 3647, 3647, 3146, 3647, 3311, 2711, 2722, 2740, 2714, 2760, 2365, 3647, 3647, 3488, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 2411, 3647, 4139,
    2685, 3648, 2299, 3647, 4140, 3026, 2559, 2684, 3647, 3647, 3861, 3647, 3647, 3647, 3801, 3804, 3647, 2779, 3662, 3180, 2798, 3979, 2806, 2817, 2752, 2896,
    2830, 2842, 2872, 2860, 2868, 2880, 2904, 2925, 2933, 2941, 2957, 2970, 2978, 2992, 3647, 3647, 3861, 3647, 3647, 3647, 3801, 3804, 3647, 2779, 3662, 3180,
    2798, 3979, 2806, 2817, 2983, 2896, 2830, 3005, 2872, 3017, 3647, 2880, 3036, 2368, 2933, 3647, 2957, 4217, 2978, 2992, 3647, 3647, 3861, 3647, 3647, 3647,
    3801, 3804, 3647, 2779, 3662, 3180, 2798, 3979, 2806, 2817, 3477, 2896, 2830, 3048, 2872, 3064, 3053, 2880, 3083, 3102, 2933, 3071, 2957, 3110, 2978, 2992,
    3647, 3647, 3861, 3647, 3647, 3647, 3801, 3804, 3647, 2779, 3662, 3180, 2798, 3979, 2806, 2817, 2983, 2896, 2830, 3005, 2872, 3017, 3408, 2880, 3036, 3411,
    2933, 3408, 2957, 3118, 3126, 2992, 3647, 3647, 3861, 3647, 3647, 3647, 3801, 3804, 3647, 2779, 3662, 3180, 2798, 3979, 2806, 2817, 3477, 2896, 2830, 3048,
    2872, 3064, 3053, 2880, 3083, 2368, 2933, 3071, 2957, 3110, 2978, 2992, 3647, 3647, 3861, 3647, 3647, 3647, 3801, 3804, 3647, 2779, 3662, 3180, 2798, 3979,
    2806, 2817, 2983, 2896, 2830, 3005, 2872, 3017, 3647, 2880, 3036, 2368, 2933, 3647, 3140, 4217, 2978, 2992, 3647, 3647, 3621, 2227, 2227, 2226, 3647, 3157,
    3173, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647,
    3861, 3203, 3647, 3199, 3191, 3195, 3647, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647,
    4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 2493, 4048, 3647, 3647, 2292, 2435, 3212, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647,
    3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 4051, 3647, 3647, 3636, 2292, 2747, 3647, 3647, 3841, 3766, 3647,
    3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3647, 3647, 3647, 3647, 4166, 3222, 2292,
    2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3244, 3666,
    3261, 3277, 3255, 3264, 3272, 2779, 3290, 3180, 3302, 3979, 2806, 3319, 2983, 2896, 2830, 3329, 2872, 3017, 3647, 2880, 3036, 2368, 2933, 3647, 2957, 4217,
    2978, 2992, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3282, 3961, 2667, 3647, 2983, 2962, 2139, 2984, 2269, 3352, 3647, 2272,
    2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3861, 3647, 3647, 2503, 3647, 3374, 3396, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185,
    2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3419, 2790, 3436, 3452, 3430, 3439, 3447, 3465, 3485, 3915,
    3457, 3496, 4017, 3647, 2531, 3712, 3472, 2886, 3075, 3504, 3521, 3530, 3544, 3073, 3539, 2891, 3531, 3513, 3552, 3510, 3647, 3647, 3861, 3055, 3647, 3056,
    3570, 3647, 3647, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647,
    3647, 3647, 3861, 3647, 3647, 3321, 3855, 3647, 3647, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648,
    2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3244, 3666, 3261, 3277, 3587, 3591, 3272, 2779, 3290, 3180, 3302, 3979, 2806, 3319, 2983, 4186, 2830, 3329,
    3599, 3017, 3647, 2880, 3036, 3919, 2933, 3647, 2957, 3607, 3615, 2992, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2779, 3290, 3180, 3302, 3979,
    2806, 3319, 2983, 2896, 2830, 3329, 2872, 3017, 3647, 2880, 3036, 2368, 2933, 3647, 3629, 4217, 2978, 2992, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264,
    3272, 2779, 3290, 4173, 3656, 3881, 2806, 3674, 3692, 2896, 2830, 3701, 2872, 3017, 3647, 2880, 3036, 2368, 2933, 3647, 2957, 4217, 3720, 2992, 3647, 3647,
    3244, 3666, 3261, 3277, 3255, 3264, 3272, 2779, 3290, 3180, 3302, 3979, 3741, 3319, 2983, 2896, 2830, 3329, 4279, 3017, 3647, 2880, 3036, 2368, 2933, 3647,
    2957, 4217, 2978, 2992, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2779, 3290, 3180, 3656, 3979, 2806, 3674, 3957, 3759, 3775, 3792, 2872, 3812,
    3647, 3832, 3036, 2368, 2933, 3149, 2957, 4217, 2978, 3849, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2779, 3290, 3180, 3874, 3979, 2806, 3889,
    3975, 2896, 2830, 3909, 2872, 3017, 4293, 2880, 3036, 2368, 3927, 3647, 2957, 4217, 2978, 2992, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643,
    3341, 3180, 3282, 3961, 2667, 3647, 3935, 2962, 2139, 2984, 2269, 3352, 3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666,
    3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3733, 3943, 2667, 3951, 3365, 2962, 2139, 3366, 2269, 3352, 2386, 2272, 2685, 2019, 2162, 3647, 2273, 3026,
    3969, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3282, 3961, 2667, 3647, 2983, 2962, 2139, 2984, 2269, 3352, 3647, 2732,
    2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3282, 3961, 3987, 3647, 3557, 2962,
    2139, 2984, 2269, 3352, 3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3359,
    4376, 4002, 2667, 2113, 3957, 4010, 4033, 3693, 2655, 3352, 3647, 4041, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277,
    4059, 4063, 3272, 2643, 3341, 3381, 3282, 4071, 2667, 2153, 3641, 2962, 4079, 2984, 2269, 3352, 3647, 4151, 2685, 2019, 2162, 3647, 2273, 3026, 4094, 2684,
    3647, 3647, 3244, 3666, 3261, 3277, 4102, 4106, 3272, 2643, 3341, 3229, 3282, 3961, 2667, 3647, 2997, 2962, 2139, 2085, 2269, 3352, 4119, 2272, 4114, 2019,
    4127, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 2917, 3961, 2667, 2516, 3387, 2962, 2139, 3388,
    4148, 4159, 3647, 2272, 2685, 2019, 2162, 3204, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 4180, 4337, 4194,
    4202, 2154, 2983, 2962, 2139, 2984, 2269, 3352, 2670, 2272, 2685, 2727, 4210, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 4227, 4231,
    3272, 2643, 3341, 3180, 3282, 3961, 2667, 3647, 2983, 2962, 2139, 2984, 2269, 3352, 3647, 2272, 2685, 4323, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647,
    3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3282, 3961, 4239, 3647, 2118, 2962, 2139, 2119, 2269, 3352, 2216, 2272, 2167, 2019, 2162, 2172,
    2659, 2306, 2180, 3023, 3647, 3647, 3244, 3666, 3261, 3277, 4257, 4265, 3272, 2643, 3341, 3180, 3282, 3961, 2667, 3647, 2983, 2962, 2139, 2984, 2269, 3352,
    3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 2456, 3961, 2667, 2521,
    4085, 2962, 2139, 4086, 2269, 3352, 3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643,
    3341, 3180, 3282, 3961, 2667, 3647, 2118, 2962, 2139, 2984, 2269, 3352, 3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3244, 3666,
    3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3282, 3961, 2667, 3647, 2983, 2962, 4273, 2984, 2269, 3352, 3647, 2272, 2685, 2019, 2162, 3647, 2273, 3026,
    2180, 2684, 3647, 3647, 3244, 3666, 3261, 3277, 3255, 3264, 3272, 2643, 3341, 3180, 3282, 3961, 4287, 3647, 2983, 2962, 2139, 2984, 2269, 3352, 3647, 2272,
    2685, 2019, 2162, 3647, 2273, 3026, 2180, 2684, 3647, 3647, 3861, 4307, 3647, 3344, 3344, 4307, 4317, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185,
    2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 4023, 4021, 4025, 4331, 4345, 4350, 2292, 2365, 3647,
    3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 3861, 3575, 3647, 4358,
    4370, 4362, 3577, 2292, 2365, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648, 2385, 3647, 4140, 3648, 2385, 3647,
    3647, 3647, 3861, 3647, 3647, 3247, 3895, 3647, 3727, 2292, 2911, 3647, 3647, 3841, 3766, 3647, 3647, 2185, 2385, 3647, 2544, 3647, 3647, 4139, 2420, 3648,
    2385, 3647, 4140, 3648, 2385, 3647, 3647, 3647, 2016, 4249, 2822, 2029, 2050, 2058, 2035, 2292, 2450, 3522, 2078, 2097, 2667, 2526, 3235, 2021, 2786, 3236,
    2269, 3767, 3646, 2272, 2560, 2019, 2162, 2215, 2273, 2183, 2180, 2684, 3647, 3647, 1281, 0, 61, 0, 0, 0, 0, 0, 0, 2873, 63, 63, 64, 1281, 0, 1281, 0, 1281,
    1349, 1281, 1281, 1349, 1349, 1349, 0, 1281, 0, 0, 0, 0, 0, 0, 0, 75, 0, 1360, 1281, 0, 1361, 0, 1367, 90, 1361, 1281, 0, 1367, 1367, 1281, 0, 90, 0, 0,
    2873, 0, 0, 63, 64, 3328, 0, 0, 0, 0, 1361, 0, 0, 0, 115, 0, 1367, 0, 0, 2873, 2882, 0, 0, 144, 0, 165, 0, 0, 0, 0, 90, 0, 0, 2873, 61, 0, 63, 0, 0, 63, 0,
    63, 63, 63, 63, 0, 0, 0, 110, 110, 5888, 0, 0, 2873, 2882, 0, 0, 0, 165, 64, 2882, 0, 0, 0, 0, 0, 0, 0, 3072, 64, 0, 64, 2882, 2882, 3915, 0, 0, 0, 0, 56,
    0, 0, 0, 3915, 3915, 0, 0, 0, 0, 0, 0, 0, 5888, 0, 64, 2882, 3915, 0, 0, 0, 0, 179, 179, 0, 0, 0, 165, 0, 0, 0, 9984, 0, 64, 3915, 0, 0, 179, 0, 0, 0, 0, 0,
    63, 63, 64, 0, 90, 0, 0, 2940, 61, 0, 126, 128, 2946, 0, 0, 0, 0, 0, 0, 0, 7936, 128, 0, 2946, 3993, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 3993, 0, 0, 0, 0, 0, 0,
    0, 8704, 0, 182, 0, 0, 0, 0, 0, 0, 0, 105, 0, 2940, 126, 128, 2946, 3993, 0, 0, 0, 128, 2946, 3993, 0, 0, 0, 0, 217, 0, 0, 217, 217, 0, 0, 0, 107, 0, 0, 0,
    0, 2873, 63, 64, 2882, 3915, 0, 0, 0, 128, 3993, 0, 0, 217, 0, 0, 0, 0, 0, 126, 0, 2873, 61, 61, 61, 0, 63, 64, 0, 0, 0, 0, 0, 0, 179, 179, 0, 0, 0, 9728,
    0, 63, 0, 0, 63, 63, 0, 0, 63, 0, 63, 0, 63, 105, 0, 0, 0, 0, 0, 0, 0, 144, 0, 2873, 61, 61, 61, 0, 3072, 64, 0, 0, 0, 0, 0, 0, 768, 179, 0, 0, 0, 0, 1349,
    0, 0, 0, 75, 75, 75, 75, 75, 75, 75, 0, 0, 2882, 0, 0, 0, 0, 0, 0, 3025, 210, 0, 64, 0, 0, 64, 0, 64, 64, 64, 64, 0, 0, 0, 0, 0, 0, 0, 189, 0, 2873, 61, 61,
    61, 0, 63, 3072, 0, 0, 0, 0, 0, 0, 0, 203, 3072, 0, 0, 0, 0, 0, 0, 179, 0, 3072, 0, 0, 0, 179, 0, 0, 0, 0, 0, 6400, 6400, 0, 0, 6400, 6400, 0, 0, 2882, 0,
    0, 2304, 2560, 2048, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 0, 0, 2882, 0, 1349, 0, 0, 0, 2873, 0, 114, 2873, 0, 2882, 0, 3328, 2882, 0, 0, 0, 0, 0, 0,
    4608, 0, 0, 64, 3328, 3915, 0, 0, 0, 0, 0, 0, 4608, 4608, 0, 0, 4608, 64, 3328, 3328, 0, 0, 0, 0, 0, 0, 9216, 0, 64, 3328, 0, 0, 0, 0, 0, 0, 0, 10752, 0,
    6656, 0, 0, 6656, 0, 0, 0, 113, 113, 0, 0, 0, 114, 114, 0, 0, 0, 115, 115, 0, 0, 0, 58, 67, 0, 143, 0, 768, 0, 0, 768, 768, 0, 0, 0, 0, 0, 63, 64, 0, 0,
    2873, 22622, 95, 22622, 0, 63, 64, 0, 0, 0, 179, 0, 0, 0, 144, 7424, 0, 0, 7424, 5120, 7424, 5120, 5120, 7424, 0, 5120, 5120, 0, 0, 5120, 5120, 5120, 0, 0,
    0, 0, 0, 5120, 0, 0, 0, 56, 61, 0, 0, 0, 0, 0, 63, 3072, 0, 0, 0, 0, 0, 56, 65, 56, 56, 0, 56, 65, 56, 56, 0, 0, 0, 56, 56, 0, 56, 7768, 7763, 56, 56, 7768,
    56, 56, 56, 56, 56, 0, 0, 56, 0, 0, 56, 0, 7763, 7768, 2873, 2873, 61, 61, 61, 0, 63, 64, 0, 0, 0, 768, 0, 0, 0, 169, 2873, 63, 64, 2882, 3915, 0, 0, 228,
    64, 2882, 3915, 0, 0, 0, 0, 0, 187, 0, 0, 3915, 3915, 175, 0, 0, 0, 179, 0, 0, 179, 179, 0, 0, 0, 0, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 0, 0, 2882,
    0, 4608, 0, 0, 0, 61, 0, 63, 0, 68, 68, 68, 68, 0, 0, 0, 68, 68, 0, 0, 8260, 0, 0, 8260, 0, 0, 0, 207, 0, 0, 2873, 63, 64, 2882, 3915, 196, 0, 8260, 0, 68,
    0, 0, 68, 68, 0, 0, 2882, 0, 4864, 0, 0, 0, 2873, 2882, 141, 0, 0, 0, 2873, 0, 60, 60, 7168, 63, 64, 0, 0, 64, 64, 0, 0, 64, 0, 64, 0, 64, 2873, 2909, 61,
    61, 61, 0, 63, 64, 0, 2882, 3915, 0, 0, 0, 0, 58, 0, 0, 0, 0, 4202, 3692, 3693, 3669, 2873, 0, 3692, 129, 2947, 3972, 0, 0, 0, 0, 0, 3072, 3072, 64, 0,
    4233, 3722, 3692, 3693, 0, 0, 0, 1281, 1281, 0, 0, 1281, 151, 2882, 2968, 3994, 0, 0, 0, 0, 2940, 0, 126, 0, 4254, 3722, 2873, 2882, 160, 0, 162, 0, 0,
    2882, 0, 5120, 0, 0, 0, 61, 0, 63, 3915, 4014, 0, 0, 0, 4274, 179, 181, 0, 183, 0, 185, 0, 0, 0, 0, 2986, 171, 172, 2989, 0, 3007, 192, 193, 3010, 4035, 0,
    0, 58, 67, 0, 0, 0, 164, 0, 0, 0, 0, 0, 2873, 2965, 63, 150, 64, 0, 4295, 179, 200, 201, 0, 202, 0, 0, 2882, 0, 5376, 0, 0, 0, 2873, 0, 113, 2873, 0, 2882,
    204, 0, 0, 0, 0, 0, 3025, 210, 211, 3028, 4053, 0, 0, 0, 4096, 218, 0, 219, 0, 220, 0, 0, 0, 0, 3328, 0, 0, 0, 0, 61, 0, 63, 2873, 224, 225, 2882, 4066, 0,
    0, 0, 2873, 2873, 63, 63, 64, 179, 229, 0, 230, 0, 0, 0, 63, 64, 3915, 0, 0, 233, 0, 0, 0, 2873, 2882, 0, 0, 0, 0, 236, 0, 0, 237, 179, 0, 0, 0, 2873, 2882,
    0, 144, 0, 4254, 3722, 2873, 2882, 0, 0, 0, 0, 4352, 0, 0, 0, 3915, 4014, 0, 0, 0, 4274, 179, 0, 1024, 179, 179, 0, 0, 0, 0, 0, 63, 63, 3072, 0, 4295, 179,
    200, 0, 0, 0, 0, 5632, 0, 0, 0, 4254, 3722, 2873, 2882, 142, 0, 163, 0, 0, 0, 0, 0, 0, 0, 11008, 0, 3915, 4014, 0, 0, 0, 4274, 179, 142, 163, 0, 0, 0, 0, 0,
    0, 58, 96, 97, 67, 0, 4295, 179, 200, 142, 0, 163, 0, 0, 2882, 8448, 0, 0, 0, 0, 2873, 0, 63, 0, 0, 205, 0, 0, 0, 0, 3025, 210, 179, 229, 163, 0, 0, 0, 0,
    63, 179, 229, 0, 186, 0, 0, 0, 63, 64, 3915, 0, 0, 233, 186, 0, 0, 59, 0, 0, 6912, 62, 0, 2873, 224, 225, 2882, 4066, 11264, 0, 0, 60, 0, 0, 0, 0, 0, 222,
    0, 0, 8704, 0, 8795, 0, 0, 8795, 8795, 0, 0, 3072, 64, 0, 0, 0, 0, 0, 8795, 8795, 8795, 8795, 8795, 8795, 8795, 0, 0, 3915, 0, 0, 0, 0, 0, 119, 0, 144, 0,
    8960, 0, 0, 8960, 0, 0, 0, 0, 0, 0, 8960, 8960, 0, 0, 0, 0, 0, 0, 0, 223, 1792, 1536, 0, 0, 0, 0, 0, 0, 70, 0, 9472, 9472, 9472, 9472, 9472, 9564, 9564, 0,
    0, 3915, 0, 102, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 2873, 61, 0, 0, 0, 0, 0, 5376, 74, 0, 0, 2873, 0, 0, 2873, 0, 2873, 2882, 2873, 2873, 0, 2873, 2882,
    2873, 2873, 2873, 2882, 2873, 2873, 0, 0, 0, 2873, 2873, 2873, 2873, 2873, 0, 0, 2873, 0, 0, 2873, 0, 2882, 2882, 2882, 2914, 0, 0, 0, 0, 0, 6656, 0, 0, 0,
    0, 4202, 2873, 0, 0, 2873, 0, 2882, 2882, 0, 0, 0, 0, 0, 68, 0, 68, 0, 4233, 0, 0, 0, 0, 0, 0, 72, 0, 4254, 0, 2873, 2882, 0, 0, 0, 0, 5632, 0, 0, 63, 2882,
    2882, 2882, 0, 0, 0, 0, 0, 13056, 0, 0, 3915, 3915, 0, 0, 0, 0, 179, 0, 0, 3915, 100, 0, 0, 0, 0, 112, 2873, 2882, 0, 0, 0, 0, 0, 0, 10752, 0, 0, 10752,
    10752, 0, 0, 3915, 101, 0, 103, 0, 0, 113, 2873, 2882, 0, 0, 0, 0, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 0, 0, 4608, 4608, 4608, 0, 0, 0, 186, 0,
    0, 0, 0, 0, 3025, 210, 0, 58, 61, 0, 0, 0, 0, 0, 22622, 0, 63, 0, 58, 0, 0, 58, 0, 58, 67, 58, 58, 0, 58, 67, 58, 58, 58, 67, 58, 58, 0, 0, 0, 58, 58, 58,
    58, 58, 0, 0, 58, 0, 0, 58, 0, 67, 58, 2873, 61, 61, 61, 0, 96, 97, 67, 67, 99, 0, 0, 0, 0, 2873, 2882, 142, 0, 0, 67, 67, 2882, 0, 0, 0, 0, 0, 38912,
    38912, 63, 67, 0, 118, 0, 58, 61, 0, 63, 99, 99, 0, 0, 0, 0, 180, 0, 0, 180, 180, 0, 0, 0, 0, 0, 96, 143, 0, 0, 0, 0, 0, 0, 0, 1360, 0, 58, 96, 97, 67, 99,
    0, 0, 0, 97, 67, 99, 0, 0, 0, 0, 180, 179, 0, 143, 0, 164, 97, 99, 0, 0, 180, 0, 0, 0, 2955, 2956, 0, 0, 0, 6400, 0, 6400, 0, 0, 0, 0, 11008, 0, 0, 0, 0, 0,
    13568, 0, 0, 0, 0, 0, 0, 84, 84, 76, 2873, 0, 76, 2873, 76, 2873, 2882, 2873, 2873, 2873, 2882, 166, 0, 0, 0, 2986, 171, 172, 2989, 179, 229, 0, 0, 0, 0,
    231, 63, 64, 3915, 0, 232, 233, 0, 0, 0, 61, 0, 0, 0, 0, 8704, 2873, 224, 225, 2882, 4066, 0, 227, 0, 0, 4864, 4864, 4864, 0, 0, 0, 2873, 2882, 119, 0, 0,
    0, 0, 0, 0, 0, 0, 63, 0, 4202, 2873, 0, 110, 2873, 0, 2882, 2914, 0, 0, 0, 0, 0, 2873, 0, 0, 0, 0, 4233, 0, 110, 110, 0, 0, 0, 61, 0, 6656, 0, 0, 0, 6656,
    0, 0, 0, 5888, 0, 110, 2873, 2882, 0, 0, 0, 0, 4254, 110, 2873, 2882, 0, 0, 0, 0, 61, 61, 61, 0, 0, 0, 58, 58, 96, 96, 97, 64, 3915, 0, 0, 233, 0, 234, 0,
    0, 5376, 5376, 5376, 0, 0, 0, 2873, 0, 112, 2873, 0, 2882, 129, 2947, 3972, 0, 11776, 0, 0, 0, 61, 6400, 0, 0, 0, 0, 221, 0, 0, 0, 0, 147, 0, 2873, 2965,
    63, 150, 64, 0, 3915, 0, 0, 0, 0, 0, 0, 151, 2882, 2968, 3994, 0, 0, 156, 0, 0, 6912, 0, 0, 0, 0, 0, 71, 6912, 4254, 110, 2873, 2882, 0, 161, 0, 0, 70, 0,
    0, 0, 0, 0, 0, 3669, 3669, 0, 0, 3669, 3915, 4014, 0, 176, 0, 4274, 179, 0, 0, 6912, 0, 0, 6912, 6912, 0, 0, 0, 6912, 6912, 0, 190, 3007, 192, 193, 3010,
    4035, 0, 0, 71, 0, 0, 0, 0, 0, 61, 0, 63, 236, 10496, 0, 237, 179, 0, 0, 0, 72, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 2940, 126, 128, 2946, 0, 4202, 2873, 0,
    111, 2873, 0, 2882, 0, 0, 120, 2941, 61, 0, 127, 0, 4233, 0, 111, 111, 0, 0, 0, 74, 0, 0, 0, 0, 0, 75, 82, 82, 75, 75, 82, 4254, 111, 2873, 2882, 0, 0, 0,
    0, 99, 0, 0, 0, 0, 0, 10240, 0, 3025, 210, 211, 3028, 4053, 214, 0, 0, 4096, 218, 0, 5888, 0, 2873, 2882, 0, 0, 145, 2882, 0, 0, 121, 2873, 61, 0, 63, 136,
    0, 0, 112, 112, 0, 0, 0, 110, 2873, 2882, 0, 0, 0, 2873, 61, 0, 63, 64, 3915, 11520, 0, 179, 0, 0, 0, 111, 2873, 2882, 0, 0, 0, 2941, 61, 0, 127, 64, 2882,
    3915, 0, 0, 0, 134, 0, 0, 7936, 84, 84, 7936, 7936, 84, 2882, 0, 0, 122, 2873, 61, 0, 63, 146, 0, 0, 2873, 2873, 63, 63, 64, 67, 3915, 0, 0, 0, 0, 0, 13312,
    0, 0, 0, 0, 0, 73, 13312, 64, 2882, 2882, 3915, 0, 0, 0, 157, 0, 2873, 63, 64, 2882, 3915, 197, 0, 0, 9216, 0, 0, 0, 0, 0, 4864, 0, 0, 77, 2873, 0, 77,
    2873, 77, 2873, 2882, 2873, 2873, 2873, 2882, 2882, 0, 119, 123, 2873, 61, 0, 63, 64, 2882, 2882, 3915, 155, 0, 0, 0, 114, 2873, 2882, 0, 0, 0, 0, 64, 3915,
    0, 0, 179, 0, 0, 235, 78, 2873, 0, 78, 2873, 78, 2873, 2882, 2873, 2873, 2873, 2882, 198, 0, 179, 179, 0, 144, 0, 0, 0, 0, 0, 188, 0, 64, 2882, 3915, 0,
    215, 0, 0, 179, 179, 0, 0, 165, 0, 0, 63, 64, 0, 0, 0, 0, 0, 0, 167, 0, 0, 2873, 63, 64, 2882, 3915, 0, 12800, 3915, 3915, 0, 0, 177, 0, 179, 0, 0, 9472, 0,
    0, 9472, 9472, 0, 0, 3915, 0, 0, 0, 104, 0, 0, 3915, 0, 0, 12544, 0, 0, 148, 2873, 2965, 63, 150, 64, 2933, 0, 0, 0, 2873, 61, 0, 63, 64, 2882, 3915, 0, 0,
    0, 0, 135, 64, 2882, 3915, 0, 0, 216, 0, 179, 229, 0, 0, 0, 0, 0, 63, 64, 3328, 79, 2873, 0, 79, 2873, 79, 2873, 2882, 2873, 2873, 2873, 2882, 64, 2882,
    3915, 0, 0, 12032, 0, 0, 159, 3487, 0, 0, 0, 0, 1281, 1281, 1281, 1281, 0, 2873, 0, 0, 2873, 0, 2902, 2905, 2873, 0, 2873, 2905, 2902, 2873, 2873, 2905, 64,
    2882, 2882, 3915, 0, 12288, 0, 0, 168, 0, 2986, 171, 172, 2989, 64, 2882, 3915, 133, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 107, 0, 84, 0, 0, 107, 0, 13056, 0, 0,
    0, 0, 0, 0, 82, 82, 13056, 0, 13056, 13056, 13056, 0, 0, 0, 206, 0, 0, 208, 2873, 63, 0, 0, 13385, 0, 0, 0, 0, 0, 2873, 0, 0, 2932, 0, 2882, 0, 0, 13312, 0,
    0, 13312, 13312, 0, 13312, 13312, 13312, 13312, 0, 0, 13568, 13568, 13568, 13568, 0, 0, 0, 0, 0, 13568, 13568, 0, 13568, 0, 0, 13568, 0, 0, 0, 2873, 0, 110,
    2873, 0, 2882
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    133, 119, 247, 130, 144, 137, 141, 147, 151, 155, 159, 163, 167, 171, 187, 192, 201, 211, 215, 286, 222, 225, 341, 188, 229, 247, 235, 239, 240, 244, 319,
    322, 254, 248, 338, 266, 247, 252, 258, 273, 266, 246, 321, 230, 278, 266, 245, 320, 229, 277, 266, 246, 252, 231, 264, 343, 270, 275, 282, 285, 247, 207,
    290, 174, 204, 294, 298, 302, 306, 218, 197, 310, 314, 247, 247, 247, 318, 247, 326, 247, 247, 247, 330, 247, 335, 125, 247, 247, 247, 178, 247, 247, 122,
    247, 247, 177, 181, 126, 125, 247, 176, 180, 126, 125, 247, 175, 179, 247, 195, 247, 176, 181, 344, 247, 260, 331, 182, 183, 247, 33554432, 67108864,
    134217728, 0, 6144, 32768, 131072, 0, 0, 0, 6144, 1040, 33554448, 16, 16, 1024, 8388608, 16777216, 33554448, 3072, 5120, 3088, 67109904, 3072, 3088, 3072,
    5120, 67109888, 3088, 1966096, 1008, 1140868112, 268435456, -2113926120, 1008, 285212672, -2113401832, 285212672, 541830164, 541834244, -2113401832,
    285212688, 1159742464, 541834260, 575384596, 1159742480, 1159742464, 541834244, 1159742480, 1159742480, 1094598672, 1094598672, 1128153104, 1159742464,
    1159742480, 1024, 0, 0, 0, 32, 64, 128, 256, 0, 0, 0, 256, 0, 1024, 1024, 8388608, 8388608, 2048, 8388608, 134217728, 2048, 2048, 4096, 0, 0, 524819,
    1573395, 5120, 5120, 5120, 0, 524288, 1, 2, 4, 262144, 524288, 1966096, 256, 512, 128, 64, 32, 16384, 0, 1048583, 522240, 524819, 524312, 32768, 4203520,
    4268032, 1028, 655376, 4207616, 2048, 5120, 16384, 0, 0, 8, 8, 32768, 4202496, 4202496, 4268032, 4194304, 4194304, 4194304, 1028, 5124, 2097152, 2097152, 0,
    0, 0, 0, 8, 1024, 2048, 2048, 5120, 5120, 16384, 16384, 16384, 0, 0, 32, 256, 4, 4, 2097152, 2097152, 2097152, 2097152, 2048, 16384, 0, 8, 32768, 4,
    2097152, 0, 8, 32768, 4, 4, 4, 0, 8, 4, 0, 0, 0, 24, 1048576, 0, 0, 2, 1, 524288, 1048577, 1048577, 1048581, 1048581, 262144, 1032, 524802, 260096, 1048581,
    525320, 260096, 1048581, 522240, 0, 1048580, 786963, 1573395, 262674, 786962, 786962, 525299, 525299, 1, 0, 0, 0, 1024, 2048, 2048, 2048, 14336, 16384,
    98304, 131072, 480, 0, 0, 0, 4096, 6144, 8192, 16384, 32768, 4202496, 1028, 5124, 655360, 2097152, 0, 0, 2048, 4096
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    'important',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'STRING',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'CommentContents',
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;'*/'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;'/*'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'and'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="$end - $result idiv 64"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result mod 64 - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 237 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(32, $input, $state)"/>          <!-- ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' | 'or' |
                                                                                         'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 43">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(43, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(28, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- S | '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' |
                                                                                         'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' | 'or' |
                                                                                          'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 50                                          (: '{' :)
                       or $state[$p:lk] = 3204">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 4">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(35, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' |
                                                                                              'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 24                                    (: '(' :)
                             or $state[$p:lk] = 1540">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 4">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(39, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(4, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(49, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(46, $input, $state)"/> <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' |
                                                                                          '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 52                                          (: '}' :)
                       or $state[$p:lk] = 3332">                                    <!-- S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-query_declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(50, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>          <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 37">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(37, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(38, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(40, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- ';' -->
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(4, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 20">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse COMMENT.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-COMMENT" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- '/*' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- CommentContents -->
    <xsl:variable name="state" select="p:consume(23, $input, $state)"/>             <!-- CommentContents -->
    <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>           <!-- '*/' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '*/' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'COMMENT', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(39, $input, $state)"/>          <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         COMMA | DIMENSION | '-' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 15">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 29">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(29, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 22">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(22, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(13, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>          <!-- important | S | IDENT | STRING | COMMA | ')' | '/' | '/*' | ';' |
                                                                                         '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>    <!-- S | IDENT -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- important | S | IDENT | STRING | ')' | '/' | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- URL | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | '-' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 3                                           (: important :)
                       or $state[$p:lk] = 10                                          (: IDENT :)
                       or $state[$p:lk] = 11                                          (: STRING :)
                       or $state[$p:lk] = 25                                          (: ')' :)
                       or $state[$p:lk] = 32                                          (: '/*' :)
                       or $state[$p:lk] = 34                                          (: ';' :)
                       or $state[$p:lk] = 52                                          (: '}' :)
                       or $state[$p:lk] = 2180                                        (: S ';' :)
                       or $state[$p:lk] = 3332">                                    <!-- S '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(31, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>          <!-- IDENT | STRING -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 11">                                        <!-- STRING -->
          <xsl:variable name="state" select="p:consume(11, $input, $state)"/>       <!-- STRING -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>      <!-- URL | S | IDENT | STRING | FUNCTION | NUMBER | HEX | PERCENTAGE |
                                                                                         PLUS | COMMA | DIMENSION | '-' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] = (10,                                      (: IDENT :)
                                             11)">                                  <!-- STRING -->
              <xsl:variable name="state" select="p:lookahead2(40, $input, $state)"/> <!-- important | S | IDENT | STRING | COMMA | ')' | '/' | '/*' | ':' |
                                                                                          ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 2122                                       (: IDENT ':' :)
                      and $state[$p:lk] != 2123">                                   <!-- STRING ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>   <!-- ':' -->
            <xsl:variable name="state" select="p:consume(33, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- ':' -->
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(24, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(36, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 51">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(18, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (10,                                          (: IDENT :)
                                         26)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(20, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3274,                                  (: IDENT '|' :)
                                               3290)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(18, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 266                                           (: IDENT S :)
                     or $state[$p:lk] = 691                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1610                                          (: IDENT ')' :)
                     or $state[$p:lk] = 44234                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 44250">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 14">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 30">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 41">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(21, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | ')' | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 2">                                       <!-- URL -->
            <xsl:variable name="state" select="p:consume(2, $input, $state)"/>      <!-- URL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 15">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(15, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 29">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(29, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 22">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(22, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 13">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(13, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 11">                                      <!-- STRING -->
            <xsl:variable name="state" select="p:consume(11, $input, $state)"/>     <!-- STRING -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 10">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(10, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(19, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(38, $input, $state)"/>      <!-- URL | S | IDENT | STRING | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(25, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(33, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 33">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(33, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(10, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(24, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | IDENT | STRING -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(41, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(34, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3274">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 42">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 8">                                   <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(35, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 5">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(5, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- STRING -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(30, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 26">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(52, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 10                                            (: IDENT :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3290">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>           <!-- '*' -->
    <xsl:variable name="state" select="p:consume(26, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(10, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 51">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(26, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 10">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(52, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | ')' | '.' |
                                                                                         ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 26                                            (: '*' :)
                     or $state[$p:lk] = 51                                            (: '|' :)
                     or $state[$p:lk] = 3274">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 4                                           (: S :)
                       or $state[$p:l1] = 17                                          (: PLUS :)
                       or $state[$p:l1] = 18                                          (: GREATER :)
                       or $state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 20                                          (: TILDE :)
                       or $state[$p:l1] = 50">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 14">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(14, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 30">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 41">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 33">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 21">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 36">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 14">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(14, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 30">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 41">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 33">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 21">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 36">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(50, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                         '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] = 4                                           (: S :)
                       or $state[$p:l1] = 17                                          (: PLUS :)
                       or $state[$p:l1] = 18                                          (: GREATER :)
                       or $state[$p:l1] = 19                                          (: COMMA :)
                       or $state[$p:l1] = 20                                          (: TILDE :)
                       or $state[$p:l1] = 50">                                      <!-- '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>          <!-- IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' | '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 10                                            (: IDENT :)
                     or $state[$p:l1] = 26                                            (: '*' :)
                     or $state[$p:l1] = 51">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 51">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(18, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (10,                                    (: IDENT :)
                                               26)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(51, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | '(' | '.' | ':' |
                                                                                            '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (3274,                            (: IDENT '|' :)
                                                     3290)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(18, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 266                                     (: IDENT S :)
                           or $state[$p:lk] = 691                                     (: '|' IDENT :)
                           or $state[$p:lk] = 906                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1098                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1162                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1226                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1290                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1354                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1546                                    (: IDENT '(' :)
                           or $state[$p:lk] = 1930                                    (: IDENT '.' :)
                           or $state[$p:lk] = 2122                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2314                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2634                                    (: IDENT '[' :)
                           or $state[$p:lk] = 3210                                    (: IDENT '{' :)
                           or $state[$p:lk] = 44234                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 44250">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 32">                                        <!-- '/*' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-COMMENT($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(29, $input, $state)"/>      <!-- S | PLUS | GREATER | COMMA | TILDE | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(48, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                          '{' | '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 19                                          (: COMMA :)
                       or $state[$p:lk] = 50                                          (: '{' :)
                       or $state[$p:lk] = 3204">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 19">                                       <!-- COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | IDENT | STRING | '/*' | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 4">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(27, $input, $state)"/> <!-- IDENT | STRING | '/*' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 34">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(26, $input, $state)"/> <!-- S | IDENT | STRING | '/*' | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 290">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(25, $input, $state)"/> <!-- IDENT | STRING | '/*' | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 674                                        (: ';' IDENT :)
                      and $state[$p:lk] != 738                                        (: ';' STRING :)
                      and $state[$p:lk] != 2082                                       (: ';' '/*' :)
                      and $state[$p:lk] != 2180                                       (: S ';' :)
                      and $state[$p:lk] != 41250                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 45346                                      (: ';' S STRING :)
                      and $state[$p:lk] != 131362">                                 <!-- ';' S '/*' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>   <!-- ';' -->
            <xsl:variable name="state" select="p:consume(34, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>  <!-- S | IDENT | STRING | '/*' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 4">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(4, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(21, $input, $state)"/>  <!-- IDENT | STRING | '/*' -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 32">                                <!-- '/*' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-COMMENT($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-declaration($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>        <!-- IDENT | STRING | '/*' | '}' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 52">                                        <!-- '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 32">                                  <!-- '/*' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-COMMENT($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-declaration($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 34">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(34, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>    <!-- S | IDENT | STRING | '/*' | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 4">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(4, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '{' -->
    <xsl:variable name="state" select="p:consume(50, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- S | IDENT | STRING | '/*' | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 4">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(54, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 4">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(4, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>        <!-- END | IDENT | HASH | NOT | '(' | '*' | '.' | '/*' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 37                                      (: '@charset' :)
                           or $state[$p:l1] = 38                                      (: '@import' :)
                           or $state[$p:l1] = 40">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 39">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
          <xsl:sequence select="p:parse-css-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:attribute name="b" select="$state[$p:b1]"/>
            <xsl:attribute name="e" select="$state[$p:e1]"/>
            <xsl:choose>
              <xsl:when test="$state[$p:l1] lt 0">
                <xsl:attribute name="s" select="- $state[$p:l1]"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="o" select="$state[$p:l1]"/>
                <xsl:attribute name="x" select="$code"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>