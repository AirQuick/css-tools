<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was generated on Sun May 28, 2017 12:57 (UTC+02) by REx v5.45 which is Copyright (c) 1979-2017 by Gunther Rademacher <grd@gmx.net> -->
<!-- REx command line: CSS3.ebnf -ll 3 -backtrack -xslt -main -tree -->

<xsl:stylesheet version="2.0"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:p="CSS3">
  <!--~
   ! The index of the lexer state for accessing the combined
   ! (i.e. level > 1) lookahead code.
  -->
  <xsl:variable name="p:lk" as="xs:integer" select="1"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the token that has been consumed.
  -->
  <xsl:variable name="p:b0" as="xs:integer" select="2"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the token that has been consumed.
  -->
  <xsl:variable name="p:e0" as="xs:integer" select="3"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-1-lookahead token.
  -->
  <xsl:variable name="p:l1" as="xs:integer" select="4"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-1-lookahead token.
  -->
  <xsl:variable name="p:b1" as="xs:integer" select="5"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-1-lookahead token.
  -->
  <xsl:variable name="p:e1" as="xs:integer" select="6"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-2-lookahead token.
  -->
  <xsl:variable name="p:l2" as="xs:integer" select="7"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-2-lookahead token.
  -->
  <xsl:variable name="p:b2" as="xs:integer" select="8"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-2-lookahead token.
  -->
  <xsl:variable name="p:e2" as="xs:integer" select="9"/>

  <!--~
   ! The index of the lexer state for accessing the code of the
   ! level-3-lookahead token.
  -->
  <xsl:variable name="p:l3" as="xs:integer" select="10"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the begin of the level-3-lookahead token.
  -->
  <xsl:variable name="p:b3" as="xs:integer" select="11"/>

  <!--~
   ! The index of the lexer state for accessing the position in the
   ! input string of the end of the level-3-lookahead token.
  -->
  <xsl:variable name="p:e3" as="xs:integer" select="12"/>

  <!--~
   ! The index of the lexer state for accessing the token code that
   ! was expected when an error was found.
  -->
  <xsl:variable name="p:error" as="xs:integer" select="13"/>

  <!--~
   ! The index of the lexer state for accessing the memoization
   ! of backtracking results.
  -->
  <xsl:variable name="p:memo" as="xs:integer" select="14"/>

  <!--~
   ! The index of the lexer state that points to the first entry
   ! used for collecting action results.
  -->
  <xsl:variable name="p:result" as="xs:integer" select="15"/>

  <!--~
   ! The codepoint to charclass mapping for 7 bit codepoints.
  -->
  <xsl:variable name="p:MAP0" as="xs:integer+" select="
    0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 29, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
    32, 32, 32, 32, 33, 34, 35, 36, 32, 9, 37, 38, 39, 40, 41, 42, 32, 43, 44, 32, 45, 46, 47, 48, 49, 50, 32, 51, 52, 53, 54, 55, 32, 56, 57, 58, 59, 60, 61,
    62, 9
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints below the surrogate block.
  -->
  <xsl:variable name="p:MAP1" as="xs:integer+" select="
    54, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
    62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 133, 126, 149, 165, 181, 193, 224, 209, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
    188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
    188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 63, 1, 0, 2, 3, 0, 0, 63, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 22, 24, 20, 25, 26, 9, 27, 28, 29, 30, 31,
    31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 35, 36, 32, 50, 32, 51, 52, 53, 54, 55, 32, 56, 57, 58, 59, 60,
    61, 62, 9, 37, 38, 39, 40, 41, 42, 32, 43, 44, 32, 45, 46, 47, 48, 49
  "/>

  <!--~
   ! The codepoint to charclass mapping for codepoints above the surrogate block.
  -->
  <xsl:variable name="p:MAP2" as="xs:integer+" select="
    57344, 65536, 65533, 1114111, 32, 32
  "/>

  <!--~
   ! The token-set-id to DFA-initial-state mapping.
  -->
  <xsl:variable name="p:INITIAL" as="xs:integer+" select="
    1281, 1538, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 570
  "/>

  <!--~
   ! The DFA transition table.
  -->
  <xsl:variable name="p:TRANSITION" as="xs:integer+" select="
    2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241,
    2241, 2241, 2241, 2241, 2241, 2241, 2048, 3132, 2061, 2074, 2069, 2082, 2090, 2098, 2202, 2241, 3390, 2112, 4097, 4297, 3226, 2120, 2129, 3227, 2241, 4287,
    2849, 2596, 2137, 3411, 3078, 2236, 2153, 2177, 4507, 3747, 2240, 2241, 2048, 3132, 2061, 2074, 2069, 2082, 2090, 2098, 2202, 2241, 3390, 2196, 3965, 4297,
    3226, 2120, 2226, 3227, 2241, 4267, 2849, 2596, 2137, 3162, 3078, 2236, 4020, 2234, 4209, 3747, 2240, 2241, 2048, 3132, 2061, 2074, 2069, 2082, 2090, 2250,
    2202, 2241, 3390, 2196, 2262, 4297, 3226, 2609, 4465, 3227, 2241, 3858, 4367, 2610, 2280, 3681, 3854, 2294, 4458, 2292, 4154, 2496, 2502, 2241, 2100, 2241,
    2241, 2241, 2241, 2241, 2241, 2600, 3505, 2241, 4475, 2120, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241,
    2241, 2241, 2241, 2241, 2325, 2241, 3507, 2335, 2341, 2351, 2327, 2600, 3505, 2241, 2241, 2241, 2359, 2241, 2241, 2241, 2302, 2241, 2241, 3815, 2241, 3841,
    2241, 2240, 3811, 2241, 3841, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 3971, 2381, 2374, 2420, 3505, 2241, 2241, 2120, 4007, 2241, 2241, 2120,
    2302, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 3384, 2241, 2241, 2600, 3505, 2241,
    2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241,
    2241, 2241, 2241, 2600, 3505, 2241, 4540, 2120, 4330, 3733, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241,
    2241, 2241, 2100, 2241, 2241, 2241, 2241, 2241, 2241, 2600, 3505, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240,
    2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2920, 2241, 2343, 2452, 2458, 2468, 2923, 2600, 3505, 2241, 2241, 2120, 3929, 2241, 2241, 2120, 2984, 2241,
    2241, 2119, 2238, 2121, 2242, 2240, 2860, 3455, 2121, 4443, 2242, 3747, 2240, 2241, 2159, 2241, 2241, 2241, 3707, 2164, 2476, 2511, 2523, 2241, 3880, 2120,
    4035, 2241, 3878, 2120, 2535, 3356, 3322, 4311, 2241, 2564, 4313, 2240, 2566, 2241, 2574, 4313, 2593, 2241, 2241, 2241, 2100, 2608, 2608, 2608, 2241, 3102,
    3100, 2618, 3505, 2241, 2241, 2120, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2100, 2241, 2596, 2503, 2240, 2598, 3836, 2596, 2272, 2503, 2309, 3840, 2241,
    2100, 2633, 2648, 2649, 3405, 2630, 2643, 2657, 2678, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2689, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241,
    2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 2241, 2945, 2938, 2956, 3505, 2241, 4066, 2951, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100,
    2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2580, 2102, 2241, 2104, 4103, 2721, 2999, 3019, 2213, 2241, 2103, 3014, 4007, 2241,
    2241, 2120, 2302, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2708, 2241, 2218, 2729, 2735, 2748, 2755, 2763,
    2775, 4333, 3123, 2317, 4137, 2241, 3121, 2317, 2785, 3122, 2316, 2793, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 2100, 2241,
    2241, 2241, 3222, 2808, 2801, 2830, 3505, 2241, 2845, 2857, 4007, 2777, 2241, 2120, 2302, 2241, 2241, 2100, 2238, 2596, 2242, 2240, 2598, 3455, 2596, 4443,
    2242, 3747, 2240, 2241, 2100, 2241, 2635, 2254, 4120, 2868, 2876, 2882, 4116, 2241, 2635, 2905, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2407, 2238, 2596,
    2242, 2240, 2598, 3455, 2596, 4443, 2242, 3747, 2240, 2241, 2100, 2241, 2241, 2241, 2241, 3943, 3936, 4533, 2890, 4333, 2900, 2913, 2931, 4222, 3121, 2964,
    2972, 2837, 2980, 2992, 3007, 3027, 3035, 3043, 3893, 3068, 3076, 3086, 3110, 3579, 2240, 2241, 2100, 2241, 2241, 2241, 2241, 3943, 3936, 4533, 2890, 4333,
    2900, 2913, 2931, 4222, 3121, 3867, 2972, 4144, 2316, 2992, 3118, 2681, 3035, 3131, 3893, 3140, 2596, 3086, 4518, 3579, 2240, 2241, 2100, 2241, 2241, 2241,
    2241, 3943, 3936, 4533, 2890, 4333, 2900, 2913, 2931, 4222, 3121, 2822, 2972, 2815, 3158, 2992, 3153, 2681, 3035, 3170, 3893, 3178, 2596, 3086, 3239, 3579,
    2240, 2241, 2100, 2241, 2241, 2241, 2241, 3943, 3936, 4533, 2890, 4333, 2900, 2913, 2931, 4222, 3121, 3867, 2972, 4144, 2316, 2992, 3118, 3186, 3035, 3194,
    3893, 3140, 3199, 3086, 3207, 3215, 2240, 2241, 2100, 2241, 2241, 2241, 2241, 3943, 3936, 4533, 2890, 4333, 2900, 2913, 2931, 4222, 3121, 2822, 2972, 2815,
    3158, 2992, 3153, 2681, 3035, 3235, 3893, 3178, 2596, 3086, 3239, 3579, 2240, 2241, 2100, 2241, 2241, 2241, 2241, 3943, 3936, 4533, 2890, 4333, 2900, 2913,
    2931, 4222, 3121, 3867, 2972, 4144, 2316, 2992, 3118, 2681, 3035, 3131, 3893, 3140, 2596, 3247, 4518, 3579, 2240, 2241, 2100, 3255, 3256, 3256, 3254, 3264,
    3272, 3287, 3505, 2241, 2241, 2120, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241,
    2100, 3821, 3822, 3819, 3306, 3823, 3817, 2600, 3505, 2241, 2241, 2120, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241,
    2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 3316, 2241, 2241, 2600, 2556, 3334, 2241, 2120, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2100,
    2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 2241, 2241, 2053, 3345, 3505, 2241, 2241, 4380, 4330, 2241,
    2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 2241, 2241, 2241, 2600,
    3505, 2241, 2241, 2120, 4007, 2241, 2241, 2120, 2302, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241,
    2241, 2241, 2241, 3364, 3377, 3398, 3505, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241,
    2241, 2241, 2241, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3467, 2890, 4333, 3502, 2767, 2931, 3450, 3121, 3867, 2972, 2549, 2316, 2992, 3118, 2681,
    3035, 3131, 3893, 3140, 2596, 3086, 4518, 3579, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 2241, 3121, 2317,
    2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 2100, 2241, 2241, 2241, 3294, 3532, 3545, 3566, 3505, 2241,
    2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 3677, 2241, 2412, 3587,
    3627, 3621, 3600, 3614, 3639, 2268, 3606, 3592, 3649, 2241, 4315, 3670, 3689, 4316, 3807, 3697, 3792, 2525, 3715, 2183, 2527, 3718, 2188, 3726, 2284, 3788,
    3732, 2241, 2100, 2241, 3352, 2241, 3741, 2241, 2241, 2600, 3505, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240,
    2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 3552, 2241, 2241, 2600, 3505, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241,
    2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 4439, 2241, 3914, 3426, 3759, 3479, 3439, 3467, 2890, 4333, 3502, 2767,
    2931, 3450, 3121, 2424, 2972, 2549, 2439, 2992, 3118, 2681, 3035, 3131, 3767, 3140, 2596, 3086, 2444, 3775, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474,
    3439, 3467, 2890, 4333, 3502, 2767, 2931, 3450, 3121, 3867, 2972, 2549, 2316, 2992, 3118, 2681, 3035, 3131, 3893, 3140, 2596, 3800, 4518, 3579, 2240, 2241,
    4439, 2241, 3914, 3426, 4363, 3474, 3439, 3467, 2890, 3950, 3831, 3431, 2931, 4047, 3093, 3867, 2972, 2664, 2316, 2992, 3118, 2681, 3035, 3131, 3893, 3140,
    2596, 3086, 4518, 4500, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3467, 2890, 4333, 3502, 2767, 2931, 3849, 3121, 3867, 2972, 2549, 2388, 2992,
    3118, 2681, 3035, 3131, 3893, 3140, 2596, 3086, 4518, 3579, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3467, 2890, 4333, 3831, 2767, 2931, 4047,
    3975, 2515, 2972, 3782, 3866, 2992, 3875, 3298, 3035, 3131, 3893, 3140, 2401, 3086, 4518, 3662, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3467,
    2890, 4333, 3888, 2767, 2931, 3060, 4544, 3867, 2972, 2696, 2316, 2992, 3901, 2681, 3035, 3131, 3893, 3909, 2596, 3086, 4518, 3579, 2240, 2241, 4439, 2241,
    3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 2241, 2208, 3922, 2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177,
    4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 3445, 3958, 4137, 2892, 3326, 2317, 2785, 3369, 2316, 4287, 2238, 3537,
    3521, 2240, 3078, 2236, 2596, 2177, 3992, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 2241, 3121, 2317,
    2785, 3122, 2316, 4287, 2238, 2596, 3983, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333,
    2553, 2767, 4137, 3704, 3337, 4000, 2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426,
    4363, 3474, 3439, 3515, 2775, 4042, 3055, 4028, 4137, 4122, 4055, 2622, 2785, 3145, 2366, 4287, 2238, 2596, 4074, 2240, 3078, 2236, 2596, 2177, 4209, 3747,
    2240, 2241, 4439, 2241, 3914, 3426, 4082, 3484, 3439, 3515, 2775, 2542, 4166, 4090, 4137, 2241, 4111, 4130, 2785, 4162, 2316, 4287, 2238, 2596, 4174, 2240,
    3078, 2236, 2596, 2177, 4209, 2670, 2240, 2241, 4439, 2241, 3914, 3426, 4182, 3489, 3439, 3515, 2775, 2490, 2553, 2767, 4137, 2241, 3121, 4190, 2785, 3122,
    4205, 4287, 3751, 2702, 3521, 4514, 3078, 4013, 2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 4217, 2767,
    4137, 3308, 2712, 2317, 2785, 2713, 2395, 4287, 3988, 2596, 3521, 2240, 3078, 2236, 3631, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474,
    3439, 3515, 2775, 2483, 4392, 4230, 4137, 4150, 4250, 2317, 2785, 3122, 2316, 4287, 2238, 4433, 3521, 2240, 4263, 3524, 2596, 2177, 4209, 3747, 2240, 2241,
    4439, 2241, 3914, 3426, 4275, 3494, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 2241, 3121, 2317, 2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 4283, 2236,
    2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 4295, 3050, 2317, 2785, 3122, 4062, 4287,
    2238, 4305, 3521, 4017, 3078, 2236, 4324, 4341, 3279, 3558, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 4356, 4349, 3515, 2775, 4333, 2553, 2767, 4137, 2241,
    3121, 2317, 2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515,
    2775, 4333, 4375, 2767, 4137, 3641, 2739, 2317, 2785, 2740, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241,
    3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 2241, 3050, 2317, 2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177,
    4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4137, 2241, 3121, 2317, 2785, 4388, 2316, 4287, 2238, 2596,
    3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 4439, 2241, 3914, 3426, 4363, 3474, 3439, 3515, 2775, 4333, 2553, 2767, 4197, 2241, 3121, 2317,
    2785, 3122, 2316, 4287, 2238, 2596, 3521, 2240, 3078, 2236, 2596, 2177, 4209, 3747, 2240, 2241, 2100, 3417, 2241, 2241, 2460, 3418, 4400, 4406, 3505, 2241,
    2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2585, 2241, 4418,
    3573, 4414, 4426, 4451, 3505, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241,
    2241, 2241, 2100, 2141, 2141, 4485, 4473, 4483, 2145, 2600, 3505, 2241, 2241, 2120, 4330, 2241, 2241, 2120, 2432, 2241, 2241, 2100, 2241, 2596, 2241, 2240,
    2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 2100, 2241, 2241, 2241, 3656, 2241, 2169, 4493, 3505, 2241, 2241, 4242, 4330, 2241, 2241, 2120, 2432, 2241,
    2241, 2100, 2241, 2596, 2241, 2240, 2598, 2241, 2596, 2241, 2241, 2241, 2241, 2241, 4237, 3132, 2061, 2074, 2069, 2082, 2090, 4526, 4255, 2241, 3390, 2112,
    4137, 4297, 3226, 2120, 4552, 3227, 2241, 4267, 2849, 2596, 2137, 3459, 3078, 2236, 4020, 2234, 4209, 3747, 2240, 2241, 0, 0, 1795, 0, 5, 0, 0, 0, 0, 0,
    5120, 5120, 0, 1795, 1795, 1795, 1795, 0, 0, 68, 1795, 68, 1862, 1795, 1795, 0, 1795, 0, 0, 1795, 1795, 1861, 68, 1862, 86, 1879, 1795, 1795, 68, 1881,
    1884, 1879, 1862, 1795, 68, 1884, 1862, 1885, 1885, 1886, 1885, 1862, 1281, 1538, 0, 0, 0, 0, 0, 0, 0, 5376, 0, 0, 1881, 0, 0, 1884, 1885, 1886, 0, 1281, 0,
    0, 0, 0, 0, 0, 0, 1281, 0, 1538, 3390, 3390, 3393, 3393, 134, 0, 4172, 3390, 3393, 6579, 4172, 0, 0, 0, 0, 0, 0, 13824, 0, 13824, 0, 0, 13824, 147, 0, 170,
    0, 0, 0, 1281, 1538, 0, 0, 0, 0, 0, 7168, 7168, 7168, 0, 0, 0, 0, 0, 5632, 5632, 0, 3390, 3393, 4172, 0, 0, 184, 184, 0, 0, 146, 0, 169, 0, 0, 0, 0, 0, 59,
    60, 1881, 0, 0, 1884, 1885, 1886, 0, 0, 0, 68, 1861, 1862, 0, 0, 0, 0, 6144, 0, 3393, 0, 0, 5376, 0, 0, 0, 0, 64, 61, 0, 0, 1538, 0, 3390, 0, 3393, 134, 0,
    4172, 3390, 3393, 4172, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 184, 1885, 1862, 1376, 1634, 0, 0, 0, 0, 0, 67, 67, 67, 1376, 0, 1634, 3458, 3460, 134, 0, 0,
    0, 103, 0, 0, 0, 0, 0, 768, 768, 0, 3458, 3460, 6579, 4254, 0, 0, 0, 0, 0, 103, 0, 185, 3458, 3460, 4254, 0, 0, 0, 222, 0, 0, 0, 1538, 0, 0, 0, 0, 134, 134,
    0, 0, 0, 768, 0, 0, 768, 0, 0, 0, 3390, 0, 0, 0, 0, 1281, 0, 1538, 0, 0, 0, 6656, 0, 0, 0, 6656, 0, 0, 6656, 6656, 0, 0, 6656, 6656, 0, 0, 0, 0, 0, 0, 0,
    6912, 6656, 6656, 0, 0, 0, 6656, 6656, 6656, 0, 1538, 1538, 0, 0, 134, 4172, 0, 0, 0, 3390, 0, 0, 0, 174, 76, 76, 76, 81, 76, 76, 76, 81, 0, 76, 0, 76, 81,
    81, 0, 0, 0, 3390, 0, 0, 173, 0, 0, 0, 3390, 0, 172, 0, 0, 0, 228, 0, 0, 1281, 1538, 0, 0, 6579, 0, 0, 0, 0, 66, 63, 0, 0, 76, 76, 1281, 1538, 0, 0, 3390,
    0, 0, 0, 152, 1433, 1538, 0, 0, 0, 0, 0, 134, 0, 0, 0, 3390, 171, 0, 0, 0, 0, 235, 4172, 0, 236, 0, 0, 6912, 6912, 0, 0, 6912, 6912, 0, 0, 0, 0, 0, 0, 0,
    13312, 6912, 6912, 0, 0, 0, 6912, 6912, 6912, 7168, 7168, 7168, 0, 7168, 7168, 7168, 0, 0, 0, 4172, 0, 0, 12800, 0, 0, 0, 4172, 0, 106, 0, 0, 0, 222, 0, 0,
    222, 0, 0, 0, 0, 0, 0, 0, 768, 7168, 7168, 1281, 1538, 0, 0, 3390, 0, 0, 151, 0, 1433, 3584, 3393, 0, 0, 0, 0, 0, 0, 59, 60, 63, 66, 1538, 0, 0, 3584, 3584,
    134, 134, 0, 0, 0, 4172, 105, 0, 107, 0, 0, 0, 4514, 0, 3393, 0, 0, 3393, 0, 0, 0, 0, 2816, 3072, 0, 5888, 0, 0, 0, 0, 1281, 1538, 0, 3584, 0, 0, 5888, 0,
    0, 0, 1281, 1538, 0, 0, 5376, 0, 0, 0, 0, 0, 13568, 0, 0, 0, 0, 5888, 0, 0, 0, 0, 0, 0, 1281, 1538, 0, 0, 3390, 0, 7424, 0, 0, 0, 0, 0, 0, 0, 1376, 1634,
    7424, 0, 1281, 1538, 0, 0, 3390, 0, 150, 0, 0, 1281, 0, 0, 7680, 0, 7680, 0, 0, 0, 0, 0, 0, 67, 0, 7680, 7680, 7680, 0, 7680, 0, 0, 0, 0, 0, 7680, 0, 0, 0,
    0, 7680, 1281, 1538, 0, 0, 3390, 0, 0, 0, 4514, 113, 3393, 0, 0, 0, 184, 240, 0, 184, 0, 0, 3393, 102, 0, 0, 0, 0, 0, 0, 1477, 1734, 1538, 0, 0, 0, 0, 157,
    134, 0, 0, 0, 4514, 114, 3393, 0, 0, 0, 194, 0, 0, 1281, 1538, 0, 61, 0, 0, 0, 0, 0, 116, 3393, 0, 0, 0, 5376, 0, 7936, 0, 0, 5376, 5376, 0, 64, 61, 61, 61,
    0, 61, 61, 0, 61, 0, 0, 0, 0, 0, 117, 3393, 0, 0, 8274, 61, 61, 0, 61, 8274, 8282, 61, 61, 61, 8282, 61, 0, 0, 8274, 0, 61, 1281, 1538, 0, 3390, 3390, 0, 0,
    0, 0, 1281, 3393, 3393, 0, 0, 0, 0, 0, 0, 110, 0, 1538, 3390, 3390, 3393, 3393, 134, 134, 4172, 1281, 1538, 3390, 3393, 0, 4172, 4172, 181, 8448, 8448,
    8448, 83, 8448, 8448, 8448, 83, 0, 8448, 0, 8448, 83, 83, 0, 0, 0, 4514, 3981, 3393, 0, 145, 0, 3390, 0, 0, 0, 0, 1433, 8448, 8448, 1281, 1538, 0, 0, 3390,
    0, 0, 0, 4514, 3981, 3393, 0, 165, 0, 110, 0, 83, 0, 0, 0, 0, 0, 122, 0, 0, 0, 110, 0, 0, 0, 0, 0, 1281, 0, 0, 0, 0, 8771, 0, 0, 67, 0, 0, 8771, 67, 0, 67,
    0, 67, 67, 67, 67, 1281, 1538, 0, 0, 3390, 0, 3393, 3429, 0, 0, 0, 0, 0, 0, 115, 115, 4461, 3951, 3952, 3924, 3393, 0, 0, 0, 0, 67, 67, 0, 1281, 0, 3951,
    3390, 0, 0, 0, 0, 1281, 0, 0, 0, 0, 0, 6912, 0, 0, 0, 6912, 1408, 1538, 1665, 3459, 3461, 134, 4232, 0, 0, 0, 4864, 0, 4864, 4864, 4864, 0, 0, 0, 0, 4864,
    4864, 0, 0, 4864, 4864, 4864, 0, 1281, 1538, 0, 0, 3390, 0, 144, 0, 3390, 0, 0, 0, 0, 1433, 1690, 3390, 3483, 3393, 3484, 134, 134, 4255, 0, 167, 0, 3390,
    0, 0, 0, 0, 0, 134, 134, 0, 1455, 1712, 3505, 3506, 0, 4172, 4276, 0, 0, 0, 5376, 0, 5376, 5376, 5376, 0, 4535, 184, 0, 187, 0, 189, 0, 0, 0, 5376, 5376,
    5376, 0, 1281, 1538, 0, 0, 3390, 0, 191, 0, 0, 0, 0, 0, 1477, 1734, 3527, 3528, 0, 4297, 0, 0, 4556, 184, 205, 0, 207, 0, 208, 0, 210, 0, 0, 0, 6144, 0, 0,
    3393, 0, 113, 3393, 0, 0, 0, 0, 4492, 0, 114, 114, 4315, 0, 0, 4352, 223, 0, 0, 225, 0, 226, 0, 0, 0, 0, 1281, 1538, 3390, 3393, 3390, 3393, 4326, 0, 0,
    184, 232, 0, 0, 0, 6144, 0, 113, 3393, 0, 0, 0, 7424, 0, 0, 0, 0, 0, 7424, 0, 234, 0, 0, 0, 4172, 0, 236, 0, 4535, 184, 0, 0, 0, 0, 0, 0, 3393, 0, 0, 0,
    205, 0, 0, 0, 0, 0, 0, 0, 1808, 4315, 0, 0, 4352, 223, 0, 0, 0, 0, 113, 3393, 164, 0, 0, 4535, 184, 0, 145, 0, 168, 0, 3390, 0, 0, 0, 0, 0, 147, 0, 0, 205,
    0, 145, 0, 168, 0, 0, 211, 4315, 0, 0, 4352, 223, 0, 145, 168, 192, 0, 0, 0, 0, 0, 1477, 1734, 205, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 1281, 1538, 0, 192, 0,
    0, 0, 4172, 0, 236, 0, 192, 0, 239, 0, 0, 241, 0, 0, 0, 8448, 0, 0, 0, 0, 0, 118, 0, 0, 0, 205, 0, 145, 0, 168, 0, 0, 0, 0, 4172, 0, 236, 3390, 3393, 4326,
    11520, 0, 184, 232, 0, 0, 0, 8960, 0, 0, 0, 0, 0, 0, 0, 0, 9048, 0, 9048, 0, 0, 8960, 9048, 9048, 9048, 0, 9048, 9048, 9048, 0, 0, 0, 9984, 0, 4172, 0, 184,
    9048, 9048, 1281, 1538, 0, 0, 3390, 0, 0, 0, 11008, 0, 0, 0, 0, 0, 196, 1477, 1734, 9216, 9216, 0, 0, 0, 0, 0, 0, 116, 116, 0, 0, 9472, 0, 0, 9472, 0, 0, 0,
    163, 0, 0, 0, 0, 0, 115, 3393, 143, 2560, 2304, 2048, 0, 0, 0, 0, 0, 0, 3470, 0, 5120, 0, 1281, 1538, 0, 0, 3390, 0, 0, 0, 11264, 0, 0, 0, 0, 0, 3747, 0, 0,
    0, 0, 9728, 0, 9728, 0, 0, 0, 0, 115, 3393, 0, 0, 9728, 9728, 9728, 0, 9728, 9728, 9728, 0, 0, 71, 0, 0, 71, 0, 0, 0, 118, 0, 86, 1879, 0, 9728, 9823, 1281,
    1538, 0, 0, 3390, 0, 0, 72, 7680, 0, 72, 0, 0, 0, 122, 0, 147, 0, 0, 0, 0, 13312, 0, 0, 0, 0, 0, 3393, 3390, 3390, 3390, 0, 3390, 3390, 0, 0, 0, 124, 1281,
    3390, 3390, 3390, 3390, 3390, 0, 0, 3393, 0, 115, 3393, 0, 0, 0, 0, 4492, 0, 0, 0, 0, 184, 0, 0, 0, 0, 147, 0, 0, 0, 3390, 1377, 1635, 3390, 3390, 3428,
    3393, 3390, 3390, 0, 3390, 3393, 3390, 3390, 77, 3390, 3393, 3390, 3390, 78, 3390, 3393, 3390, 3390, 79, 3390, 3393, 3390, 3390, 80, 3390, 3393, 3390, 3390,
    4461, 3393, 0, 0, 3393, 0, 0, 0, 0, 0, 0, 0, 6656, 0, 3390, 1281, 1538, 3390, 3390, 3390, 3393, 0, 4172, 0, 0, 0, 184, 224, 0, 0, 0, 0, 11008, 0, 11008, 0,
    0, 0, 0, 195, 0, 1281, 1538, 11008, 11008, 11008, 0, 11008, 11008, 11008, 0, 0, 73, 0, 0, 73, 0, 0, 0, 184, 0, 0, 184, 1024, 11008, 11008, 1281, 1538, 0, 0,
    3390, 0, 0, 74, 13568, 0, 13642, 0, 0, 0, 239, 0, 0, 241, 0, 0, 66, 63, 63, 63, 0, 63, 63, 0, 0, 0, 0, 59, 63, 63, 63, 63, 63, 0, 0, 66, 0, 0, 66, 0, 0,
    121, 0, 63, 1281, 1538, 63, 63, 3390, 66, 63, 63, 0, 63, 66, 63, 63, 0, 63, 0, 0, 0, 0, 0, 229, 1281, 1538, 66, 3393, 0, 0, 0, 0, 0, 0, 117, 117, 59, 60,
    60, 63, 66, 135, 4172, 0, 0, 75, 0, 0, 75, 0, 0, 0, 239, 0, 10752, 241, 0, 0, 146, 63, 0, 0, 0, 0, 59, 60, 0, 63, 0, 0, 0, 0, 0, 209, 0, 0, 60, 63, 63, 66,
    66, 135, 134, 103, 59, 60, 63, 66, 0, 103, 103, 0, 0, 138, 0, 0, 0, 0, 0, 0, 7168, 7168, 63, 66, 0, 103, 0, 0, 0, 185, 0, 0, 0, 63, 66, 103, 0, 0, 185, 185,
    0, 0, 0, 0, 0, 0, 0, 4608, 0, 0, 11264, 0, 0, 11264, 0, 0, 0, 184, 0, 0, 184, 0, 0, 147, 0, 0, 3390, 3390, 0, 3390, 77, 0, 77, 77, 0, 0, 10496, 0, 1495,
    1752, 3545, 3546, 237, 0, 0, 239, 0, 0, 241, 0, 0, 161, 4514, 113, 3393, 0, 0, 0, 185, 0, 0, 185, 0, 0, 146, 0, 0, 3390, 3393, 4326, 0, 231, 184, 232, 0, 0,
    169, 63, 0, 0, 0, 0, 0, 1538, 0, 0, 0, 0, 0, 0, 0, 9216, 0, 0, 0, 0, 0, 9216, 4461, 3393, 0, 113, 3393, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0, 1538, 12032,
    0, 0, 0, 4492, 0, 0, 0, 0, 1376, 1634, 3458, 3460, 0, 0, 4254, 0, 166, 0, 0, 3390, 0, 0, 0, 0, 1433, 182, 4535, 184, 0, 0, 0, 0, 0, 0, 3584, 0, 0, 0, 4461,
    3393, 0, 114, 3393, 0, 0, 0, 0, 1495, 1752, 3545, 3546, 0, 4535, 184, 0, 0, 0, 0, 190, 4315, 220, 0, 4352, 223, 0, 0, 0, 0, 3393, 3390, 0, 0, 0, 0, 3390,
    149, 0, 0, 0, 1281, 0, 0, 0, 0, 134, 4172, 0, 0, 0, 3924, 0, 0, 0, 3924, 0, 0, 0, 0, 3924, 3924, 0, 0, 0, 4172, 0, 0, 0, 108, 0, 3390, 3390, 0, 0, 0, 125,
    1281, 0, 1538, 3390, 3393, 134, 0, 0, 0, 76, 0, 0, 0, 0, 0, 113, 3393, 0, 3390, 3393, 0, 4172, 202, 0, 0, 184, 186, 0, 0, 0, 0, 0, 4172, 11776, 184, 0, 0,
    3476, 0, 0, 0, 0, 1281, 1538, 1538, 0, 0, 134, 4172, 0, 221, 0, 184, 0, 0, 0, 0, 170, 0, 0, 0, 1281, 1538, 0, 3390, 3390, 0, 0, 0, 126, 1281, 1538, 1538, 0,
    3584, 134, 4172, 0, 0, 0, 4172, 104, 0, 0, 0, 0, 4492, 0, 113, 113, 6144, 0, 0, 0, 0, 113, 3393, 0, 0, 170, 3390, 0, 0, 0, 0, 0, 4864, 0, 0, 3390, 3393, 0,
    4172, 203, 0, 0, 184, 3390, 3390, 0, 3390, 78, 0, 78, 78, 0, 3390, 3390, 0, 0, 0, 127, 1281, 1538, 1538, 3390, 3393, 134, 0, 0, 0, 0, 7936, 0, 7936, 7936,
    0, 0, 6144, 0, 0, 0, 3393, 0, 67, 67, 67, 0, 0, 0, 0, 0, 0, 113, 113, 122, 0, 3390, 0, 0, 0, 0, 1281, 1538, 1538, 3390, 3393, 134, 4172, 0, 0, 0, 4514,
    3981, 3393, 0, 0, 0, 139, 0, 0, 0, 0, 0, 4254, 0, 222, 160, 0, 0, 0, 0, 3393, 0, 0, 3393, 0, 0, 122, 3390, 3393, 0, 4172, 0, 13056, 0, 184, 3390, 3390, 0,
    3390, 79, 0, 79, 79, 0, 147, 3390, 0, 0, 0, 0, 1281, 1538, 1538, 3390, 3393, 134, 4172, 137, 0, 147, 0, 3390, 0, 0, 0, 0, 0, 4172, 0, 184, 0, 3393, 0, 116,
    3393, 0, 0, 0, 0, 4492, 3981, 3951, 3952, 0, 3390, 3451, 0, 0, 0, 0, 1281, 1538, 1795, 0, 5, 0, 0, 0, 0, 5632, 0, 0, 1281, 0, 6144, 0, 0, 0, 0, 3393, 0, 68,
    1861, 1862, 0, 0, 0, 213, 0, 0, 1281, 1538, 3390, 3393, 0, 0, 4172, 0, 3390, 3390, 0, 3390, 80, 0, 80, 80, 212, 0, 0, 214, 1281, 1538, 3390, 3393, 0, 4172,
    4172, 0, 0, 12288, 0, 0, 0, 0, 0, 0, 118, 118, 170, 0, 0, 0, 0, 0, 1281, 1538, 0, 3584, 0, 0, 0, 0, 0, 0, 66, 0, 0, 170, 0, 0, 0, 10240, 0, 1281, 1538,
    1538, 0, 0, 0, 4172, 0, 0, 0, 0, 3390, 3393, 4172, 0, 0, 184, 184, 233, 3390, 3390, 3390, 3419, 3390, 0, 0, 3413, 3390, 3390, 0, 3390, 3413, 3419, 3390,
    3390, 0, 3390, 0, 0, 0, 0, 0, 188, 0, 0, 0, 3393, 0, 117, 3393, 0, 0, 0, 0, 5120, 0, 0, 1281, 0, 12544, 0, 0, 0, 3393, 0, 0, 3447, 0, 0, 0, 0, 13312, 0, 0,
    0, 13312, 13312, 0, 1281, 1538, 0, 0, 3390, 0, 0, 0, 13568, 0, 13568, 0, 0, 0, 13568, 0, 0, 0, 13568, 13568, 13568, 0, 13568, 0, 13568, 0, 0, 193, 0, 0, 0,
    1281, 1538, 0, 3390, 0, 0, 0, 0, 0, 184, 184, 0, 13568, 13568, 1281, 1538, 0, 0, 3390, 0, 0, 227, 0, 0, 0, 1376, 1634, 0, 3458, 0, 3460, 134, 0, 4254,
    13824, 13824, 0, 0, 0, 0, 0, 0, 120, 0, 0, 13824, 0, 0, 0, 0, 0, 13824, 13824, 13824, 5632, 0, 1281, 1538, 0, 0, 3390, 0, 0, 238, 239, 0, 0, 241, 0, 0, 170,
    0, 0, 4172, 0, 184, 206, 0, 147, 0, 0, 0, 0, 0, 4172, 0, 236, 1885, 1862, 1281, 1538, 0, 0, 3390, 0, 0, 1377, 1635, 0, 3390, 3428, 0, 0, 0, 4608, 0, 0, 0,
    0, 0, 114, 3393, 0, 1538, 0, 3390, 0, 3393, 134, 134, 4172
  "/>

  <!--~
   ! The DFA-state to expected-token-set mapping.
  -->
  <xsl:variable name="p:EXPECTED" as="xs:integer+" select="
    222, 121, 125, 262, 132, 142, 146, 150, 152, 156, 160, 164, 168, 172, 176, 225, 254, 188, 198, 280, 202, 206, 215, 219, 178, 228, 280, 332, 232, 234, 247,
    349, 180, 255, 319, 238, 246, 280, 251, 259, 321, 209, 211, 350, 227, 320, 244, 209, 280, 251, 184, 244, 210, 350, 182, 242, 210, 266, 240, 270, 279, 280,
    281, 273, 282, 191, 277, 286, 194, 290, 294, 298, 304, 308, 312, 280, 280, 280, 280, 325, 348, 280, 280, 300, 280, 280, 329, 348, 280, 280, 280, 341, 280,
    280, 336, 280, 280, 340, 137, 280, 347, 280, 138, 342, 280, 346, 280, 280, 340, 137, 315, 280, 280, 135, 280, 317, 280, 354, 127, 128, 280, 1048576,
    33554432, 67108864, 134217728, 268435456, 536870912, 0, 0, 0, 512, 0, 268435520, 64, 64, 64, 128, 512, 0, 0, 0, 64, 12288, 536875008, 16777216, 100663360,
    268435520, 12288, 100667392, 100667456, 536875072, 17825856, 117444608, 117444672, 4032, 536907840, 1073741824, 4032, 1207959552, 1207959552, -2037944316,
    386928712, 675319872, 1207959616, 692097024, -2037944252, -2036903868, 386928712, 692097088, 675319872, 692097024, -1768468412, 692097088, 159154240,
    159154240, -2020118460, 427589696, 692097088, 16, 32, 32, 4096, 4096, 12288, 32768, 0, 0, 65536, 17825856, 16777280, 1024, 2048, 0, 0, 2097152, 2097160,
    2097160, 2064, 512, 256, 128, 32768, 65536, 8417280, 8536064, 8536064, 12292, 262144, 17825864, 4194304, 4194304, 4194304, 4194304, 0, 0, 262208, 8409088,
    4100, 1310784, 20709440, 18088000, 0, 16, 32, 64, 4096, 4096, 4096, 12288, 16777216, 32768, 0, 8388608, 8388608, 8388608, 8388608, 12292, 8, 8404992, 12292,
    8, 4194304, 0, 4, 4, 8, 4194304, 4194304, 4194304, 4100, 0, 16, 32, 4096, 12288, 12288, 16777216, 16777216, 32768, 16777216, 32768, 32768, 0, 0, 0, 1048640,
    0, 32768, 0, 4, 8, 0, 4, 8, 524288, 1048576, 2097152, 0, 1048576, 4, 0, 0, 0, 0, 4, 8, 0, 1048576, 2097160, 2097152, 1049605, 520192, 1050640, 520192,
    1044480, 0, 2097162, 1049637, 1044480, 1049637, 0, 0, 0, 960, 2097166, 1049637, 1573925, 3146789, 0, 3146789, 525349, 1573925, 2097160, 1573925, 1050597, 0,
    0, 4096, 8192, 0, 0, 0, 65536, 4, 8, 0, 28672, 32768, 196608, 12288, 16384, 32768, 65536, 8404992, 8404992, 8536064, 0, 12288, 65536, 262144, 0, 64, 128,
    256, 512, 0, 0, 12288, 262144, 0, 0, 0, 16, 32, 64, 512, 0, 8192
  "/>

  <!--~
   ! The token-string table.
  -->
  <xsl:variable name="p:TOKEN" as="xs:string+" select="
    '(0)',
    'END',
    'URL',
    'important',
    'STRING_CONTENT1',
    'STRING_CONTENT2',
    'S',
    &quot;'~='&quot;,
    &quot;'|='&quot;,
    &quot;'^='&quot;,
    &quot;'$='&quot;,
    &quot;'*='&quot;,
    'IDENT',
    'FUNCTION',
    'NUMBER',
    'HASH',
    'HEX',
    'PERCENTAGE',
    'PLUS',
    'GREATER',
    'COMMA',
    'TILDE',
    'NOT',
    'DIMENSION',
    'COMMENT',
    &quot;'&quot;&quot;'&quot;,
    &quot;''''&quot;,
    &quot;'('&quot;,
    &quot;')'&quot;,
    &quot;'*'&quot;,
    &quot;','&quot;,
    &quot;'-'&quot;,
    &quot;'.'&quot;,
    &quot;'/'&quot;,
    &quot;':'&quot;,
    &quot;';'&quot;,
    &quot;'='&quot;,
    &quot;'@'&quot;,
    &quot;'@charset'&quot;,
    &quot;'@import'&quot;,
    &quot;'@media'&quot;,
    &quot;'@namespace'&quot;,
    &quot;'['&quot;,
    &quot;']'&quot;,
    &quot;'amzn-kf8'&quot;,
    &quot;'amzn-mobi'&quot;,
    &quot;'and'&quot;,
    &quot;'not'&quot;,
    &quot;'only'&quot;,
    &quot;'or'&quot;,
    &quot;'screen'&quot;,
    &quot;'{'&quot;,
    &quot;'|'&quot;,
    &quot;'}'&quot;
  "/>

  <!--~
   ! Match next token in input string, starting at given index, using
   ! the DFA entry state for the set of tokens that are expected in
   ! the current context.
   !
   ! @param $input the input string.
   ! @param $begin the index where to start in input string.
   ! @param $token-set the expected token set id.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:match" as="xs:integer+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="token-set" as="xs:integer"/>

    <xsl:variable name="result" select="$p:INITIAL[1 + $token-set]"/>
    <xsl:sequence select="p:transition($input, $begin, $begin, $begin, $result, $result mod 256, 0)"/>
  </xsl:function>

  <!--~
   ! The DFA state transition function. If we are in a valid DFA state, save
   ! it's result annotation, consume one input codepoint, calculate the next
   ! state, and use tail recursion to do the same again. Otherwise, return
   ! any valid result or a negative DFA state id in case of an error.
   !
   ! @param $input the input string.
   ! @param $begin the begin index of the current token in the input string.
   ! @param $current the index of the current position in the input string.
   ! @param $end the end index of the result in the input string.
   ! @param $result the result code.
   ! @param $current-state the current DFA state.
   ! @param $previous-state the  previous DFA state.
   ! @return a sequence of three: the token code of the result token,
   ! with input string begin and end positions. If there is no valid
   ! token, return the negative id of the DFA state that failed, along
   ! with begin and end positions of the longest viable prefix.
  -->
  <xsl:function name="p:transition">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="current" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>
    <xsl:param name="result" as="xs:integer"/>
    <xsl:param name="current-state" as="xs:integer"/>
    <xsl:param name="previous-state" as="xs:integer"/>

    <xsl:choose>
      <xsl:when test="$current-state eq 0">
        <xsl:variable name="result" select="$result idiv 256"/>
        <xsl:variable name="end" select="if ($end gt string-length($input)) then string-length($input) + 1 else $end"/>
        <xsl:sequence select="
          if ($result ne 0) then
          (
            $result - 1,
            $begin,
            $end
          )
          else
          (
            - $previous-state,
            $begin,
            $current - 1
          )
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="c0" select="(string-to-codepoints(substring($input, $current, 1)), 0)[1]"/>
        <xsl:variable name="c1" as="xs:integer">
          <xsl:choose>
            <xsl:when test="$c0 &lt; 128">
              <xsl:sequence select="$p:MAP0[1 + $c0]"/>
            </xsl:when>
            <xsl:when test="$c0 &lt; 55296">
              <xsl:variable name="c1" select="$c0 idiv 16"/>
              <xsl:variable name="c2" select="$c1 idiv 64"/>
              <xsl:sequence select="$p:MAP1[1 + $c0 mod 16 + $p:MAP1[1 + $c1 mod 64 + $p:MAP1[1 + $c2]]]"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="p:map2($c0, 1, 2)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="current" select="$current + 1"/>
        <xsl:variable name="i0" select="256 * $c1 + $current-state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 8"/>
        <xsl:variable name="next-state" select="$p:TRANSITION[$i0 mod 8 + $p:TRANSITION[$i1 + 1] + 1]"/>
        <xsl:sequence select="
          if ($next-state &gt; 255) then
            p:transition($input, $begin, $current, $current, $next-state, $next-state mod 256, $current-state)
          else
            p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Recursively translate one 32-bit chunk of an expected token bitset
   ! to the corresponding sequence of token strings.
   !
   ! @param $result the result of previous recursion levels.
   ! @param $chunk the 32-bit chunk of the expected token bitset.
   ! @param $base-token-code the token code of bit 0 in the current chunk.
   ! @return the set of token strings.
  -->
  <xsl:function name="p:token">
    <xsl:param name="result" as="xs:string*"/>
    <xsl:param name="chunk" as="xs:integer"/>
    <xsl:param name="base-token-code" as="xs:integer"/>

    <xsl:sequence select="
      if ($chunk = 0) then
        $result
      else
        p:token
        (
          ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
          if ($chunk &lt; 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
          $base-token-code + 1
        )
    "/>
  </xsl:function>

  <!--~
   ! Calculate expected token set for a given DFA state as a sequence
   ! of strings.
   !
   ! @param $state the DFA state.
   ! @return the set of token strings
  -->
  <xsl:function name="p:expected-token-set" as="xs:string*">
    <xsl:param name="state" as="xs:integer"/>

    <xsl:if test="$state > 0">
      <xsl:for-each select="0 to 1">
        <xsl:variable name="i0" select=". * 241 + $state - 1"/>
        <xsl:variable name="i1" select="$i0 idiv 4"/>
        <xsl:sequence select="p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], . * 32 + 1)"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:function>

  <!--~
   ! Classify codepoint by doing a tail recursive binary search for a
   ! matching codepoint range entry in MAP2, the codepoint to charclass
   ! map for codepoints above the surrogate block.
   !
   ! @param $c the codepoint.
   ! @param $lo the binary search lower bound map index.
   ! @param $hi the binary search upper bound map index.
   ! @return the character class.
  -->
  <xsl:function name="p:map2" as="xs:integer">
    <xsl:param name="c" as="xs:integer"/>
    <xsl:param name="lo" as="xs:integer"/>
    <xsl:param name="hi" as="xs:integer"/>

    <xsl:variable name="m" select="($hi + $lo) idiv 2"/>
    <xsl:choose>
      <xsl:when test="$lo &gt; $hi">
        <xsl:sequence select="0"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[$m] &gt; $c">
        <xsl:sequence select="p:map2($c, $lo, $m - 1)"/>
      </xsl:when>
      <xsl:when test="$p:MAP2[2 + $m] &lt; $c">
        <xsl:sequence select="p:map2($c, $m + 1, $hi)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="$p:MAP2[4 + $m]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse query_declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-query_declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-rule($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'query_declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse conditions.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-conditions" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(36, $input, $state)"/>          <!-- ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' | 'or' |
                                                                                         'screen' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 46">                                        <!-- 'and' -->
          <xsl:variable name="state" select="p:consume(46, $input, $state)"/>       <!-- 'and' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 50">                                        <!-- 'screen' -->
          <xsl:variable name="state" select="p:consume(50, $input, $state)"/>       <!-- 'screen' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 49">                                        <!-- 'or' -->
          <xsl:variable name="state" select="p:consume(49, $input, $state)"/>       <!-- 'or' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 48">                                        <!-- 'only' -->
          <xsl:variable name="state" select="p:consume(48, $input, $state)"/>       <!-- 'only' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 47">                                        <!-- 'not' -->
          <xsl:variable name="state" select="p:consume(47, $input, $state)"/>       <!-- 'not' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 45">                                        <!-- 'amzn-mobi' -->
          <xsl:variable name="state" select="p:consume(45, $input, $state)"/>       <!-- 'amzn-mobi' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 44">                                        <!-- 'amzn-kf8' -->
          <xsl:variable name="state" select="p:consume(44, $input, $state)"/>       <!-- 'amzn-kf8' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(30, $input, $state)"/>       <!-- ',' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'conditions', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediarule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(43, $input, $state)"/>      <!-- S | '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' |
                                                                                         'or' | 'screen' | '{' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(39, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' | 'or' |
                                                                                          'screen' | '{' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 51                                          (: '{' :)
                       or $state[$p:lk] = 3270">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:l1] eq 6">                                <!-- S -->
                  <xsl:variable name="state" select="p:lookahead2(38, $input, $state)"/> <!-- '(' | ',' | 'amzn-kf8' | 'amzn-mobi' | 'and' | 'not' | 'only' |
                                                                                              'or' | 'screen' -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:lk] = 27                                    (: '(' :)
                             or $state[$p:lk] = 1734">                              <!-- S '(' -->
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" as="item()+">
                    <xsl:choose>
                      <xsl:when test="$state[$p:error]">
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:when test="$state[$p:l1] = 6">                           <!-- S -->
                        <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                        <xsl:sequence select="$state"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:sequence select="$state"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-conditions($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-mediarule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse mediarule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediarule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(40, $input, $state)"/>             <!-- '@media' -->
    <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>           <!-- S -->
    <xsl:variable name="state" select="p:consume(6, $input, $state)"/>              <!-- S -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-conditions($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediarule-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediarule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 24">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(24, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production mediaquery (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(44, $input, $state)"/>      <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 24">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(24, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-mediaquery-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production mediaquery (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-mediaquery-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(52, $input, $state)"/>        <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(50, $input, $state)"/>  <!-- IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 53                                            (: '}' :)
                     or $state[$p:lk] = 3398">                                      <!-- S '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-mediaquery-3($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-query_declaration($input, $state)
          "/>
          <xsl:sequence select="p:parse-mediaquery-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse mediaquery.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-mediarule($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(48, $input, $state)"/>          <!-- S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' | '[' |
                                                                                         '|' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-mediaquery-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-query_declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-mediaquery-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(14, $input, $state)"/>          <!-- '}' -->
    <xsl:variable name="state" select="p:consume(53, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_atrule (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(2, $input, $state)"/>       <!-- S -->
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(23, $input, $state)"/>      <!-- S | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_atrule-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_atrule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(18, $input, $state)"/>      <!-- S | ';' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-simple_atrule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 38">                                        <!-- '@charset' -->
          <xsl:variable name="state" select="p:consume(38, $input, $state)"/>       <!-- '@charset' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 39">                                        <!-- '@import' -->
          <xsl:variable name="state" select="p:consume(39, $input, $state)"/>       <!-- '@import' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(41, $input, $state)"/>       <!-- '@namespace' -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-simple_atrule-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-STRING($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-simple_atrule-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(35, $input, $state)"/>             <!-- ';' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production combinator (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-combinator-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production combinator (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:consume(6, $input, $state)"/>          <!-- S -->
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-combinator-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse combinator.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-combinator" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:variable name="state" select="p:parse-combinator-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 19">                                        <!-- GREATER -->
          <xsl:variable name="state" select="p:consume(19, $input, $state)"/>       <!-- GREATER -->
          <xsl:variable name="state" select="p:parse-combinator-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 21">                                        <!-- TILDE -->
          <xsl:variable name="state" select="p:consume(21, $input, $state)"/>       <!-- TILDE -->
          <xsl:variable name="state" select="p:parse-combinator-3($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-combinator-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'combinator', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse value.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-value" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(40, $input, $state)"/>          <!-- URL | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS | DIMENSION |
                                                                                         '"' | "'" | '-' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 2">                                         <!-- URL -->
          <xsl:variable name="state" select="p:consume(2, $input, $state)"/>        <!-- URL -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 18">                                        <!-- PLUS -->
          <xsl:variable name="state" select="p:consume(18, $input, $state)"/>       <!-- PLUS -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 16">                                        <!-- HEX -->
          <xsl:variable name="state" select="p:consume(16, $input, $state)"/>       <!-- HEX -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 17">                                        <!-- PERCENTAGE -->
          <xsl:variable name="state" select="p:consume(17, $input, $state)"/>       <!-- PERCENTAGE -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 31">                                        <!-- '-' -->
          <xsl:variable name="state" select="p:consume(31, $input, $state)"/>       <!-- '-' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 23">                                        <!-- DIMENSION -->
          <xsl:variable name="state" select="p:consume(23, $input, $state)"/>       <!-- DIMENSION -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 14">                                        <!-- NUMBER -->
          <xsl:variable name="state" select="p:consume(14, $input, $state)"/>       <!-- NUMBER -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 13">                                        <!-- FUNCTION -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'value', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- important | S | IDENT | COMMA | COMMENT | '"' | "'" | ')' | '/' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/> <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | COMMENT | '"' | "'" | '-' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 33                                         (: '/' :)
                      and $state[$p:lk] != 134                                        (: S URL :)
                      and $state[$p:lk] != 774                                        (: S IDENT :)
                      and $state[$p:lk] != 838                                        (: S FUNCTION :)
                      and $state[$p:lk] != 902                                        (: S NUMBER :)
                      and $state[$p:lk] != 1030                                       (: S HEX :)
                      and $state[$p:lk] != 1094                                       (: S PERCENTAGE :)
                      and $state[$p:lk] != 1158                                       (: S PLUS :)
                      and $state[$p:lk] != 1478                                       (: S DIMENSION :)
                      and $state[$p:lk] != 1606                                       (: S '&quot;' :)
                      and $state[$p:lk] != 1670                                       (: S &quot;'&quot; :)
                      and $state[$p:lk] != 1990">                                   <!-- S '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(15, $input, $state)"/>      <!-- S | COMMA -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         DIMENSION | '"' | "'" | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-values-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 5th loop of production values (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values-5">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(41, $input, $state)"/>      <!-- important | S | IDENT | COMMA | COMMENT | '"' | "'" | ')' | '/' | ';' |
                                                                                         '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(55, $input, $state)"/> <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                          COMMA | DIMENSION | COMMENT | '"' | "'" | '-' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 33                                         (: '/' :)
                      and $state[$p:lk] != 134                                        (: S URL :)
                      and $state[$p:lk] != 774                                        (: S IDENT :)
                      and $state[$p:lk] != 838                                        (: S FUNCTION :)
                      and $state[$p:lk] != 902                                        (: S NUMBER :)
                      and $state[$p:lk] != 1030                                       (: S HEX :)
                      and $state[$p:lk] != 1094                                       (: S PERCENTAGE :)
                      and $state[$p:lk] != 1158                                       (: S PLUS :)
                      and $state[$p:lk] != 1478                                       (: S DIMENSION :)
                      and $state[$p:lk] != 1606                                       (: S '&quot;' :)
                      and $state[$p:lk] != 1670                                       (: S &quot;'&quot; :)
                      and $state[$p:lk] != 1990">                                   <!-- S '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="p:consume(33, $input, $state)"/> <!-- '/' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-value($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-values-5($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production values (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-values-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 6">                                      <!-- S -->
            <xsl:variable name="state" select="p:lookahead2(29, $input, $state)"/>  <!-- S | COMMA | COMMENT | ';' | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] != 20                                           (: COMMA :)
                    and $state[$p:lk] != 390                                          (: S S :)
                    and $state[$p:lk] != 1286">                                     <!-- S COMMA -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-values-3($input, $state)"/>
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-values-4($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-value($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-values-5($input, $state)"/>
          <xsl:sequence select="p:parse-values-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse values.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-values" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-value($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-values-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-values-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 3">                                         <!-- important -->
          <xsl:variable name="state" select="p:consume(3, $input, $state)"/>        <!-- important -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'values', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'property', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing property.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-property" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" select="p:lookahead1(26, $input, $state)"/>          <!-- IDENT | '"' | "'" -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consumeT(12, $input, $state)"/>      <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:try-STRING($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production declaration (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(45, $input, $state)"/>      <!-- URL | S | IDENT | FUNCTION | NUMBER | HEX | PERCENTAGE | PLUS |
                                                                                         DIMENSION | '"' | "'" | '-' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 12">                                   <!-- IDENT -->
              <xsl:variable name="state" select="p:lookahead2(47, $input, $state)"/> <!-- important | S | IDENT | COMMA | COMMENT | '"' | "'" | ')' | '/' |
                                                                                          ':' | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 25">                                   <!-- '"' -->
              <xsl:variable name="state" select="p:lookahead2(0, $input, $state)"/> <!-- STRING_CONTENT1 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 281">                            <!-- '"' STRING_CONTENT1 -->
                    <xsl:variable name="state" select="p:lookahead3(5, $input, $state)"/> <!-- '"' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 26">                                   <!-- "'" -->
              <xsl:variable name="state" select="p:lookahead2(1, $input, $state)"/> <!-- STRING_CONTENT2 -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 346">                            <!-- "'" STRING_CONTENT2 -->
                    <xsl:variable name="state" select="p:lookahead3(6, $input, $state)"/> <!-- "'" -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:lk] = 102681                                    (: '&quot;' STRING_CONTENT1 '&quot;' :)
                         or $state[$p:lk] = 106842">                                <!-- "'" STRING_CONTENT2 "'" -->
              <xsl:variable name="state" select="p:memoized($state, 0)"/>
              <xsl:choose>
                <xsl:when test="$state[$p:lk] != 0">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="backtrack" select="$state"/>
                  <xsl:variable name="state" select="p:strip-result($state)"/>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:try-property($input, $state)
                  "/>
                  <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/> <!-- ':' -->
                  <xsl:variable name="state" select="p:consumeT(34, $input, $state)"/> <!-- ':' -->
                  <xsl:choose>
                    <xsl:when test="not($state[$p:error])">
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -1, -1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="p:memoize($backtrack, $state, 0, $backtrack[$p:e0], -2, -2)"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != -1
                      and $state[$p:lk] != 2188">                                   <!-- IDENT ':' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-property($input, $state)
            "/>
            <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>  <!-- ':' -->
            <xsl:variable name="state" select="p:consume(34, $input, $state)"/>     <!-- ':' -->
            <xsl:sequence select="p:parse-declaration-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse declaration.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-declaration" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-property($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(17, $input, $state)"/>          <!-- S | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(10, $input, $state)"/>          <!-- ':' -->
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:parse-declaration-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-values($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'declaration', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse mediaquery_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-mediaquery_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(7, $input, $state)"/>           <!-- '(' -->
    <xsl:variable name="state" select="p:consume(27, $input, $state)"/>             <!-- '(' -->
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-declaration($input, $state)
    "/>
    <xsl:variable name="state" select="p:lookahead1(8, $input, $state)"/>           <!-- ')' -->
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'mediaquery_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse atrule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-atrule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(37, $input, $state)"/>             <!-- '@' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'atrule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse negation_arg.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation_arg" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 52">                                       <!-- '|' -->
          <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/>    <!-- IDENT | '*' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = (12,                                          (: IDENT :)
                                         29)">                                      <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(24, $input, $state)"/>    <!-- S | ')' | '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:lk] = (3340,                                  (: IDENT '|' :)
                                               3357)">                              <!-- '*' '|' -->
                <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 396                                           (: IDENT S :)
                     or $state[$p:lk] = 820                                           (: '|' IDENT :)
                     or $state[$p:lk] = 1804                                          (: IDENT ')' :)
                     or $state[$p:lk] = 52492                                         (: IDENT '|' IDENT :)
                     or $state[$p:lk] = 52509">                                     <!-- '*' '|' IDENT -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-type_selector($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 15">                                        <!-- HASH -->
          <xsl:variable name="state" select="p:consume(15, $input, $state)"/>       <!-- HASH -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 32">                                        <!-- '.' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-class($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 42">                                        <!-- '[' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-attrib($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 34">                                        <!-- ':' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-universal($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation_arg', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(35, $input, $state)"/>      <!-- S | IDENT | HASH | '*' | '.' | ':' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production negation (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(16, $input, $state)"/>      <!-- S | ')' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-negation-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse negation.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-negation" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(22, $input, $state)"/>             <!-- NOT -->
    <xsl:variable name="state" select="p:parse-negation-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-negation_arg($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-negation-2($input, $state)"/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'negation', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production expression (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(51, $input, $state)"/>      <!-- URL | S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | ')' | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-expression-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production expression (one or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-expression-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:error]">
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 18">                                      <!-- PLUS -->
            <xsl:variable name="state" select="p:consume(18, $input, $state)"/>     <!-- PLUS -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 17">                                      <!-- PERCENTAGE -->
            <xsl:variable name="state" select="p:consume(17, $input, $state)"/>     <!-- PERCENTAGE -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 2">                                       <!-- URL -->
            <xsl:variable name="state" select="p:consume(2, $input, $state)"/>      <!-- URL -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 16">                                      <!-- HEX -->
            <xsl:variable name="state" select="p:consume(16, $input, $state)"/>     <!-- HEX -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 31">                                      <!-- '-' -->
            <xsl:variable name="state" select="p:consume(31, $input, $state)"/>     <!-- '-' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 23">                                      <!-- DIMENSION -->
            <xsl:variable name="state" select="p:consume(23, $input, $state)"/>     <!-- DIMENSION -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 14">                                      <!-- NUMBER -->
            <xsl:variable name="state" select="p:consume(14, $input, $state)"/>     <!-- NUMBER -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 12">                                      <!-- IDENT -->
            <xsl:variable name="state" select="p:consume(12, $input, $state)"/>     <!-- IDENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:when test="$state[$p:l1] = 20">                                      <!-- COMMA -->
            <xsl:variable name="state" select="p:consume(20, $input, $state)"/>     <!-- COMMA -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-STRING($input, $state)
            "/>
            <xsl:sequence select="$state"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:variable name="state" select="p:parse-expression-2($input, $state)"/>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 28">                                        <!-- ')' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="p:parse-expression-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse expression.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-expression" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-expression-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'expression', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production functional_pseudo (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(46, $input, $state)"/>      <!-- URL | S | IDENT | NUMBER | HEX | PERCENTAGE | PLUS | COMMA |
                                                                                         DIMENSION | '"' | "'" | '-' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-functional_pseudo-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse functional_pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-functional_pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(13, $input, $state)"/>             <!-- FUNCTION -->
    <xsl:variable name="state" select="p:parse-functional_pseudo-1($input, $state)"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-expression($input, $state)
    "/>
    <xsl:variable name="state" select="p:consume(28, $input, $state)"/>             <!-- ')' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'functional_pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse pseudo.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-pseudo" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(34, $input, $state)"/>             <!-- ':' -->
    <xsl:variable name="state" select="p:lookahead1(25, $input, $state)"/>          <!-- IDENT | FUNCTION | ':' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 34">                                        <!-- ':' -->
          <xsl:variable name="state" select="p:consume(34, $input, $state)"/>       <!-- ':' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(20, $input, $state)"/>          <!-- IDENT | FUNCTION -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12">                                        <!-- IDENT -->
          <xsl:variable name="state" select="p:consume(12, $input, $state)"/>       <!-- IDENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-functional_pseudo($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'pseudo', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consume(4, $input, $state)"/>        <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consume(25, $input, $state)"/>       <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consume(5, $input, $state)"/>        <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consume(26, $input, $state)"/>       <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'STRING', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Try parsing STRING.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:try-STRING" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 25">                                        <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:variable name="state" select="p:lookahead1(0, $input, $state)"/>     <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:consumeT(4, $input, $state)"/>       <!-- STRING_CONTENT1 -->
          <xsl:variable name="state" select="p:lookahead1(5, $input, $state)"/>     <!-- '"' -->
          <xsl:variable name="state" select="p:consumeT(25, $input, $state)"/>      <!-- '"' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:variable name="state" select="p:lookahead1(1, $input, $state)"/>     <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:consumeT(5, $input, $state)"/>       <!-- STRING_CONTENT2 -->
          <xsl:variable name="state" select="p:lookahead1(6, $input, $state)"/>     <!-- "'" -->
          <xsl:variable name="state" select="p:consumeT(26, $input, $state)"/>      <!-- "'" -->
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:sequence select="$state"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(28, $input, $state)"/>      <!-- S | IDENT | '*' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(34, $input, $state)"/>      <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>      <!-- S | IDENT | '"' | "'" -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 4th loop of production attrib (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib-4">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(19, $input, $state)"/>      <!-- S | ']' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-attrib-4($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse attrib.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-attrib" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(42, $input, $state)"/>             <!-- '[' -->
    <xsl:variable name="state" select="p:parse-attrib-1($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(37, $input, $state)"/>    <!-- S | INCLUDES | DASHMATCH | PREFIXMATCH | SUFFIXMATCH | SUBSTRINGMATCH |
                                                                                         '=' | ']' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 52                                            (: '|' :)
                     or $state[$p:lk] = 3340">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="state" select="p:parse-attrib-2($input, $state)"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 43">                                       <!-- ']' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 9">                                   <!-- PREFIXMATCH -->
                <xsl:variable name="state" select="p:consume(9, $input, $state)"/>  <!-- PREFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 10">                                  <!-- SUFFIXMATCH -->
                <xsl:variable name="state" select="p:consume(10, $input, $state)"/> <!-- SUFFIXMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 11">                                  <!-- SUBSTRINGMATCH -->
                <xsl:variable name="state" select="p:consume(11, $input, $state)"/> <!-- SUBSTRINGMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 36">                                  <!-- '=' -->
                <xsl:variable name="state" select="p:consume(36, $input, $state)"/> <!-- '=' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 7">                                   <!-- INCLUDES -->
                <xsl:variable name="state" select="p:consume(7, $input, $state)"/>  <!-- INCLUDES -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(8, $input, $state)"/>  <!-- DASHMATCH -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-3($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-STRING($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-attrib-4($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:consume(43, $input, $state)"/>             <!-- ']' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'attrib', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse class.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-class" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:consume(32, $input, $state)"/>             <!-- '.' -->
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'class', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse universal.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-universal" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 29">                                       <!-- '*' -->
          <xsl:variable name="state" select="p:lookahead2(56, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | ')' |
                                                                                         '.' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 12                                            (: IDENT :)
                     or $state[$p:lk] = 52                                            (: '|' :)
                     or $state[$p:lk] = 3357">                                      <!-- '*' '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(9, $input, $state)"/>           <!-- '*' -->
    <xsl:variable name="state" select="p:consume(29, $input, $state)"/>             <!-- '*' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'universal', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse element_name.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-element_name" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:lookahead1(3, $input, $state)"/>           <!-- IDENT -->
    <xsl:variable name="state" select="p:consume(12, $input, $state)"/>             <!-- IDENT -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'element_name', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse namespace_prefix.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-namespace_prefix" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] != 52">                                       <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 12">                                  <!-- IDENT -->
                <xsl:variable name="state" select="p:consume(12, $input, $state)"/> <!-- IDENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="p:consume(29, $input, $state)"/> <!-- '*' -->
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(13, $input, $state)"/>          <!-- '|' -->
    <xsl:variable name="state" select="p:consume(52, $input, $state)"/>             <!-- '|' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'namespace_prefix', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse type_selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-type_selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:l1] eq 12">                                       <!-- IDENT -->
          <xsl:variable name="state" select="p:lookahead2(56, $input, $state)"/>    <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | ')' |
                                                                                         '.' | ':' | '@' | '[' | '{' | '|' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:lk] = 29                                            (: '*' :)
                     or $state[$p:lk] = 52                                            (: '|' :)
                     or $state[$p:lk] = 3340">                                      <!-- IDENT '|' -->
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-namespace_prefix($input, $state)
          "/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-element_name($input, $state)
    "/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'type_selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production simple_selector_sequence (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | '.' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 32                                         (: '.' :)
                      and $state[$p:l1] != 34                                         (: ':' :)
                      and $state[$p:l1] != 37                                         (: '@' :)
                      and $state[$p:l1] != 42">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 15">                                <!-- HASH -->
                  <xsl:variable name="state" select="p:consume(15, $input, $state)"/> <!-- HASH -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 32">                                <!-- '.' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-class($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 42">                                <!-- '[' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-attrib($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 34">                                <!-- ':' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-pseudo($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 22">                                <!-- NOT -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-negation($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 37">                                <!-- '@' -->
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-atrule($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="state" select="
                    if ($state[$p:error]) then
                      $state
                    else
                      p:parse-mediaquery_selector($input, $state)
                  "/>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:sequence select="p:parse-simple_selector_sequence-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production simple_selector_sequence (one or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:error]">
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 15">                                    <!-- HASH -->
              <xsl:variable name="state" select="p:consume(15, $input, $state)"/>   <!-- HASH -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 32">                                    <!-- '.' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-class($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 42">                                    <!-- '[' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-attrib($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 34">                                    <!-- ':' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-pseudo($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 22">                                    <!-- NOT -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-negation($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] = 37">                                    <!-- '@' -->
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-atrule($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="state" select="
                if ($state[$p:error]) then
                  $state
                else
                  p:parse-mediaquery_selector($input, $state)
              "/>
              <xsl:sequence select="$state"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="state" select="p:lookahead1(53, $input, $state)"/>      <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' | '.' |
                                                                                         ':' | '@' | '[' | '{' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 15                                         (: HASH :)
                      and $state[$p:l1] != 22                                         (: NOT :)
                      and $state[$p:l1] != 27                                         (: '(' :)
                      and $state[$p:l1] != 32                                         (: '.' :)
                      and $state[$p:l1] != 34                                         (: ':' :)
                      and $state[$p:l1] != 37                                         (: '@' :)
                      and $state[$p:l1] != 42">                                     <!-- '[' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="p:parse-simple_selector_sequence-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse simple_selector_sequence.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-simple_selector_sequence" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 12                                            (: IDENT :)
                     or $state[$p:l1] = 29                                            (: '*' :)
                     or $state[$p:l1] = 52">                                        <!-- '|' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:l1] eq 52">                                 <!-- '|' -->
                <xsl:variable name="state" select="p:lookahead2(21, $input, $state)"/> <!-- IDENT | '*' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = (12,                                    (: IDENT :)
                                               29)">                                <!-- '*' -->
                <xsl:variable name="state" select="p:lookahead2(54, $input, $state)"/> <!-- S | HASH | PLUS | GREATER | COMMA | TILDE | NOT | COMMENT | '(' |
                                                                                            '.' | ':' | '@' | '[' | '{' | '|' -->
                <xsl:variable name="state" as="item()+">
                  <xsl:choose>
                    <xsl:when test="$state[$p:lk] = (3340,                            (: IDENT '|' :)
                                                     3357)">                        <!-- '*' '|' -->
                      <xsl:variable name="state" select="p:lookahead3(21, $input, $state)"/> <!-- IDENT | '*' -->
                      <xsl:sequence select="$state"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:sequence select="$state"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:lk] = 396                                     (: IDENT S :)
                           or $state[$p:lk] = 820                                     (: '|' IDENT :)
                           or $state[$p:lk] = 972                                     (: IDENT HASH :)
                           or $state[$p:lk] = 1164                                    (: IDENT PLUS :)
                           or $state[$p:lk] = 1228                                    (: IDENT GREATER :)
                           or $state[$p:lk] = 1292                                    (: IDENT COMMA :)
                           or $state[$p:lk] = 1356                                    (: IDENT TILDE :)
                           or $state[$p:lk] = 1420                                    (: IDENT NOT :)
                           or $state[$p:lk] = 1548                                    (: IDENT COMMENT :)
                           or $state[$p:lk] = 1740                                    (: IDENT '(' :)
                           or $state[$p:lk] = 2060                                    (: IDENT '.' :)
                           or $state[$p:lk] = 2188                                    (: IDENT ':' :)
                           or $state[$p:lk] = 2380                                    (: IDENT '@' :)
                           or $state[$p:lk] = 2700                                    (: IDENT '[' :)
                           or $state[$p:lk] = 3276                                    (: IDENT '{' :)
                           or $state[$p:lk] = 52492                                   (: IDENT '|' IDENT :)
                           or $state[$p:lk] = 52509">                               <!-- '*' '|' IDENT -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-type_selector($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-universal($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-1($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" select="p:parse-simple_selector_sequence-2($input, $state)"/>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'simple_selector_sequence', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production selector (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(49, $input, $state)"/> <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '{' |
                                                                                          '|' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] = 20                                          (: COMMA :)
                       or $state[$p:lk] = 24                                          (: COMMENT :)
                       or $state[$p:lk] = 51                                          (: '{' :)
                       or $state[$p:lk] = 3270">                                    <!-- S '{' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-combinator($input, $state)
            "/>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-simple_selector_sequence($input, $state)
            "/>
            <xsl:sequence select="p:parse-selector-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse selector.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selector" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-simple_selector_sequence($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selector-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selector', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production selectors_group (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(42, $input, $state)"/>      <!-- S | IDENT | HASH | NOT | '(' | '*' | '.' | ':' | '@' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-selectors_group-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production selectors_group (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-selectors_group-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] != 20                                           (: COMMA :)
                    and $state[$p:l1] != 24">                                       <!-- COMMENT -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(4, $input, $state)"/>     <!-- COMMA -->
          <xsl:variable name="state" select="p:consume(20, $input, $state)"/>       <!-- COMMA -->
          <xsl:variable name="state" select="p:parse-selectors_group-2($input, $state)"/>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-selector($input, $state)
          "/>
          <xsl:sequence select="p:parse-selectors_group-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse selectors_group.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-selectors_group" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selector($input, $state)
    "/>
    <xsl:variable name="state" select="p:parse-selectors_group-1($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'selectors_group', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 2nd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-2">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(33, $input, $state)"/>      <!-- S | IDENT | COMMENT | '"' | "'" | ';' | '}' -->
        <xsl:variable name="state" as="item()+">
          <xsl:choose>
            <xsl:when test="$state[$p:l1] eq 6">                                    <!-- S -->
              <xsl:variable name="state" select="p:lookahead2(32, $input, $state)"/> <!-- IDENT | COMMENT | '"' | "'" | ';' | '}' -->
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:when test="$state[$p:l1] eq 35">                                   <!-- ';' -->
              <xsl:variable name="state" select="p:lookahead2(31, $input, $state)"/> <!-- S | IDENT | COMMENT | '"' | "'" | '}' -->
              <xsl:variable name="state" as="item()+">
                <xsl:choose>
                  <xsl:when test="$state[$p:lk] eq 419">                            <!-- ';' S -->
                    <xsl:variable name="state" select="p:lookahead3(30, $input, $state)"/> <!-- IDENT | COMMENT | '"' | "'" | '}' -->
                    <xsl:sequence select="$state"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:sequence select="$state"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:sequence select="$state"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$state[$p:lk] != 803                                        (: ';' IDENT :)
                      and $state[$p:lk] != 1635                                       (: ';' '&quot;' :)
                      and $state[$p:lk] != 1699                                       (: ';' &quot;'&quot; :)
                      and $state[$p:lk] != 2246                                       (: S ';' :)
                      and $state[$p:lk] != 49571                                      (: ';' S IDENT :)
                      and $state[$p:lk] != 102819                                     (: ';' S '&quot;' :)
                      and $state[$p:lk] != 106915">                                 <!-- ';' S "'" -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="p:lookahead1(11, $input, $state)"/>  <!-- ';' -->
            <xsl:variable name="state" select="p:consume(35, $input, $state)"/>     <!-- ';' -->
            <xsl:variable name="state" select="p:lookahead1(27, $input, $state)"/>  <!-- S | IDENT | '"' | "'" -->
            <xsl:variable name="state" as="item()+">
              <xsl:choose>
                <xsl:when test="$state[$p:error]">
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:when test="$state[$p:l1] = 6">                                 <!-- S -->
                  <xsl:variable name="state" select="p:consume(6, $input, $state)"/> <!-- S -->
                  <xsl:sequence select="$state"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:sequence select="$state"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="state" select="
              if ($state[$p:error]) then
                $state
              else
                p:parse-declaration($input, $state)
            "/>
            <xsl:sequence select="p:parse-rule-2($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 1st loop of production rule (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-rule-1">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:variable name="state" select="p:lookahead1(30, $input, $state)"/>        <!-- IDENT | COMMENT | '"' | "'" | '}' -->
      <xsl:variable name="state" as="item()+">
        <xsl:choose>
          <xsl:when test="$state[$p:l1] eq 24">                                     <!-- COMMENT -->
            <xsl:variable name="state" select="p:lookahead2(30, $input, $state)"/>  <!-- IDENT | COMMENT | '"' | "'" | '}' -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:sequence select="$state[$p:l1], subsequence($state, $p:lk + 1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$state[$p:lk] = 53                                            (: '}' :)
                     or $state[$p:lk] = 1560                                          (: COMMENT COMMENT :)
                     or $state[$p:lk] = 3416">                                      <!-- COMMENT '}' -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="
            if ($state[$p:error]) then
              $state
            else
              p:parse-declaration($input, $state)
          "/>
          <xsl:variable name="state" select="p:parse-rule-2($input, $state)"/>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 35">                                  <!-- ';' -->
                <xsl:variable name="state" select="p:consume(35, $input, $state)"/> <!-- ';' -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>    <!-- S | IDENT | COMMENT | '"' | "'" | '}' -->
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 6">                                   <!-- S -->
                <xsl:variable name="state" select="p:consume(6, $input, $state)"/>  <!-- S -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:sequence select="p:parse-rule-1($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse the 3rd loop of production rule (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(22, $input, $state)"/>      <!-- COMMENT | '}' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 24">                                     <!-- COMMENT -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(24, $input, $state)"/>     <!-- COMMENT -->
            <xsl:sequence select="p:parse-rule-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse rule.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-rule" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="
      if ($state[$p:error]) then
        $state
      else
        p:parse-selectors_group($input, $state)
    "/>
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:lookahead1(12, $input, $state)"/>          <!-- '{' -->
    <xsl:variable name="state" select="p:consume(51, $input, $state)"/>             <!-- '{' -->
    <xsl:variable name="state" select="p:lookahead1(31, $input, $state)"/>          <!-- S | IDENT | COMMENT | '"' | "'" | '}' -->
    <xsl:variable name="state" as="item()+">
      <xsl:choose>
        <xsl:when test="$state[$p:error]">
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:when test="$state[$p:l1] = 6">                                         <!-- S -->
          <xsl:variable name="state" select="p:consume(6, $input, $state)"/>        <!-- S -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:sequence select="$state"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="state" select="p:parse-rule-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-rule-3($input, $state)"/>
    <xsl:variable name="state" select="p:consume(53, $input, $state)"/>             <!-- '}' -->
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'rule', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Parse the 1st loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-1">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-1($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Parse the 3rd loop of production css (zero or more). Use
   ! tail recursion for iteratively updating the lexer state.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css-3">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="state" select="p:lookahead1(57, $input, $state)"/>      <!-- END | S | IDENT | HASH | NOT | COMMENT | '(' | '*' | '.' | ':' | '@' |
                                                                                         '@charset' | '@import' | '@media' | '@namespace' | '[' | '|' -->
        <xsl:choose>
          <xsl:when test="$state[$p:l1] != 6">                                      <!-- S -->
            <xsl:sequence select="$state"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="state" select="p:consume(6, $input, $state)"/>      <!-- S -->
            <xsl:sequence select="p:parse-css-3($input, $state)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

<!--~
 ! Parse the 2nd loop of production css (zero or more). Use
 ! tail recursion for iteratively updating the lexer state.
 !
 ! @param $input the input string.
 ! @param $state lexer state, error indicator, and result.
 ! @return the updated state.
-->
<xsl:function name="p:parse-css-2">
  <xsl:param name="input" as="xs:string"/>
  <xsl:param name="state" as="item()+"/>

  <xsl:choose>
    <xsl:when test="$state[$p:error]">
      <xsl:sequence select="$state"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:choose>
        <xsl:when test="$state[$p:l1] = 1">                                         <!-- END -->
          <xsl:sequence select="$state"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:variable name="state" as="item()+">
            <xsl:choose>
              <xsl:when test="$state[$p:error]">
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 38                                      (: '@charset' :)
                           or $state[$p:l1] = 39                                      (: '@import' :)
                           or $state[$p:l1] = 41">                                  <!-- '@namespace' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-simple_atrule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 40">                                  <!-- '@media' -->
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-mediaquery($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:when test="$state[$p:l1] = 24">                                  <!-- COMMENT -->
                <xsl:variable name="state" select="p:consume(24, $input, $state)"/> <!-- COMMENT -->
                <xsl:sequence select="$state"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:variable name="state" select="
                  if ($state[$p:error]) then
                    $state
                  else
                    p:parse-rule($input, $state)
                "/>
                <xsl:sequence select="$state"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <xsl:variable name="state" select="p:parse-css-3($input, $state)"/>
          <xsl:sequence select="p:parse-css-2($input, $state)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>

  <!--~
   ! Parse css.
   !
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:parse-css" as="item()+">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="count" select="count($state)"/>
    <xsl:variable name="begin" select="$state[$p:e0]"/>
    <xsl:variable name="state" select="p:parse-css-1($input, $state)"/>
    <xsl:variable name="state" select="p:parse-css-2($input, $state)"/>
    <xsl:variable name="end" select="$state[$p:e0]"/>
    <xsl:sequence select="p:reduce($state, 'css', $count, $begin, $end)"/>
  </xsl:function>

  <!--~
   ! Create a textual error message from a parsing error.
   !
   ! @param $input the input string.
   ! @param $error the parsing error descriptor.
   ! @return the error message.
  -->
  <xsl:function name="p:error-message" as="xs:string">
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="error" as="element(error)"/>

    <xsl:variable name="begin" select="xs:integer($error/@b)"/>
    <xsl:variable name="context" select="string-to-codepoints(substring($input, 1, $begin - 1))"/>
    <xsl:variable name="linefeeds" select="index-of($context, 10)"/>
    <xsl:variable name="line" select="count($linefeeds) + 1"/>
    <xsl:variable name="column" select="($begin - $linefeeds[last()], $begin)[1]"/>
    <xsl:variable name="expected" select="if ($error/@x) then () else p:expected-token-set($error/@s)"/>
    <xsl:sequence select="
      string-join
      (
        (
          if ($error/@o) then
            ('syntax error, found ', $p:TOKEN[$error/@o + 1])
          else
            'lexical analysis failed',
          '&#10;while expecting ',
          if ($error/@x) then
            $p:TOKEN[$error/@x + 1]
          else
          (
            '['[exists($expected[2])],
            string-join($expected, ', '),
            ']'[exists($expected[2])]
          ),
          '&#10;',
          if ($error/@o or $error/@e = $begin) then
            ()
          else
            ('after successfully scanning ', string($error/@e - $begin), ' characters beginning '),
          'at line ', string($line), ', column ', string($column), ':&#10;',
          '...', substring($input, $begin, 64), '...'
        ),
        ''
      )
    "/>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consume" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:variable name="begin" select="$state[$p:e0]"/>
        <xsl:variable name="end" select="$state[$p:b1]"/>
        <xsl:variable name="whitespace">
          <xsl:if test="$begin ne $end">
            <xsl:value-of select="substring($input, $begin, $end - $begin)"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="token" select="$p:TOKEN[1 + $state[$p:l1]]"/>
        <xsl:variable name="name" select="if (starts-with($token, &quot;'&quot;)) then 'TOKEN' else $token"/>
        <xsl:variable name="begin" select="$state[$p:b1]"/>
        <xsl:variable name="end" select="$state[$p:e1]"/>
        <xsl:variable name="node">
          <xsl:element name="{$name}">
            <xsl:sequence select="substring($input, $begin, $end - $begin)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13),
          $whitespace/node(),
          $node/node()
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Consume one token, i.e. compare lookahead token 1 with expected
   ! token and in case of a match, shift lookahead tokens down such that
   ! l1 becomes the current token, and higher lookahead tokens move down.
   ! When lookahead token 1 does not match the expected token, raise an
   ! error by saving the expected token code in the error field of the
   ! lexer state. In contrast to p:consume, do not create any output.
   !
   ! @param $code the expected token.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result.
   ! @return the updated state.
  -->
  <xsl:function name="p:consumeT" as="item()+">
    <xsl:param name="code" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:error]">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:when test="$state[$p:l1] eq $code">
        <xsl:sequence select="
          subsequence($state, $p:l1, 9),
          0, 0, 0,
          subsequence($state, 13)
        "/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="error">
          <xsl:element name="error">
            <xsl:choose>
              <xsl:when test="$state[$p:e1] &lt; $state[$p:memo]/@e">
                <xsl:sequence select="$state[$p:memo]/@*"/>
              </xsl:when>
              <xsl:otherwise>
              <xsl:attribute name="b" select="$state[$p:b1]"/>
              <xsl:attribute name="e" select="$state[$p:e1]"/>
              <xsl:choose>
                <xsl:when test="$state[$p:l1] lt 0">
                  <xsl:attribute name="s" select="- $state[$p:l1]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:attribute name="o" select="$state[$p:l1]"/>
                  <xsl:attribute name="x" select="$code"/>
                </xsl:otherwise>
              </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="
          subsequence($state, 1, $p:error - 1),
          $error/node(),
          subsequence($state, $p:error + 1)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 1.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead1" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:choose>
      <xsl:when test="$state[$p:l1] ne 0">
        <xsl:sequence select="$state"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="match" select="
          p:match($input, $state[$p:e0], $set),
          0, 0, 0
        "/>
        <xsl:sequence select="
          $match[1],
          subsequence($state, $p:b0, 2),
          $match,
          subsequence($state, 10)
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 2.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead2" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l2] ne 0) then
        subsequence($state, $p:l2, 6)
      else
      (
        p:match($input, $state[$p:e1], $set),
        0, 0, 0
      )
    "/>
    <xsl:sequence select="
      $match[1] * 64 + $state[$p:l1],
      subsequence($state, $p:b0, 5),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Lookahead one token on level 3.
   !
   ! @param $set the code of the DFA entry state for the set of valid tokens.
   ! @param $input the input string.
   ! @param $state lexer state, error indicator, and result stack.
   ! @return the updated state.
  -->
  <xsl:function name="p:lookahead3" as="item()+">
    <xsl:param name="set" as="xs:integer"/>
    <xsl:param name="input" as="xs:string"/>
    <xsl:param name="state" as="item()+"/>

    <xsl:variable name="match" select="
      if ($state[$p:l3] ne 0) then
        subsequence($state, $p:l3, 3)
      else
        p:match($input, $state[$p:e2], $set)
    "/>
    <xsl:sequence select="
      $match[1] * 4096 + $state[$p:lk],
      subsequence($state, $p:b0, 8),
      $match,
      subsequence($state, 13)
    "/>
  </xsl:function>

  <!--~
   ! Reduce the result stack, creating a nonterminal element. Pop
   ! $count elements off the stack, wrap them in a new element
   ! named $name, and push the new element.
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $name the name of the result node.
   ! @param $count the number of child nodes.
   ! @param $begin the input index where the nonterminal begins.
   ! @param $end the input index where the nonterminal ends.
   ! @return the updated state.
  -->
  <xsl:function name="p:reduce" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="count" as="xs:integer"/>
    <xsl:param name="begin" as="xs:integer"/>
    <xsl:param name="end" as="xs:integer"/>

    <xsl:variable name="node">
      <xsl:element name="{$name}">
        <xsl:sequence select="subsequence($state, $count + 1)"/>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="subsequence($state, 1, $count), $node/node()"/>
  </xsl:function>

  <!--~
   ! Strip result from lexer state, in order to avoid carrying it while
   ! backtracking.
   !
   ! @param $state the lexer state after an alternative failed.
   ! @return the updated state.
  -->
  <xsl:function name="p:strip-result" as="item()+">
    <xsl:param name="state" as="item()+"/>

    <xsl:sequence select="subsequence($state, 1, $p:memo)"/>
  </xsl:function>

  <!--~
   : Memoize the backtracking result that was computed at decision point
   : $dpi for input position $e0. Reconstruct state from the parameters.
   :
   : @param $state the lexer state to be restored.
   : @param $update the lexer state containing updates.
   : @param $dpi the decision point id.
   : @param $e0 the input position.
   : @param $v the id of the successful alternative.
   : @param $lk the new lookahead code.
   : @return the reconstructed state.
  -->
  <xsl:function name="p:memoize" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="update" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>
    <xsl:param name="e0" as="xs:integer"/>
    <xsl:param name="v" as="xs:integer"/>
    <xsl:param name="lk" as="xs:integer"/>

    <xsl:variable name="memo" select="$update[$p:memo]"/>
    <xsl:variable name="errors" select="($memo, $update[$p:error])[.]"/>
    <xsl:variable name="memo">
      <xsl:element name="memo">
        <xsl:sequence select="$errors[@e = max($errors/xs:integer(@e))][last()]/@*, $memo/value"/>
        <xsl:element name="value">
          <xsl:attribute name="key" select="$e0 * 1 + $dpi"/>
          <xsl:sequence select="$v"/>
        </xsl:element>
      </xsl:element>
    </xsl:variable>
    <xsl:sequence select="
      $lk,
      subsequence($state, $p:b0, $p:memo - $p:b0),
      $memo/node(),
      subsequence($state, $p:memo + 1)
    "/>
  </xsl:function>

  <!--~
   ! Retrieve memoized backtracking result for decision point $dpi
   ! and input position $state[$p:e0] into $state[$p:lk].
   !
   ! @param $state lexer state, error indicator, and result.
   ! @param $dpi the decision point id.
   ! @return the updated state.
  -->
  <xsl:function name="p:memoized" as="item()+">
    <xsl:param name="state" as="item()+"/>
    <xsl:param name="dpi" as="xs:integer"/>

    <xsl:variable name="value" select="data($state[$p:memo]/value[@key = $state[$p:e0] * 1 + $dpi])"/>
    <xsl:sequence select="
      if ($value) then $value else 0,
      subsequence($state, $p:lk + 1)
    "/>
  </xsl:function>

  <!--~
   ! Parse start symbol css from given string.
   !
   ! @param $s the string to be parsed.
   ! @return the result as generated by parser actions.
  -->
  <xsl:function name="p:parse-css" as="item()*">
    <xsl:param name="s" as="xs:string"/>

    <xsl:variable name="memo">
      <xsl:element name="memo"/>
    </xsl:variable>
    <xsl:variable name="state" select="0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, false(), $memo/node()"/>
    <xsl:variable name="state" select="p:parse-css($s, $state)"/>
    <xsl:variable name="error" select="$state[$p:error]"/>
    <xsl:choose>
      <xsl:when test="$error">
        <xsl:variable name="ERROR">
          <xsl:element name="ERROR">
            <xsl:sequence select="$error/@*, p:error-message($s, $error)"/>
          </xsl:element>
        </xsl:variable>
        <xsl:sequence select="$ERROR/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:sequence select="subsequence($state, $p:result)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>

  <!--~
   ! The input filename, or string, if surrounded by curly braces.
  -->
  <xsl:param name="input" as="xs:string?" select="()"/>

  <!--~
   ! The (simple) main program.
  -->
  <xsl:template name="main" match="/">
    <xsl:param name="input" as="xs:string?" select="$input"/>

    <xsl:choose>
      <xsl:when test="empty($input)">
        <xsl:sequence select="error(xs:QName('main'), '&#xA;    Usage: java net.sf.saxon.Transform -xsl:CSS3.xslt -it:main input=INPUT&#xA;&#xA;      parse INPUT, which is either a filename or literal text enclosed in curly braces')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="result" select="
          if (matches($input, '^\{.*\}$')) then
            p:parse-css(substring($input, 2, string-length($input) - 2))
          else
            p:parse-css(unparsed-text($input, 'utf-8'))
        "/>
        <xsl:sequence select="
          if (empty($result/self::ERROR)) then
            $result
          else
            error(xs:QName('p:parse-css'), concat('&#10;    ', replace($result, '&#10;', '&#10;    ')))
        "/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>