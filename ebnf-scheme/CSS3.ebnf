css      ::= ( (  rule | simple_atrule | mediaquery )  )*
simple_atrule  ::= ('@charset'|'@import'|'@namespace')  (STRING|IDENT)  ';' 
rule     ::= selectors_group '{'   ( declaration (  ';'  declaration)* ';'? )* '}'
mediaquery ::= mediarule  '{'   query_declaration (  query_declaration)*  '}'
query_declaration ::= rule
declaration ::=  property  ':'  (property ':')*  values 
selectors_group
         ::= selector   (  COMMA  selector )*  
selector ::= simple_selector_sequence  ( combinator? simple_selector_sequence)*
mediaquery_selector::= '(' declaration ')'
combinator
         ::= PLUS 
           | GREATER 
           | TILDE 
    /* ws: explicit */
simple_selector_sequence
         ::= type_selector ( HASH | class | attrib | pseudo | negation | atrule | mediaquery_selector )*
           | ( HASH | class | attrib | pseudo | negation | atrule| mediaquery_selector )+
    /* ws: explicit */
type_selector
         ::= namespace_prefix? ( element_name | '*' )
    /* ws: explicit */
namespace_prefix
         ::= ( IDENT | '*' )? '|'
    /* ws: explicit */
element_name
         ::= IDENT
    /* ws: explicit */
class    ::= '.' IDENT
    /* ws: explicit */
mediarule ::= '@media'  conditions (  conditions|   mediaquery_selector )*
atrule  ::= '@' IDENT
    /* ws: explicit */
conditions ::=  ('and'|'screen'|'or'|'only'|'not'|'amzn-mobi'|'amzn-kf8'|',') 
attrib   ::= '['  namespace_prefix? IDENT  ( ( PREFIXMATCH  | SUFFIXMATCH | SUBSTRINGMATCH | '=' | INCLUDES | DASHMATCH )  ( IDENT | STRING )  )? ']'
    /* ws: explicit */
pseudo   ::= ':' ':'? ( IDENT | functional_pseudo )
    /* ws: explicit */
functional_pseudo
         ::= FUNCTION  expression ')'
    /* ws: explicit */

property ::= ( STRING | IDENT )
values ::= value ( value | '/' value )* important?
value ::= ( URL | PLUS | HEX | PERCENTAGE | '-' | DIMENSION | NUMBER  | STRING | IDENT | COMMA | functional_pseudo) /*(COMMA  IDENT)?*/
  /* ws: explicit */
expression     ::= ( ( PLUS | PERCENTAGE | URL | HEX | '-' | DIMENSION  | NUMBER | STRING | IDENT | COMMA)  )+
negation ::= NOT  negation_arg  ')'
    /* ws: explicit */
negation_arg
         ::= type_selector
           | HASH
           | class
           | attrib
           | pseudo
    /* ws: explicit */

Ignore ::= S^WS | COMMENT 
   /* ws: definition */
COMMENT ::=  '/*' CommentContents '*/' 

<?TOKENS?>
EOF      ::= $
URL       ::= 'url(' ("'"|#x0027|nmchar|'/'|'.')+ ')'
    /* ws: explicit */
important ::=  '!important'
ident    ::= [-]? nmstart nmchar*
  /* ws: explicit */
name     ::= nmchar+
nmstart  ::= [_a-zA-Z]
           | nonascii
           | escape
nonascii ::= [^#x0000-#x007F]
unicode  ::= '\' one-to-six-hex-digits ( #x000D #x000A | [ #x000A#x000D#x0009#x000C] )?
escape   ::= unicode
           | '\' [^0-9a-f#x000A#x000D#x000C]
nmchar   ::= [_a-zA-Z0-9#x2D]
           | nonascii
           | escape
num      ::= [0-9]+
           | [0-9]* '.' [0-9]+
string   ::= string1
           | string2
string1  ::= '"' ( [^#x000A#x000D#x000C\"] | '\' nl | nonascii | escape )* '"'
string2  ::= "'" ( [^#x000A#x000D#x000C\'] | '\' nl | nonascii | escape )* "'"
nl       ::= #x000A
           | #x000D #x000A
           | #x000D
           | #x000C
N        ::= 'n'
           | '\' zero-to-four-zeroes ( '4e' | '6e' ) ( #x000D #x000A | [ #x0009#x000D#x000A#x000C] )?
           | '\n'
O        ::= 'o'
           | '\' zero-to-four-zeroes ( '4f' | '6f' ) ( #x000D #x000A | [ #x0009#x000D#x000A#x000C] )?
           | '\o'
T        ::= 't'
           | '\' zero-to-four-zeroes ( '54' | '74' ) ( #x000D #x000A | [ #x0009#x000D#x000A#x000C] )?
           | '\t'
S        ::= ( #x0020 | #x0009 | #x000D | #x000A )+
SPACE    ::= #x0020
INCLUDES ::= '~='
DASHMATCH
         ::= '|='
PREFIXMATCH
         ::= '^='
SUFFIXMATCH
         ::= '$='
SUBSTRINGMATCH
         ::= '*='
IDENT    ::= ident
STRING   ::= string
FUNCTION ::= ident '('
NUMBER   ::= '-'?num
HASH     ::= '#' name
HEX      ::= '#' one-to-six-hex-digits
PERCENTAGE ::= num '%'
PLUS     ::= '+'
GREATER  ::= '>'
COMMA    ::= ','
TILDE    ::= '~'
NOT      ::= ':' N O T '('
DIMENSION ::= '-'?num  ('em' | 'px' | 'fr' | 'cm' | 'mm' | 'in' | 'pt' | 'pc'|'vh')
Char     ::= #x0009
           | #x000A
           | #x000D
           | [#x0020-#xD7FF]
           | [#xE000-#xFFFD]
           | [#x10000-#x10FFFF]
CommentContents
         ::=( ( Char+ - ( Char* ( '/*' | '*/' ) Char* ) ) - ( Char* '/' ) ) &'*'
           | ( Char+ - ( Char* ( '/*' | '*/' ) Char* ) ) &'*/'

one-to-six-hex-digits
         ::= [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
           | [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
zero-to-four-zeroes
         ::=
           | '0'
           | '00'
           | '000'
           | '0000'